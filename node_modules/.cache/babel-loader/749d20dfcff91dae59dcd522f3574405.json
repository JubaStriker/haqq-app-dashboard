{"ast":null,"code":"\"use strict\";\n/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\n\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n  var cur_accum,\n      cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n\n  var maxcode; // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n\n  var clear_flg = false; // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n\n  var g_init_bits, ClearCode, EOFCode;\n  var remaining, curPixel, n_bits; // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  } // Clear out the hash table\n  // table clear for block compress\n\n\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  } // Reset code table\n\n\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift; // Set up the globals: g_init_bits - initial number of bits\n\n    g_init_bits = init_bits; // Set up the necessary values\n\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n    ClearCode = 1 << init_bits - 1;\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n    hshift = 0;\n\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n\n    hshift = 8 - hshift; // set hash code range bound\n\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = c << hshift ^ ent; // xor hashing\n\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) {\n        // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n\n        if (i === 0) disp = 1;\n\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n\n      output(ent, outs);\n      ent = c;\n\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    } // Put out the final code.\n\n\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n\n    remaining = width * height; // reset navigation variables\n\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n\n    outs.writeByte(0); // write block terminator\n  } // Flush the packet to disk, and reset the accumulator\n\n\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  } // Return the next pixel from the image\n\n\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n    if (cur_bits > 0) cur_accum |= code << cur_bits;else cur_accum = code;\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out(cur_accum & 0xff, outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    } // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n\n\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out(cur_accum & 0xff, outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/awesome-qr/lib/gif.js/LZWEncoder.js"],"names":["EOF","BITS","HSIZE","masks","LZWEncoder","width","height","pixels","colorDepth","initCodeSize","Math","max","accum","Uint8Array","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","clear_flg","g_init_bits","ClearCode","EOFCode","remaining","curPixel","n_bits","char_out","c","outs","flush_char","cl_block","cl_hash","output","hsize","i","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","encode","writeByte","writeBytes","pix","code","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n    0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n    0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n    var initCodeSize = Math.max(2, colorDepth);\n    var accum = new Uint8Array(256);\n    var htab = new Int32Array(HSIZE);\n    var codetab = new Int32Array(HSIZE);\n    var cur_accum, cur_bits = 0;\n    var a_count;\n    var free_ent = 0; // first unused entry\n    var maxcode;\n    // block compression parameters -- after all codes are used up,\n    // and compression rate changes, start over.\n    var clear_flg = false;\n    // Algorithm: use open addressing double hashing (no chaining) on the\n    // prefix code / next character combination. We do a variant of Knuth's\n    // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n    // secondary probe. Here, the modular division first probe is gives way\n    // to a faster exclusive-or manipulation. Also do block compression with\n    // an adaptive reset, whereby the code table is cleared when the compression\n    // ratio decreases, but after the table fills. The variable-length output\n    // codes are re-sized at this point, and a special CLEAR code is generated\n    // for the decompressor. Late addition: construct the table according to\n    // file size for noticeable speed improvement on small files. Please direct\n    // questions about this implementation to ames!jaw.\n    var g_init_bits, ClearCode, EOFCode;\n    var remaining, curPixel, n_bits;\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    function char_out(c, outs) {\n        accum[a_count++] = c;\n        if (a_count >= 254)\n            flush_char(outs);\n    }\n    // Clear out the hash table\n    // table clear for block compress\n    function cl_block(outs) {\n        cl_hash(HSIZE);\n        free_ent = ClearCode + 2;\n        clear_flg = true;\n        output(ClearCode, outs);\n    }\n    // Reset code table\n    function cl_hash(hsize) {\n        for (var i = 0; i < hsize; ++i)\n            htab[i] = -1;\n    }\n    function compress(init_bits, outs) {\n        var fcode, c, i, ent, disp, hsize_reg, hshift;\n        // Set up the globals: g_init_bits - initial number of bits\n        g_init_bits = init_bits;\n        // Set up the necessary values\n        clear_flg = false;\n        n_bits = g_init_bits;\n        maxcode = MAXCODE(n_bits);\n        ClearCode = 1 << (init_bits - 1);\n        EOFCode = ClearCode + 1;\n        free_ent = ClearCode + 2;\n        a_count = 0; // clear packet\n        ent = nextPixel();\n        hshift = 0;\n        for (fcode = HSIZE; fcode < 65536; fcode *= 2)\n            ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n        hsize_reg = HSIZE;\n        cl_hash(hsize_reg); // clear hash table\n        output(ClearCode, outs);\n        outer_loop: while ((c = nextPixel()) != EOF) {\n            fcode = (c << BITS) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n            if (htab[i] === fcode) {\n                ent = codetab[i];\n                continue;\n            }\n            else if (htab[i] >= 0) { // non-empty slot\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0)\n                    disp = 1;\n                do {\n                    if ((i -= disp) < 0)\n                        i += hsize_reg;\n                    if (htab[i] === fcode) {\n                        ent = codetab[i];\n                        continue outer_loop;\n                    }\n                } while (htab[i] >= 0);\n            }\n            output(ent, outs);\n            ent = c;\n            if (free_ent < 1 << BITS) {\n                codetab[i] = free_ent++; // code -> hashtable\n                htab[i] = fcode;\n            }\n            else {\n                cl_block(outs);\n            }\n        }\n        // Put out the final code.\n        output(ent, outs);\n        output(EOFCode, outs);\n    }\n    function encode(outs) {\n        outs.writeByte(initCodeSize); // write \"initial code size\" byte\n        remaining = width * height; // reset navigation variables\n        curPixel = 0;\n        compress(initCodeSize + 1, outs); // compress and write the pixel data\n        outs.writeByte(0); // write block terminator\n    }\n    // Flush the packet to disk, and reset the accumulator\n    function flush_char(outs) {\n        if (a_count > 0) {\n            outs.writeByte(a_count);\n            outs.writeBytes(accum, 0, a_count);\n            a_count = 0;\n        }\n    }\n    function MAXCODE(n_bits) {\n        return (1 << n_bits) - 1;\n    }\n    // Return the next pixel from the image\n    function nextPixel() {\n        if (remaining === 0)\n            return EOF;\n        --remaining;\n        var pix = pixels[curPixel++];\n        return pix & 0xff;\n    }\n    function output(code, outs) {\n        cur_accum &= masks[cur_bits];\n        if (cur_bits > 0)\n            cur_accum |= (code << cur_bits);\n        else\n            cur_accum = code;\n        cur_bits += n_bits;\n        while (cur_bits >= 8) {\n            char_out((cur_accum & 0xff), outs);\n            cur_accum >>= 8;\n            cur_bits -= 8;\n        }\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n        if (free_ent > maxcode || clear_flg) {\n            if (clear_flg) {\n                maxcode = MAXCODE(n_bits = g_init_bits);\n                clear_flg = false;\n            }\n            else {\n                ++n_bits;\n                if (n_bits == BITS)\n                    maxcode = 1 << BITS;\n                else\n                    maxcode = MAXCODE(n_bits);\n            }\n        }\n        if (code == EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (cur_bits > 0) {\n                char_out((cur_accum & 0xff), outs);\n                cur_accum >>= 8;\n                cur_bits -= 8;\n            }\n            flush_char(outs);\n        }\n    }\n    this.encode = encode;\n}\nmodule.exports = LZWEncoder;\n"]},"metadata":{},"sourceType":"script"}