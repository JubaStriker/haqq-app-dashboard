{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n/**\n * @typedef {import(\"./Hbar.js\").default} Hbar\n */\n\n/**\n * Utility Error Messages\n */\n\nexport const REQUIRE_NON_NULL_ERROR = \"This value cannot be null | undefined.\";\nexport const REQUIRE_STRING_ERROR = \"This value must be a string.\";\nexport const REQUIRE_UINT8ARRAY_ERROR = \"This value must be a Uint8Array.\";\nexport const REQUIRE_STRING_OR_UINT8ARRAY_ERROR = \"This value must be a string or Uint8Array.\";\nexport const REQUIRE_NUMBER_ERROR = \"This value must be a Number.\";\nexport const REQUIRE_BIGNUMBER_ERROR = \"This value must be a BigNumber.\";\nexport const REQUIRE_ARRAY_ERROR = \"The provided variable must be an Array.\";\nexport const REQUIRE_LONG_ERROR = \"This value must be a Long.\";\nexport const REQUIRE_TYPE_ERROR = \"The provided variables are not matching types.\";\nexport const FUNCTION_CONVERT_TO_BIGNUMBER_ERROR = \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_ERROR = \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR = \"Unable to parse given variable. Returns NaN.\"; //Soft Checks\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isNonNull(variable) {\n  return variable != null;\n}\n/**\n * Takes any param and returns true if param variable and type are the same.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {boolean}\n */\n\nexport function isType(variable, type) {\n  return typeof variable == typeof type;\n}\n/**\n * Takes any param and returns true if param is not null and of type Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isUint8Array(variable) {\n  return isNonNull(variable) && variable instanceof Uint8Array;\n}\n/**\n * Takes any param and returns true if param is not null and of type Number.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isNumber(variable) {\n  return isNonNull(variable) && (typeof variable == \"number\" || variable instanceof Number);\n}\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isBigNumber(variable) {\n  return isNonNull(variable) && variable instanceof BigNumber;\n}\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isLong(variable) {\n  return isNonNull(variable) && variable instanceof Long;\n}\n/**\n * Takes any param and returns true if param is not null and of type string.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isString(variable) {\n  return isNonNull(variable) && typeof variable == \"string\";\n}\n/**\n * Takes any param and returns true if param is not null and type string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isStringOrUint8Array(variable) {\n  return isNonNull(variable) && (isString(variable) || isUint8Array(variable));\n}\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @template {Long | Hbar} T\n * @param {T} variable\n * @returns {T}\n */\n\nexport function requireNotNegative(variable) {\n  if (variable.isNegative()) {\n    throw new Error(\"negative value not allowed\");\n  }\n\n  return variable;\n}\n/**\n * Takes any param and throws custom error if null or undefined.\n *\n * @param {any} variable\n * @returns {object}\n */\n\nexport function requireNonNull(variable) {\n  if (!isNonNull(variable)) {\n    throw new Error(REQUIRE_NON_NULL_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return variable;\n  }\n}\n/**\n * Takes any param and throws custom error if params are not same type.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {object}\n */\n\nexport function requireType(variable, type) {\n  if (!isType(variable, type)) {\n    throw new Error(REQUIRE_TYPE_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return variable;\n  }\n}\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\n\nexport function requireBigNumber(variable) {\n  if (!isBigNumber(requireNonNull(variable))) {\n    throw new Error(REQUIRE_BIGNUMBER_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {BigNumber} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {Long}\n */\n\nexport function requireLong(variable) {\n  if (!isLong(requireNonNull(variable))) {\n    throw new Error(REQUIRE_LONG_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {Long} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non string.\n *\n * @param {any | null | undefined} variable\n * @returns {string}\n */\n\nexport function requireString(variable) {\n  if (!isString(requireNonNull(variable))) {\n    throw new Error(REQUIRE_STRING_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {string} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {Uint8Array}\n */\n\nexport function requireUint8Array(variable) {\n  if (!isUint8Array(requireNonNull(variable))) {\n    throw new Error(REQUIRE_UINT8ARRAY_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {Uint8Array} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {number}\n */\n\nexport function requireNumber(variable) {\n  if (!isNumber(requireNonNull(variable))) {\n    throw new Error(REQUIRE_NUMBER_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {number} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {string | Uint8Array}\n */\n\nexport function requireStringOrUint8Array(variable) {\n  if (isStringOrUint8Array(requireNonNull(variable))) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {string | Uint8Array} */\n      variable\n    );\n  } else {\n    throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);\n  }\n} //Conversions\n\n/**\n * Converts number or string to BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\n\nexport function convertToBigNumber(variable) {\n  requireNonNull(variable);\n\n  if (isBigNumber(variable) || isString(variable) || isNumber(variable) || isLong(variable)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return new BigNumber(variable);\n  }\n\n  throw new Error(FUNCTION_CONVERT_TO_BIGNUMBER_ERROR);\n}\n/**\n * Converts Array of Numbers or Strings to Array of BigNumbers.\n *\n * @param {any | null | undefined} variable\n * @returns {Array<BigNumber>}\n */\n\nexport function convertToBigNumberArray(variable) {\n  if (variable instanceof Array) {\n    return (\n      /** @type {Array<BigNumber>} */\n      variable.map(convertToBigNumber)\n    );\n  } else {\n    throw new Error(REQUIRE_ARRAY_ERROR);\n  }\n}\n/**\n * @param {*} variable\n * @returns {number}\n */\n\nexport function convertToNumber(variable) {\n  requireNonNull(variable);\n\n  if (isBigNumber(variable) || isString(variable) || isNumber(variable) || isLong(variable)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const num = parseInt(variable);\n\n    if (isNaN(num)) {\n      throw new Error(FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR);\n    } else {\n      return num;\n    }\n  } else {\n    throw new Error(FUNCTION_CONVERT_TO_NUMBER_ERROR);\n  }\n}\n/**\n * Creates a DataView on top of an Uint8Array that could be or not be pooled, ensuring that we don't get out of bounds.\n *\n * @param {Uint8Array} arr\n * @param {number | undefined} offset\n * @param {number | undefined} length\n * @returns {DataView}\n */\n\nexport function safeView(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.byteLength;\n  if (!(Number.isInteger(offset) && offset >= 0)) throw new Error(\"Invalid offset!\");\n  if (!(Number.isInteger(length) && length >= 0)) throw new Error(\"Invalid length!\");\n  return new DataView(arr.buffer, arr.byteOffset + offset, Math.min(length, arr.byteLength - offset));\n}\n/**\n * @param {any} a\n * @param {any} b\n * @param {Set<string>=} ignore\n * @returns {boolean}\n */\n\nexport function compare(a, b) {\n  let ignore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const aKeys = Object.keys(a); // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n    const bKeys = Object.keys(b);\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n\n    for (let i = 0; i < aKeys.length; i++) {\n      if (aKeys[i] !== bKeys[i]) {\n        return false;\n      }\n\n      if (ignore.has(aKeys[i])) {\n        continue;\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n      if (!compare(a[aKeys[i]], b[bKeys[i]], ignore)) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === \"number\" && typeof b === \"number\") {\n    return a === b;\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return a === b;\n  } else if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n    return a === b;\n  } else {\n    return false;\n  }\n}\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\n\nexport function shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/util.js"],"names":["BigNumber","Long","REQUIRE_NON_NULL_ERROR","REQUIRE_STRING_ERROR","REQUIRE_UINT8ARRAY_ERROR","REQUIRE_STRING_OR_UINT8ARRAY_ERROR","REQUIRE_NUMBER_ERROR","REQUIRE_BIGNUMBER_ERROR","REQUIRE_ARRAY_ERROR","REQUIRE_LONG_ERROR","REQUIRE_TYPE_ERROR","FUNCTION_CONVERT_TO_BIGNUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR","isNonNull","variable","isType","type","isUint8Array","Uint8Array","isNumber","Number","isBigNumber","isLong","isString","isStringOrUint8Array","requireNotNegative","isNegative","Error","requireNonNull","requireType","requireBigNumber","requireLong","requireString","requireUint8Array","requireNumber","requireStringOrUint8Array","convertToBigNumber","convertToBigNumberArray","Array","map","convertToNumber","num","parseInt","isNaN","safeView","arr","offset","length","byteLength","isInteger","DataView","buffer","byteOffset","Math","min","compare","a","b","ignore","Set","aKeys","Object","keys","bKeys","i","has","shuffle","array","currentIndex","temporaryValue","randomIndex","floor","random"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"./Hbar.js\").default} Hbar\n */\n\n/**\n * Utility Error Messages\n */\nexport const REQUIRE_NON_NULL_ERROR = \"This value cannot be null | undefined.\";\nexport const REQUIRE_STRING_ERROR = \"This value must be a string.\";\nexport const REQUIRE_UINT8ARRAY_ERROR = \"This value must be a Uint8Array.\";\nexport const REQUIRE_STRING_OR_UINT8ARRAY_ERROR =\n    \"This value must be a string or Uint8Array.\";\nexport const REQUIRE_NUMBER_ERROR = \"This value must be a Number.\";\nexport const REQUIRE_BIGNUMBER_ERROR = \"This value must be a BigNumber.\";\nexport const REQUIRE_ARRAY_ERROR = \"The provided variable must be an Array.\";\nexport const REQUIRE_LONG_ERROR = \"This value must be a Long.\";\n\nexport const REQUIRE_TYPE_ERROR =\n    \"The provided variables are not matching types.\";\n\nexport const FUNCTION_CONVERT_TO_BIGNUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR =\n    \"Unable to parse given variable. Returns NaN.\";\n\n//Soft Checks\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNonNull(variable) {\n    return variable != null;\n}\n\n/**\n * Takes any param and returns true if param variable and type are the same.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {boolean}\n */\nexport function isType(variable, type) {\n    return typeof variable == typeof type;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isUint8Array(variable) {\n    return isNonNull(variable) && variable instanceof Uint8Array;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Number.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNumber(variable) {\n    return (\n        isNonNull(variable) &&\n        (typeof variable == \"number\" || variable instanceof Number)\n    );\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isBigNumber(variable) {\n    return isNonNull(variable) && variable instanceof BigNumber;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isLong(variable) {\n    return isNonNull(variable) && variable instanceof Long;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type string.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isString(variable) {\n    return isNonNull(variable) && typeof variable == \"string\";\n}\n\n/**\n * Takes any param and returns true if param is not null and type string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isStringOrUint8Array(variable) {\n    return (\n        isNonNull(variable) && (isString(variable) || isUint8Array(variable))\n    );\n}\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @template {Long | Hbar} T\n * @param {T} variable\n * @returns {T}\n */\nexport function requireNotNegative(variable) {\n    if (variable.isNegative()) {\n        throw new Error(\"negative value not allowed\");\n    }\n\n    return variable;\n}\n\n/**\n * Takes any param and throws custom error if null or undefined.\n *\n * @param {any} variable\n * @returns {object}\n */\nexport function requireNonNull(variable) {\n    if (!isNonNull(variable)) {\n        throw new Error(REQUIRE_NON_NULL_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if params are not same type.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {object}\n */\nexport function requireType(variable, type) {\n    if (!isType(variable, type)) {\n        throw new Error(REQUIRE_TYPE_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function requireBigNumber(variable) {\n    if (!isBigNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_BIGNUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {BigNumber} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {Long}\n */\nexport function requireLong(variable) {\n    if (!isLong(requireNonNull(variable))) {\n        throw new Error(REQUIRE_LONG_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Long} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non string.\n *\n * @param {any | null | undefined} variable\n * @returns {string}\n */\nexport function requireString(variable) {\n    if (!isString(requireNonNull(variable))) {\n        throw new Error(REQUIRE_STRING_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {Uint8Array}\n */\nexport function requireUint8Array(variable) {\n    if (!isUint8Array(requireNonNull(variable))) {\n        throw new Error(REQUIRE_UINT8ARRAY_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Uint8Array} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {number}\n */\nexport function requireNumber(variable) {\n    if (!isNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_NUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {number} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {string | Uint8Array}\n */\nexport function requireStringOrUint8Array(variable) {\n    if (isStringOrUint8Array(requireNonNull(variable))) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string | Uint8Array} */ (variable);\n    } else {\n        throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);\n    }\n}\n\n//Conversions\n\n/**\n * Converts number or string to BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function convertToBigNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return new BigNumber(variable);\n    }\n    throw new Error(FUNCTION_CONVERT_TO_BIGNUMBER_ERROR);\n}\n\n/**\n * Converts Array of Numbers or Strings to Array of BigNumbers.\n *\n * @param {any | null | undefined} variable\n * @returns {Array<BigNumber>}\n */\nexport function convertToBigNumberArray(variable) {\n    if (variable instanceof Array) {\n        return /** @type {Array<BigNumber>} */ (\n            variable.map(convertToBigNumber)\n        );\n    } else {\n        throw new Error(REQUIRE_ARRAY_ERROR);\n    }\n}\n\n/**\n * @param {*} variable\n * @returns {number}\n */\nexport function convertToNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const num = parseInt(variable);\n        if (isNaN(num)) {\n            throw new Error(FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR);\n        } else {\n            return num;\n        }\n    } else {\n        throw new Error(FUNCTION_CONVERT_TO_NUMBER_ERROR);\n    }\n}\n\n/**\n * Creates a DataView on top of an Uint8Array that could be or not be pooled, ensuring that we don't get out of bounds.\n *\n * @param {Uint8Array} arr\n * @param {number | undefined} offset\n * @param {number | undefined} length\n * @returns {DataView}\n */\nexport function safeView(arr, offset = 0, length = arr.byteLength) {\n    if (!(Number.isInteger(offset) && offset >= 0))\n        throw new Error(\"Invalid offset!\");\n    if (!(Number.isInteger(length) && length >= 0))\n        throw new Error(\"Invalid length!\");\n    return new DataView(\n        arr.buffer,\n        arr.byteOffset + offset,\n        Math.min(length, arr.byteLength - offset)\n    );\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @param {Set<string>=} ignore\n * @returns {boolean}\n */\nexport function compare(a, b, ignore = new Set()) {\n    if (typeof a === \"object\" && typeof b === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const aKeys = Object.keys(a);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const bKeys = Object.keys(b);\n\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n\n        for (let i = 0; i < aKeys.length; i++) {\n            if (aKeys[i] !== bKeys[i]) {\n                return false;\n            }\n\n            if (ignore.has(aKeys[i])) {\n                continue;\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (!compare(a[aKeys[i]], b[bKeys[i]], ignore)) {\n                return false;\n            }\n        }\n\n        return true;\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a === b;\n    } else if (typeof a === \"string\" && typeof b === \"string\") {\n        return a === b;\n    } else if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n        return a === b;\n    } else {\n        return false;\n    }\n}\n\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\nexport function shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}