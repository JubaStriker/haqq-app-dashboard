{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.TokenFreezeStatus} HashgraphProto.proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenKycStatus} HashgraphProto.proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenPauseStatus} HashgraphProto.proto.TokenPauseStatus\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HashgraphProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.INftID} HashgraphProto.proto.INftID\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HashgraphProto.proto.IKey\n * @typedef {import(\"@hashgraph/proto\").proto.IDuration} HashgraphProto.proto.IDuration\n */\n\nexport default class TokenNftInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {NftId} props.nftId\n   * @param {AccountId} props.accountId\n   * @param {Timestamp} props.creationTime\n   * @param {Uint8Array | null} props.metadata\n   * @param {LedgerId|null} props.ledgerId\n   * @param {AccountId|null} props.allowanceSpenderAccountId\n   */\n  constructor(props) {\n    /**\n     * ID of the nft instance\n     *\n     * @readonly\n     */\n    this.nftId = props.nftId;\n    /**\n     * @readonly\n     */\n\n    this.accountId = props.accountId;\n    /**\n     * @readonly\n     */\n\n    this.creationTime = props.creationTime;\n    /**\n     * @readonly\n     */\n\n    this.metadata = props.metadata;\n    this.ledgerId = props.ledgerId;\n    this.allowanceSpenderAccountId = props.allowanceSpenderAccountId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITokenNftInfo} info\n   * @returns {TokenNftInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    return new TokenNftInfo({\n      nftId: NftId._fromProtobuf(\n      /** @type {HashgraphProto.proto.INftID} */\n      info.nftID),\n      accountId: AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      info.accountID),\n      creationTime: Timestamp._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITimestamp} */\n      info.creationTime),\n      metadata: info.metadata !== undefined ? info.metadata : null,\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null,\n      allowanceSpenderAccountId: info.spenderId != null ? AccountId._fromProtobuf(info.spenderId) : null\n    });\n  }\n  /**\n   * @returns {HashgraphProto.proto.ITokenNftInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      nftID: this.nftId._toProtobuf(),\n      accountID: this.accountId._toProtobuf(),\n      creationTime: this.creationTime._toProtobuf(),\n      metadata: this.metadata,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n      spenderId: this.allowanceSpenderAccountId != null ? this.allowanceSpenderAccountId._toProtobuf() : null\n    };\n  }\n  /**\n   * @typedef {object} TokenNftInfoJson\n   * @property {string} nftId\n   * @property {string} accountId\n   * @property {string} creationTime\n   * @property {string | null} metadata\n   * @property {string | null} ledgerId\n   * @property {string | null} allowanceSpenderAccountId\n   * @returns {TokenNftInfoJson}\n   */\n\n\n  toJson() {\n    return {\n      nftId: this.nftId.toString(),\n      accountId: this.accountId.toString(),\n      creationTime: this.creationTime.toString(),\n      metadata: this.metadata != null ? hex.encode(this.metadata) : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n      allowanceSpenderAccountId: this.allowanceSpenderAccountId != null ? this.allowanceSpenderAccountId.toString() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJson());\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/token/TokenNftInfo.js"],"names":["NftId","AccountId","Timestamp","hex","LedgerId","TokenNftInfo","constructor","props","nftId","accountId","creationTime","metadata","ledgerId","allowanceSpenderAccountId","Object","freeze","_fromProtobuf","info","nftID","accountID","undefined","fromBytes","spenderId","_toProtobuf","toBytes","toJson","toString","encode","JSON","stringify"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.TokenFreezeStatus} HashgraphProto.proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenKycStatus} HashgraphProto.proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenPauseStatus} HashgraphProto.proto.TokenPauseStatus\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HashgraphProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.INftID} HashgraphProto.proto.INftID\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HashgraphProto.proto.IKey\n * @typedef {import(\"@hashgraph/proto\").proto.IDuration} HashgraphProto.proto.IDuration\n */\n\nexport default class TokenNftInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {NftId} props.nftId\n     * @param {AccountId} props.accountId\n     * @param {Timestamp} props.creationTime\n     * @param {Uint8Array | null} props.metadata\n     * @param {LedgerId|null} props.ledgerId\n     * @param {AccountId|null} props.allowanceSpenderAccountId\n     */\n    constructor(props) {\n        /**\n         * ID of the nft instance\n         *\n         * @readonly\n         */\n        this.nftId = props.nftId;\n\n        /**\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * @readonly\n         */\n        this.creationTime = props.creationTime;\n\n        /**\n         * @readonly\n         */\n        this.metadata = props.metadata;\n\n        this.ledgerId = props.ledgerId;\n\n        this.allowanceSpenderAccountId = props.allowanceSpenderAccountId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITokenNftInfo} info\n     * @returns {TokenNftInfo}\n     */\n    static _fromProtobuf(info) {\n        return new TokenNftInfo({\n            nftId: NftId._fromProtobuf(\n                /** @type {HashgraphProto.proto.INftID} */ (info.nftID)\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IAccountID} */ (info.accountID)\n            ),\n            creationTime: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */ (\n                    info.creationTime\n                )\n            ),\n            metadata: info.metadata !== undefined ? info.metadata : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            allowanceSpenderAccountId:\n                info.spenderId != null\n                    ? AccountId._fromProtobuf(info.spenderId)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.ITokenNftInfo}\n     */\n    _toProtobuf() {\n        return {\n            nftID: this.nftId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            creationTime: this.creationTime._toProtobuf(),\n            metadata: this.metadata,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            spenderId:\n                this.allowanceSpenderAccountId != null\n                    ? this.allowanceSpenderAccountId._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @typedef {object} TokenNftInfoJson\n     * @property {string} nftId\n     * @property {string} accountId\n     * @property {string} creationTime\n     * @property {string | null} metadata\n     * @property {string | null} ledgerId\n     * @property {string | null} allowanceSpenderAccountId\n     * @returns {TokenNftInfoJson}\n     */\n    toJson() {\n        return {\n            nftId: this.nftId.toString(),\n            accountId: this.accountId.toString(),\n            creationTime: this.creationTime.toString(),\n            metadata: this.metadata != null ? hex.encode(this.metadata) : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n            allowanceSpenderAccountId:\n                this.allowanceSpenderAccountId != null\n                    ? this.allowanceSpenderAccountId.toString()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJson());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}