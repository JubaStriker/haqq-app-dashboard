{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TopicId from \"./TopicId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport Timestamp from \"../Timestamp.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusUpdateTopicTransactionBody} HashgraphProto.proto.IConsensusUpdateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a topic.\n *\n * If there is no adminKey, the only authorized update (available to anyone) is to extend the expirationTime.\n * Otherwise transaction must be signed by the adminKey.\n *\n * If an adminKey is updated, the transaction must be signed by the pre-update adminKey and post-update adminKey.\n *\n * If a new autoRenewAccount is specified (not just being removed), that account must also sign the transaction.\n */\n\nexport default class TopicUpdateTransaction extends Transaction {\n  /**\n   * @param {object} props\n   * @param {TopicId | string} [props.topicId]\n   * @param {Key} [props.adminKey]\n   * @param {Key} [props.submitKey]\n   * @param {Duration | Long | number} [props.autoRenewPeriod]\n   * @param {AccountId | string} [props.autoRenewAccountId]\n   * @param {string} [props.topicMemo]\n   * @param {Timestamp | Date} [props.expirationTime]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TopicId}\n     */\n\n    this._topicId = null;\n\n    if (props.topicId != null) {\n      this.setTopicId(props.topicId);\n    }\n    /**\n     * @private\n     * @type {?string}\n     */\n\n\n    this._topicMemo = null;\n\n    if (props.topicMemo != null) {\n      this.setTopicMemo(props.topicMemo);\n    }\n    /**\n     * @private\n     * @type {?Key}\n     */\n\n\n    this._submitKey = null;\n\n    if (props.submitKey != null) {\n      this.setSubmitKey(props.submitKey);\n    }\n    /**\n     * @private\n     * @type {?Key}\n     */\n\n\n    this._adminKey = null;\n\n    if (props.adminKey != null) {\n      this.setAdminKey(props.adminKey);\n    }\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n\n    this._autoRenewAccountId = null;\n\n    if (props.autoRenewAccountId != null) {\n      this.setAutoRenewAccountId(props.autoRenewAccountId);\n    }\n    /**\n     * @private\n     * @type {?Duration}\n     */\n\n\n    this._autoRenewPeriod = null;\n\n    if (props.autoRenewPeriod != null) {\n      this.setAutoRenewPeriod(props.autoRenewPeriod);\n    }\n    /**\n     * @private\n     * @type {?Timestamp}\n     */\n\n\n    this._expirationTime = null;\n\n    if (props.expirationTime != null) {\n      this.setExpirationTime(props.expirationTime);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const update =\n    /** @type {HashgraphProto.proto.IConsensusUpdateTopicTransactionBody} */\n    body.consensusUpdateTopic;\n    return Transaction._fromProtobufTransactions(new TopicUpdateTransaction({\n      topicId: update.topicID != null ? TopicId._fromProtobuf(update.topicID) : undefined,\n      adminKey: update.adminKey != null ? Key._fromProtobufKey(update.adminKey) : undefined,\n      submitKey: update.submitKey != null ? Key._fromProtobufKey(update.submitKey) : undefined,\n      autoRenewAccountId: update.autoRenewAccount != null ? AccountId._fromProtobuf(update.autoRenewAccount) : undefined,\n      autoRenewPeriod: update.autoRenewPeriod != null ? update.autoRenewPeriod.seconds != null ? update.autoRenewPeriod.seconds : undefined : undefined,\n      topicMemo: update.memo != null ? update.memo.value != null ? update.memo.value : undefined : undefined,\n      expirationTime: update.expirationTime != null ? Timestamp._fromProtobuf(update.expirationTime) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?Timestamp}\n   */\n\n\n  get expirationTime() {\n    return this._expirationTime;\n  }\n  /**\n   * @param {Timestamp | Date | null} expirationTime\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setExpirationTime(expirationTime) {\n    this._requireFrozen();\n\n    this._expirationTime = expirationTime instanceof Date ? Timestamp.fromDate(expirationTime) : expirationTime;\n    return this;\n  }\n  /**\n   * @returns {?TopicId}\n   */\n\n\n  get topicId() {\n    return this._topicId;\n  }\n  /**\n   * @param {TopicId | string} topicId\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setTopicId(topicId) {\n    this._requireNotFrozen();\n\n    this._topicId = typeof topicId === \"string\" ? TopicId.fromString(topicId) : topicId.clone();\n    return this;\n  }\n  /**\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  clearTopicId() {\n    this._requireNotFrozen();\n\n    this._topicId = null;\n    return this;\n  }\n  /**\n   * @returns {?string}\n   */\n\n\n  get topicMemo() {\n    return this._topicMemo;\n  }\n  /**\n   * @param {string} topicMemo\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setTopicMemo(topicMemo) {\n    this._requireNotFrozen();\n\n    this._topicMemo = topicMemo;\n    return this;\n  }\n  /**\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  clearTopicMemo() {\n    this._requireNotFrozen();\n\n    this._topicMemo = null;\n    return this;\n  }\n  /**\n   * @returns {?Key}\n   */\n\n\n  get adminKey() {\n    return this._adminKey;\n  }\n  /**\n   * @param {Key} adminKey\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setAdminKey(adminKey) {\n    this._requireNotFrozen();\n\n    this._adminKey = adminKey;\n    return this;\n  }\n  /**\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  clearAdminKey() {\n    this._requireNotFrozen();\n\n    this._adminKey = null;\n    return this;\n  }\n  /**\n   * @returns {?Key}\n   */\n\n\n  get submitKey() {\n    return this._submitKey;\n  }\n  /**\n   * @param {Key} submitKey\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setSubmitKey(submitKey) {\n    this._requireNotFrozen();\n\n    this._submitKey = submitKey;\n    return this;\n  }\n  /**\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  clearSubmitKey() {\n    this._requireNotFrozen();\n\n    this._submitKey = null;\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get autoRenewAccountId() {\n    return this._autoRenewAccountId;\n  }\n  /**\n   * @param {AccountId | string} autoRenewAccountId\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setAutoRenewAccountId(autoRenewAccountId) {\n    this._requireNotFrozen();\n\n    this._autoRenewAccountId = autoRenewAccountId instanceof AccountId ? autoRenewAccountId : AccountId.fromString(autoRenewAccountId);\n    return this;\n  }\n  /**\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  clearAutoRenewAccountId() {\n    this._requireNotFrozen();\n\n    this._autoRenewAccountId = null;\n    return this;\n  }\n  /**\n   * @returns {?Duration}\n   */\n\n\n  get autoRenewPeriod() {\n    return this._autoRenewPeriod;\n  }\n  /**\n   * Set the auto renew period for this account.\n   *\n   * @param {Duration | Long | number} autoRenewPeriod\n   * @returns {TopicUpdateTransaction}\n   */\n\n\n  setAutoRenewPeriod(autoRenewPeriod) {\n    this._requireNotFrozen();\n\n    this._autoRenewPeriod = autoRenewPeriod instanceof Duration ? autoRenewPeriod : new Duration(autoRenewPeriod);\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._topicId != null) {\n      this._topicId.validateChecksum(client);\n    }\n\n    if (this._autoRenewAccountId != null) {\n      this._autoRenewAccountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.consensus.updateTopic(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"consensusUpdateTopic\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.IConsensusUpdateTopicTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n      adminKey: this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n      submitKey: this._submitKey != null ? this._submitKey._toProtobufKey() : null,\n      memo: this._topicMemo != null ? {\n        value: this._topicMemo\n      } : null,\n      autoRenewAccount: this._autoRenewAccountId != null ? this._autoRenewAccountId._toProtobuf() : null,\n      autoRenewPeriod: this._autoRenewPeriod != null ? this._autoRenewPeriod._toProtobuf() : null,\n      expirationTime: this._expirationTime != null ? this._expirationTime._toProtobuf() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `TopicUpdateTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"consensusUpdateTopic\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTopicUpdateTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/topic/TopicUpdateTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","AccountId","TopicId","Duration","Key","Timestamp","TopicUpdateTransaction","constructor","props","_topicId","topicId","setTopicId","_topicMemo","topicMemo","setTopicMemo","_submitKey","submitKey","setSubmitKey","_adminKey","adminKey","setAdminKey","_autoRenewAccountId","autoRenewAccountId","setAutoRenewAccountId","_autoRenewPeriod","autoRenewPeriod","setAutoRenewPeriod","_expirationTime","expirationTime","setExpirationTime","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","update","consensusUpdateTopic","_fromProtobufTransactions","topicID","undefined","_fromProtobufKey","autoRenewAccount","seconds","memo","value","_requireFrozen","Date","fromDate","_requireNotFrozen","fromString","clone","clearTopicId","clearTopicMemo","clearAdminKey","clearSubmitKey","clearAutoRenewAccountId","_validateChecksums","client","validateChecksum","_execute","channel","request","consensus","updateTopic","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_toProtobufKey","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TopicId from \"./TopicId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusUpdateTopicTransactionBody} HashgraphProto.proto.IConsensusUpdateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a topic.\n *\n * If there is no adminKey, the only authorized update (available to anyone) is to extend the expirationTime.\n * Otherwise transaction must be signed by the adminKey.\n *\n * If an adminKey is updated, the transaction must be signed by the pre-update adminKey and post-update adminKey.\n *\n * If a new autoRenewAccount is specified (not just being removed), that account must also sign the transaction.\n */\nexport default class TopicUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.submitKey]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     * @param {string} [props.topicMemo]\n     * @param {Timestamp | Date} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._topicMemo = null;\n\n        if (props.topicMemo != null) {\n            this.setTopicMemo(props.topicMemo);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._submitKey = null;\n\n        if (props.submitKey != null) {\n            this.setSubmitKey(props.submitKey);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {TopicUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update =\n            /** @type {HashgraphProto.proto.IConsensusUpdateTopicTransactionBody} */ (\n                body.consensusUpdateTopic\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TopicUpdateTransaction({\n                topicId:\n                    update.topicID != null\n                        ? TopicId._fromProtobuf(update.topicID)\n                        : undefined,\n                adminKey:\n                    update.adminKey != null\n                        ? Key._fromProtobufKey(update.adminKey)\n                        : undefined,\n                submitKey:\n                    update.submitKey != null\n                        ? Key._fromProtobufKey(update.submitKey)\n                        : undefined,\n                autoRenewAccountId:\n                    update.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(update.autoRenewAccount)\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                topicMemo:\n                    update.memo != null\n                        ? update.memo.value != null\n                            ? update.memo.value\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | null} expirationTime\n     * @returns {TopicUpdateTransaction}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireFrozen();\n\n        this._expirationTime =\n            expirationTime instanceof Date\n                ? Timestamp.fromDate(expirationTime)\n                : expirationTime;\n\n        return this;\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId | string} topicId\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicId(topicId) {\n        this._requireNotFrozen();\n        this._topicId =\n            typeof topicId === \"string\"\n                ? TopicId.fromString(topicId)\n                : topicId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicId() {\n        this._requireNotFrozen();\n        this._topicId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get topicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @param {string} topicMemo\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicMemo(topicMemo) {\n        this._requireNotFrozen();\n        this._topicMemo = topicMemo;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicMemo() {\n        this._requireNotFrozen();\n        this._topicMemo = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAdminKey() {\n        this._requireNotFrozen();\n        this._adminKey = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get submitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @param {Key} submitKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setSubmitKey(submitKey) {\n        this._requireNotFrozen();\n        this._submitKey = submitKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearSubmitKey() {\n        this._requireNotFrozen();\n        this._submitKey = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} autoRenewAccountId\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            autoRenewAccountId instanceof AccountId\n                ? autoRenewAccountId\n                : AccountId.fromString(autoRenewAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAutoRenewAccountId() {\n        this._requireNotFrozen();\n        this._autoRenewAccountId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._topicId != null) {\n            this._topicId.validateChecksum(client);\n        }\n\n        if (this._autoRenewAccountId != null) {\n            this._autoRenewAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.updateTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusUpdateTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.IConsensusUpdateTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            submitKey:\n                this._submitKey != null\n                    ? this._submitKey._toProtobufKey()\n                    : null,\n            memo:\n                this._topicMemo != null\n                    ? {\n                          value: this._topicMemo,\n                      }\n                    : null,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TopicUpdateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusUpdateTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicUpdateTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}