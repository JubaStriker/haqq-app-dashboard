{"ast":null,"code":"var _jsxFileName = \"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/upload/index.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from \"react\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, SimpleGrid, Button, Center, useColorModeValue, Text, Image, VStack, useToast } from \"@chakra-ui/react\";\nimport { useDropzone } from \"react-dropzone\";\nimport useFilesStore from \"../../store/files\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Upload() {\n  _s();\n\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    isOpen = false,\n    onClose,\n    on\n  } = props;\n  const files = useFilesStore(state => state.files);\n  const postFiles = useFilesStore(state => state.postFiles);\n  const toast = useToast();\n  const [uploads, setUploads] = useState([]);\n  const onDrop = useCallback(async acceptedUploads => {\n    setUploads(acceptedUploads.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  });\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n    maxFiles: 3,\n    multiple: true\n  });\n  useEffect(() => {\n    setUploads([]);\n  }, []);\n  useEffect(() => () => {\n    uploads.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [uploads]);\n\n  const saveUploads = async () => {\n    try {\n      const data = await postFiles(uploads);\n      setUploads([]);\n      onClose(data || []);\n    } catch (e) {\n      toast({\n        title: \"Incognito mode is not allowed. \" + (e.message || INTERNAL_SERVER_ERROR),\n        status: \"error\"\n      });\n    }\n  };\n\n  const dropText = isDragActive ? \"Drop upto 3 png, jpeg or gifs here ...\" : \"Drag 'n' drop upto 3 png, jpeg or gifs files here, or click to select uploads\";\n  const activeBg = useColorModeValue(\"gray.100\", \"gray.600\");\n  const borderColor = useColorModeValue(isDragActive ? \"teal.300\" : \"gray.300\", isDragActive ? \"teal.500\" : \"gray.500\");\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    closeOnOverlayClick: false,\n    onEsc: () => setUploads([]),\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add images for this look.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(Center, {\n          p: 10,\n          cursor: \"pointer\",\n          bg: isDragActive ? activeBg : \"transparent\",\n          _hover: {\n            bg: activeBg\n          },\n          transition: \"background-color 0.2s ease\",\n          borderRadius: 4,\n          border: \"3px dashed\",\n          borderColor: borderColor,\n          ...getRootProps(),\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                textAlign: \"center\",\n                children: dropText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n            spacing: 5,\n            columns: 3,\n            marginTop: \"5\",\n            children: uploads.map(file => /*#__PURE__*/_jsxDEV(Image, {\n              src: file.preview,\n              width: 100,\n              height: 100,\n              objectFit: \"cover\",\n              borderRadius: \"5\",\n              borderColor: \"gray\",\n              borderWidth: \"2\"\n            }, file.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"ghost\",\n          onClick: () => {\n            setUploads([]);\n            onClose([]);\n          },\n          colorScheme: \"red\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"teal\",\n          mr: 3,\n          onClick: saveUploads,\n          loadingText: \"Uploading...\",\n          isLoading: files.post.loading,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Upload, \"UNXtGBxCaBaBMNv3NKN7atzG3z8=\", false, function () {\n  return [useFilesStore, useFilesStore, useToast, useDropzone, useColorModeValue, useColorModeValue];\n});\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/upload/index.js"],"names":["useCallback","useState","useEffect","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","SimpleGrid","Button","Center","useColorModeValue","Text","Image","VStack","useToast","useDropzone","useFilesStore","INTERNAL_SERVER_ERROR","Upload","props","isOpen","onClose","on","files","state","postFiles","toast","uploads","setUploads","onDrop","acceptedUploads","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","accept","maxFiles","multiple","forEach","revokeObjectURL","saveUploads","data","e","title","message","status","dropText","activeBg","borderColor","bg","name","post","loading"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,gBAPF,EAQEC,UARF,EASEC,MATF,EAUEC,MAVF,EAWEC,iBAXF,EAYEC,IAZF,EAaEC,KAbF,EAcEC,MAdF,EAeEC,QAfF,QAgBO,kBAhBP;AAiBA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;;AAEA,SAASC,MAAT,GAA4B;AAAA;;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AAC1B,QAAM;AAAEC,IAAAA,MAAM,GAAG,KAAX;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,MAAkCH,KAAxC;AACA,QAAMI,KAAK,GAAGP,aAAa,CAAEQ,KAAD,IAAWA,KAAK,CAACD,KAAlB,CAA3B;AACA,QAAME,SAAS,GAAGT,aAAa,CAAEQ,KAAD,IAAWA,KAAK,CAACC,SAAlB,CAA/B;AACA,QAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM+B,MAAM,GAAGhC,WAAW,CAAC,MAAOiC,eAAP,IAA2B;AACpDF,IAAAA,UAAU,CACRE,eAAe,CAACC,GAAhB,CAAqBC,IAAD,IAClBC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AAClBG,MAAAA,OAAO,EAAEC,GAAG,CAACC,eAAJ,CAAoBL,IAApB;AADS,KAApB,CADF,CADQ,CAAV;AAOD,GARyB,CAA1B;AASA,QAAM;AAAEM,IAAAA,YAAF;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,MAAgDzB,WAAW,CAAC;AAChEc,IAAAA,MADgE;AAEhEY,IAAAA,MAAM,EAAE,SAFwD;AAGhEC,IAAAA,QAAQ,EAAE,CAHsD;AAIhEC,IAAAA,QAAQ,EAAE;AAJsD,GAAD,CAAjE;AAMA5C,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA7B,EAAAA,SAAS,CACP,MAAM,MAAM;AACV4B,IAAAA,OAAO,CAACiB,OAAR,CAAiBZ,IAAD,IAAUI,GAAG,CAACS,eAAJ,CAAoBb,IAAI,CAACG,OAAzB,CAA1B;AACD,GAHM,EAIP,CAACR,OAAD,CAJO,CAAT;;AAOA,QAAMmB,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMtB,SAAS,CAACE,OAAD,CAA5B;AACAC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAP,MAAAA,OAAO,CAAC0B,IAAI,IAAI,EAAT,CAAP;AACD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACVtB,MAAAA,KAAK,CAAC;AACJuB,QAAAA,KAAK,EACH,qCACCD,CAAC,CAACE,OAAF,IAAajC,qBADd,CAFE;AAIJkC,QAAAA,MAAM,EAAE;AAJJ,OAAD,CAAL;AAMD;AACF,GAbD;;AAeA,QAAMC,QAAQ,GAAGZ,YAAY,GACzB,wCADyB,GAEzB,+EAFJ;AAGA,QAAMa,QAAQ,GAAG3C,iBAAiB,CAAC,UAAD,EAAa,UAAb,CAAlC;AACA,QAAM4C,WAAW,GAAG5C,iBAAiB,CACnC8B,YAAY,GAAG,UAAH,GAAgB,UADO,EAEnCA,YAAY,GAAG,UAAH,GAAgB,UAFO,CAArC;AAKA,sBACE,QAAC,KAAD;AACE,IAAA,MAAM,EAAEpB,MADV;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,mBAAmB,EAAE,KAHvB;AAIE,IAAA,KAAK,EAAE,MAAMO,UAAU,CAAC,EAAD,CAJzB;AAAA,4BAME,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,YAAD;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,CAAC,EAAE,EADL;AAEE,UAAA,MAAM,EAAC,SAFT;AAGE,UAAA,EAAE,EAAEY,YAAY,GAAGa,QAAH,GAAc,aAHhC;AAIE,UAAA,MAAM,EAAE;AAAEE,YAAAA,EAAE,EAAEF;AAAN,WAJV;AAKE,UAAA,UAAU,EAAC,4BALb;AAME,UAAA,YAAY,EAAE,CANhB;AAOE,UAAA,MAAM,EAAC,YAPT;AAQE,UAAA,WAAW,EAAEC,WARf;AAAA,aASMhB,YAAY,EATlB;AAAA,iCAWE,QAAC,MAAD;AAAA,mCACE;AAAA,sCACE,sBAAWC,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,IAAD;AAAM,gBAAA,SAAS,EAAC,QAAhB;AAAA,0BAA0Ba;AAA1B;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA,gBADF,eAmBE,QAAC,MAAD;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAE,CAArB;AAAwB,YAAA,OAAO,EAAE,CAAjC;AAAoC,YAAA,SAAS,EAAC,GAA9C;AAAA,sBACGzB,OAAO,CAACI,GAAR,CAAaC,IAAD,iBACX,QAAC,KAAD;AAEE,cAAA,GAAG,EAAEA,IAAI,CAACG,OAFZ;AAGE,cAAA,KAAK,EAAE,GAHT;AAIE,cAAA,MAAM,EAAE,GAJV;AAKE,cAAA,SAAS,EAAC,OALZ;AAME,cAAA,YAAY,EAAC,GANf;AAOE,cAAA,WAAW,EAAC,MAPd;AAQE,cAAA,WAAW,EAAC;AARd,eACOH,IAAI,CAACwB,IADZ;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAuCE,QAAC,WAAD;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,OADV;AAEE,UAAA,OAAO,EAAE,MAAM;AACb5B,YAAAA,UAAU,CAAC,EAAD,CAAV;AACAP,YAAAA,OAAO,CAAC,EAAD,CAAP;AACD,WALH;AAME,UAAA,WAAW,EAAC,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,MAAD;AACE,UAAA,WAAW,EAAC,MADd;AAEE,UAAA,EAAE,EAAE,CAFN;AAGE,UAAA,OAAO,EAAEyB,WAHX;AAIE,UAAA,WAAW,EAAC,cAJd;AAKE,UAAA,SAAS,EAAEvB,KAAK,CAACkC,IAAN,CAAWC,OALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuED;;GA/HQxC,M;UAEOF,a,EACIA,a,EACJF,Q,EAYwCC,W,EAkCrCL,iB,EACGA,iB;;;KAnDbQ,M;AAiIT,eAAeA,MAAf","sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  SimpleGrid,\n  Button,\n  Center,\n  useColorModeValue,\n  Text,\n  Image,\n  VStack,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useDropzone } from \"react-dropzone\";\nimport useFilesStore from \"../../store/files\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nfunction Upload(props = {}) {\n  const { isOpen = false, onClose, on } = props;\n  const files = useFilesStore((state) => state.files);\n  const postFiles = useFilesStore((state) => state.postFiles);\n  const toast = useToast();\n  const [uploads, setUploads] = useState([]);\n\n  const onDrop = useCallback(async (acceptedUploads) => {\n    setUploads(\n      acceptedUploads.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  });\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n    maxFiles: 3,\n    multiple: true,\n  });\n  useEffect(() => {\n    setUploads([]);\n  }, []);\n  useEffect(\n    () => () => {\n      uploads.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [uploads]\n  );\n\n  const saveUploads = async () => {\n    try {\n      const data = await postFiles(uploads);\n      setUploads([]);\n      onClose(data || []);\n    } catch (e) {\n      toast({\n        title:\n          \"Incognito mode is not allowed. \" +\n          (e.message || INTERNAL_SERVER_ERROR),\n        status: \"error\",\n      });\n    }\n  };\n\n  const dropText = isDragActive\n    ? \"Drop upto 3 png, jpeg or gifs here ...\"\n    : \"Drag 'n' drop upto 3 png, jpeg or gifs files here, or click to select uploads\";\n  const activeBg = useColorModeValue(\"gray.100\", \"gray.600\");\n  const borderColor = useColorModeValue(\n    isDragActive ? \"teal.300\" : \"gray.300\",\n    isDragActive ? \"teal.500\" : \"gray.500\"\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      closeOnOverlayClick={false}\n      onEsc={() => setUploads([])}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add images for this look.</ModalHeader>\n        <ModalBody>\n          <Center\n            p={10}\n            cursor=\"pointer\"\n            bg={isDragActive ? activeBg : \"transparent\"}\n            _hover={{ bg: activeBg }}\n            transition=\"background-color 0.2s ease\"\n            borderRadius={4}\n            border=\"3px dashed\"\n            borderColor={borderColor}\n            {...getRootProps()}\n          >\n            <VStack>\n              <div>\n                <input {...getInputProps()} />\n                <Text textAlign=\"center\">{dropText}</Text>\n              </div>\n            </VStack>\n          </Center>\n          <Center>\n            <SimpleGrid spacing={5} columns={3} marginTop=\"5\">\n              {uploads.map((file) => (\n                <Image\n                  key={file.name}\n                  src={file.preview}\n                  width={100}\n                  height={100}\n                  objectFit=\"cover\"\n                  borderRadius=\"5\"\n                  borderColor=\"gray\"\n                  borderWidth=\"2\"\n                />\n              ))}\n            </SimpleGrid>\n          </Center>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            variant=\"ghost\"\n            onClick={() => {\n              setUploads([]);\n              onClose([]);\n            }}\n            colorScheme=\"red\"\n          >\n            Close\n          </Button>\n          <Button\n            colorScheme=\"teal\"\n            mr={3}\n            onClick={saveUploads}\n            loadingText=\"Uploading...\"\n            isLoading={files.post.loading}\n          >\n            Upload\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}