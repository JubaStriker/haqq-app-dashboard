{"ast":null,"code":"// Copyright (c) 2017, 2021 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nvar bech32 = require('./bech32');\n\nfunction convertbits(data, frombits, tobits, pad) {\n  var acc = 0;\n  var bits = 0;\n  var ret = [];\n  var maxv = (1 << tobits) - 1;\n\n  for (var p = 0; p < data.length; ++p) {\n    var value = data[p];\n\n    if (value < 0 || value >> frombits !== 0) {\n      return null;\n    }\n\n    acc = acc << frombits | value;\n    bits += frombits;\n\n    while (bits >= tobits) {\n      bits -= tobits;\n      ret.push(acc >> bits & maxv);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      ret.push(acc << tobits - bits & maxv);\n    }\n  } else if (bits >= frombits || acc << tobits - bits & maxv) {\n    return null;\n  }\n\n  return ret;\n}\n\nfunction decode(hrp, addr) {\n  var bech32m = false;\n  var dec = bech32.decode(addr, bech32.encodings.BECH32);\n\n  if (dec === null) {\n    dec = bech32.decode(addr, bech32.encodings.BECH32M);\n    bech32m = true;\n  }\n\n  if (dec === null || dec.hrp !== hrp || dec.data.length < 1 || dec.data[0] > 16) {\n    return null;\n  }\n\n  var res = convertbits(dec.data.slice(1), 5, 8, false);\n\n  if (res === null || res.length < 2 || res.length > 40) {\n    return null;\n  }\n\n  if (dec.data[0] === 0 && res.length !== 20 && res.length !== 32) {\n    return null;\n  }\n\n  if (dec.data[0] === 0 && bech32m) {\n    return null;\n  }\n\n  if (dec.data[0] !== 0 && !bech32m) {\n    return null;\n  }\n\n  return {\n    version: dec.data[0],\n    program: res\n  };\n}\n\nfunction encode(hrp, version, program) {\n  var enc = bech32.encodings.BECH32;\n\n  if (version > 0) {\n    enc = bech32.encodings.BECH32M;\n  }\n\n  var ret = bech32.encode(hrp, [version].concat(convertbits(program, 8, 5, true)), enc);\n\n  if (decode(hrp, ret, enc) === null) {\n    return null;\n  }\n\n  return ret;\n} /////////////////////////////////////////////////////\n\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\n\nfunction isValidAddress(address, currency) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!currency.bech32Hrp || currency.bech32Hrp.length === 0) {\n    return false;\n  }\n\n  const {\n    networkType = DEFAULT_NETWORK_TYPE\n  } = opts;\n  var correctBech32Hrps;\n\n  if (networkType === 'prod' || networkType === 'testnet') {\n    correctBech32Hrps = currency.bech32Hrp[networkType];\n  } else if (currency.bech32Hrp) {\n    correctBech32Hrps = currency.bech32Hrp.prod.concat(currency.bech32Hrp.testnet);\n  } else {\n    return false;\n  }\n\n  for (var chrp of correctBech32Hrps) {\n    var ret = decode(chrp, address);\n\n    if (ret) {\n      return encode(chrp, ret.version, ret.program) === address.toLowerCase();\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  isValidAddress: isValidAddress\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/crypto/segwit_addr.js"],"names":["bech32","require","convertbits","data","frombits","tobits","pad","acc","bits","ret","maxv","p","length","value","push","decode","hrp","addr","bech32m","dec","encodings","BECH32","BECH32M","res","slice","version","program","encode","enc","concat","DEFAULT_NETWORK_TYPE","isValidAddress","address","currency","opts","bech32Hrp","networkType","correctBech32Hrps","prod","testnet","chrp","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2017, 2021 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar bech32 = require('./bech32');\n\nfunction convertbits (data, frombits, tobits, pad) {\n    var acc = 0;\n    var bits = 0;\n    var ret = [];\n    var maxv = (1 << tobits) - 1;\n    for (var p = 0; p < data.length; ++p) {\n        var value = data[p];\n        if (value < 0 || (value >> frombits) !== 0) {\n            return null;\n        }\n        acc = (acc << frombits) | value;\n        bits += frombits;\n        while (bits >= tobits) {\n            bits -= tobits;\n            ret.push((acc >> bits) & maxv);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (tobits - bits)) & maxv);\n        }\n    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n        return null;\n    }\n    return ret;\n}\n\nfunction decode (hrp, addr) {\n    var bech32m = false;\n    var dec = bech32.decode(addr, bech32.encodings.BECH32);\n    if (dec === null) {\n        dec = bech32.decode(addr, bech32.encodings.BECH32M);\n        bech32m = true;\n    }\n    if (dec === null || dec.hrp !== hrp || dec.data.length < 1 || dec.data[0] > 16) {\n        return null;\n    }\n    var res = convertbits(dec.data.slice(1), 5, 8, false);\n    if (res === null || res.length < 2 || res.length > 40) {\n        return null;\n    }\n    if (dec.data[0] === 0 && res.length !== 20 && res.length !== 32) {\n        return null;\n    }\n    if (dec.data[0] === 0 && bech32m) {\n        return null;\n    }\n    if (dec.data[0] !== 0 && !bech32m) {\n        return null;\n    }\n    return {version: dec.data[0], program: res};\n}\n\nfunction encode (hrp, version, program) {\n    var enc = bech32.encodings.BECH32;\n    if (version > 0) {\n        enc = bech32.encodings.BECH32M;\n    }\n    var ret = bech32.encode(hrp, [version].concat(convertbits(program, 8, 5, true)), enc);\n    if (decode(hrp, ret, enc) === null) {\n        return null;\n    }\n    return ret;\n}\n\n/////////////////////////////////////////////////////\n\nvar DEFAULT_NETWORK_TYPE = 'prod'\n\nfunction isValidAddress(address, currency, opts = {}) {\n\n    if(!currency.bech32Hrp || currency.bech32Hrp.length === 0) {\n        return false;\n    }\n\n    const { networkType = DEFAULT_NETWORK_TYPE} = opts;\n\n    var correctBech32Hrps;\n    if (networkType === 'prod' || networkType === 'testnet') {\n        correctBech32Hrps = currency.bech32Hrp[networkType];\n    } else if(currency.bech32Hrp) {\n        correctBech32Hrps = currency.bech32Hrp.prod.concat(currency.bech32Hrp.testnet)\n    } else {\n        return false;\n    }\n\n    for(var chrp of correctBech32Hrps) {\n        var ret = decode(chrp, address);\n        if(ret) {\n            return encode(chrp, ret.version, ret.program) === address.toLowerCase();\n        }\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    encode: encode,\n    decode: decode,\n    isValidAddress: isValidAddress,\n};\n"]},"metadata":{},"sourceType":"script"}