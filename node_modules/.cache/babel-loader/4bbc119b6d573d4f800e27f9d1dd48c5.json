{"ast":null,"code":"var jsSHA = require('jssha');\n\nvar sha512256 = require('js-sha512').sha512_256;\n\nvar Blake256 = require('./blake256');\n\nvar keccak256 = require('./sha3')['keccak256'];\n\nvar Blake2B = require('./blake2b');\n\nvar base58 = require('./base58');\n\nvar base32 = require('./base32');\n\nvar BigNum = require('browserify-bignum');\n\nfunction numberToHex(number, length) {\n  var hex = number.toString(16);\n\n  if (hex.length % 2 === 1) {\n    hex = '0' + hex;\n  }\n\n  return hex.padStart(length, '0');\n}\n\nfunction isHexChar(c) {\n  if (c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f' || c >= '0' && c <= '9') {\n    return 1;\n  }\n\n  return 0;\n}\n/* Convert a hex char to value */\n\n\nfunction hexChar2byte(c) {\n  var d = 0;\n\n  if (c >= 'A' && c <= 'F') {\n    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n  } else if (c >= 'a' && c <= 'f') {\n    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n  } else if (c >= '0' && c <= '9') {\n    d = c.charCodeAt(0) - '0'.charCodeAt(0);\n  }\n\n  return d;\n}\n/* Convert a byte to string */\n\n\nfunction byte2hexStr(byte) {\n  var hexByteMap = \"0123456789ABCDEF\";\n  var str = \"\";\n  str += hexByteMap.charAt(byte >> 4);\n  str += hexByteMap.charAt(byte & 0x0f);\n  return str;\n}\n\nfunction byteArray2hexStr(byteArray) {\n  var str = \"\";\n\n  for (var i = 0; i < byteArray.length - 1; i++) {\n    str += byte2hexStr(byteArray[i]);\n  }\n\n  str += byte2hexStr(byteArray[i]);\n  return str;\n}\n\nfunction hexStr2byteArray(str) {\n  var byteArray = Array();\n  var d = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  for (i = 0; i < str.length; i++) {\n    var c = str.charAt(i);\n\n    if (isHexChar(c)) {\n      d <<= 4;\n      d += hexChar2byte(c);\n      j++;\n\n      if (0 === j % 2) {\n        byteArray[k++] = d;\n        d = 0;\n      }\n    }\n  }\n\n  return byteArray;\n}\n\nmodule.exports = {\n  numberToHex: numberToHex,\n  toHex: function (arrayOfBytes) {\n    var hex = '';\n\n    for (var i = 0; i < arrayOfBytes.length; i++) {\n      hex += numberToHex(arrayOfBytes[i]);\n    }\n\n    return hex;\n  },\n  sha256: function (payload) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEX';\n    var sha = new jsSHA('SHA-256', format);\n    sha.update(payload);\n    return sha.getHash(format);\n  },\n  sha256x2: function (buffer) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEX';\n    return this.sha256(this.sha256(buffer, format), format);\n  },\n  sha256Checksum: function (payload) {\n    return this.sha256(this.sha256(payload)).substr(0, 8);\n  },\n  sha512_256: function (payload) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HEX';\n    const hash = sha512256.create();\n    hash.update(Buffer.from(payload, format));\n    return hash.hex().toUpperCase();\n  },\n  blake256: function (hexString) {\n    return new Blake256().update(hexString, 'hex').digest('hex');\n  },\n  blake256Checksum: function (payload) {\n    return this.blake256(this.blake256(payload)).substr(0, 8);\n  },\n  blake2b: function (hexString, outlen) {\n    return new Blake2B(outlen).update(Buffer.from(hexString, 'hex')).digest('hex');\n  },\n  keccak256: function (hexString) {\n    return keccak256(hexString);\n  },\n  keccak256Checksum: function (payload) {\n    return keccak256(payload).toString().substr(0, 8);\n  },\n  blake2b256: function (hexString) {\n    return new Blake2B(32).update(Buffer.from(hexString, 'hex'), 32).digest('hex');\n  },\n  base58: base58.decode,\n  byteArray2hexStr: byteArray2hexStr,\n  hexStr2byteArray: hexStr2byteArray,\n  bigNumberToBuffer: function (bignumber, size) {\n    return new BigNum(bignumber).toBuffer({\n      size,\n      endian: 'big'\n    });\n  },\n  base32: base32\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/crypto/utils.js"],"names":["jsSHA","require","sha512256","sha512_256","Blake256","keccak256","Blake2B","base58","base32","BigNum","numberToHex","number","length","hex","toString","padStart","isHexChar","c","hexChar2byte","d","charCodeAt","byte2hexStr","byte","hexByteMap","str","charAt","byteArray2hexStr","byteArray","i","hexStr2byteArray","Array","j","k","module","exports","toHex","arrayOfBytes","sha256","payload","format","sha","update","getHash","sha256x2","buffer","sha256Checksum","substr","hash","create","Buffer","from","toUpperCase","blake256","hexString","digest","blake256Checksum","blake2b","outlen","keccak256Checksum","blake2b256","decode","bigNumberToBuffer","bignumber","size","toBuffer","endian"],"mappings":"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","sourcesContent":["var jsSHA = require('jssha');\nvar sha512256 = require('js-sha512').sha512_256\nvar Blake256 = require('./blake256');\nvar keccak256 = require('./sha3')['keccak256'];\nvar Blake2B = require('./blake2b');\nvar base58 = require('./base58');\nvar base32 = require('./base32');\nvar BigNum = require('browserify-bignum');\n\nfunction numberToHex(number, length) {\n    var hex = number.toString(16);\n    if (hex.length % 2 === 1) {\n        hex = '0' + hex;\n    }\n    return hex.padStart(length, '0');\n}\n\nfunction isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n    return 0;\n}\n\n/* Convert a hex char to value */\nfunction hexChar2byte(c) {\n    var d = 0;\n    if (c >= 'A' && c <= 'F') {\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    }\n    else if (c >= 'a' && c <= 'f') {\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    }\n    else if (c >= '0' && c <= '9') {\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    return d;\n}\n\n/* Convert a byte to string */\nfunction byte2hexStr(byte) {\n    var hexByteMap = \"0123456789ABCDEF\";\n    var str = \"\";\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n    return str;\n}\n\nfunction byteArray2hexStr(byteArray) {\n    var str = \"\";\n    for (var i = 0; i < (byteArray.length - 1); i++) {\n        str += byte2hexStr(byteArray[i]);\n    }\n    str += byte2hexStr(byteArray[i]);\n    return str;\n}\n\nfunction hexStr2byteArray(str) {\n    var byteArray = Array();\n    var d = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\n     for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n    return byteArray;\n}\n\nmodule.exports = {\n    numberToHex: numberToHex,\n    toHex: function (arrayOfBytes) {\n        var hex = '';\n        for (var i = 0; i < arrayOfBytes.length; i++) {\n            hex += numberToHex(arrayOfBytes[i]);\n        }\n        return hex;\n    },\n    sha256: function (payload, format = 'HEX') {\n        var sha = new jsSHA('SHA-256', format);\n        sha.update(payload);\n        return sha.getHash(format);\n    },\n    sha256x2: function (buffer, format = 'HEX') {\n        return this.sha256(this.sha256(buffer, format), format);\n    },\n    sha256Checksum: function (payload) {\n        return this.sha256(this.sha256(payload)).substr(0, 8);\n    },\n    sha512_256: function (payload, format = 'HEX') {\n        const hash = sha512256.create()\n        hash.update(Buffer.from(payload, format))\n        return hash.hex().toUpperCase();\n    },\n    blake256: function (hexString) {\n        return new Blake256().update(hexString, 'hex').digest('hex');\n    },\n    blake256Checksum: function (payload) {\n        return this.blake256(this.blake256(payload)).substr(0, 8);\n    },\n    blake2b: function (hexString, outlen) {\n        return new Blake2B(outlen).update(Buffer.from(hexString, 'hex')).digest('hex');\n    },\n    keccak256: function (hexString) {\n        return keccak256(hexString);\n    },\n    keccak256Checksum: function (payload) {\n        return keccak256(payload).toString().substr(0, 8);\n    },\n    blake2b256: function (hexString) {\n        return new Blake2B(32).update(Buffer.from(hexString, 'hex'), 32).digest('hex');\n    },\n    base58: base58.decode,\n    byteArray2hexStr: byteArray2hexStr,\n    hexStr2byteArray: hexStr2byteArray,\n    bigNumberToBuffer: function(bignumber, size){\n        return new BigNum(bignumber).toBuffer({ size, endian: 'big' });\n    },\n    base32: base32\n}\n"]},"metadata":{},"sourceType":"script"}