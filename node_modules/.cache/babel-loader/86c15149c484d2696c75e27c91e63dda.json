{"ast":null,"code":"const cryptoUtils = require('./crypto/utils');\n\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\nmodule.exports = {\n  isValidAddress: function (address, currency) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      networkType = 'prod'\n    } = opts;\n    return this.verifyChecksum(address);\n  },\n  verifyChecksum: function (address) {\n    if (address.length !== ALGORAND_ADDRESS_LENGTH) {\n      return false;\n    } else {\n      // Decode base32 Address\n      const decoded = cryptoUtils.base32.b32decode(address);\n      const addr = decoded.slice(0, decoded.length - ALGORAND_CHECKSUM_BYTE_LENGTH);\n      const checksum = cryptoUtils.byteArray2hexStr(decoded.slice(-4)).toString('HEX'); // Hash Address - Checksum\n\n      const code = cryptoUtils.sha512_256(cryptoUtils.byteArray2hexStr(addr)).substr(-ALGORAND_CHECKSUM_BYTE_LENGTH * 2);\n      return code === checksum;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/algo_validator.js"],"names":["cryptoUtils","require","ALGORAND_CHECKSUM_BYTE_LENGTH","ALGORAND_ADDRESS_LENGTH","module","exports","isValidAddress","address","currency","opts","networkType","verifyChecksum","length","decoded","base32","b32decode","addr","slice","checksum","byteArray2hexStr","toString","code","sha512_256","substr"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,MAAMC,6BAA6B,GAAG,CAAtC;AACA,MAAMC,uBAAuB,GAAG,EAAhC;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmBC,QAAnB,EAAwC;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACpD,UAAM;AAAEC,MAAAA,WAAW,GAAG;AAAhB,QAA2BD,IAAjC;AAEA,WAAO,KAAKE,cAAL,CAAoBJ,OAApB,CAAP;AACH,GALY;AAObI,EAAAA,cAAc,EAAE,UAAUJ,OAAV,EAAmB;AAC/B,QAAIA,OAAO,CAACK,MAAR,KAAmBT,uBAAvB,EAAgD;AAC5C,aAAO,KAAP;AACH,KAFD,MAEO;AACH;AACA,YAAMU,OAAO,GAAGb,WAAW,CAACc,MAAZ,CAAmBC,SAAnB,CAA6BR,OAA7B,CAAhB;AACA,YAAMS,IAAI,GAAGH,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiBJ,OAAO,CAACD,MAAR,GAAiBV,6BAAlC,CAAb;AACA,YAAMgB,QAAQ,GAAGlB,WAAW,CAACmB,gBAAZ,CAA6BN,OAAO,CAACI,KAAR,CAAc,CAAC,CAAf,CAA7B,EAAgDG,QAAhD,CAAyD,KAAzD,CAAjB,CAJG,CAMH;;AACA,YAAMC,IAAI,GAAGrB,WAAW,CAACsB,UAAZ,CAAuBtB,WAAW,CAACmB,gBAAZ,CAA6BH,IAA7B,CAAvB,EAA2DO,MAA3D,CAAkE,CAACrB,6BAAD,GAAiC,CAAnG,CAAb;AAEA,aAAOmB,IAAI,KAAKH,QAAhB;AACH;AACJ;AArBY,CAAjB","sourcesContent":["const cryptoUtils = require('./crypto/utils');\n\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        const { networkType = 'prod' } = opts;\n\n        return this.verifyChecksum(address)\n    },\n\n    verifyChecksum: function (address) {\n        if (address.length !== ALGORAND_ADDRESS_LENGTH) {\n            return false\n        } else {\n            // Decode base32 Address\n            const decoded = cryptoUtils.base32.b32decode(address);\n            const addr = decoded.slice(0, decoded.length - ALGORAND_CHECKSUM_BYTE_LENGTH)\n            const checksum = cryptoUtils.byteArray2hexStr(decoded.slice(-4)).toString('HEX')\n\n            // Hash Address - Checksum\n            const code = cryptoUtils.sha512_256(cryptoUtils.byteArray2hexStr(addr)).substr(-ALGORAND_CHECKSUM_BYTE_LENGTH * 2);\n\n            return code === checksum\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}