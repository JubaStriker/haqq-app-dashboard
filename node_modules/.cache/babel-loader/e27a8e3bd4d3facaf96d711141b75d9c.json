{"ast":null,"code":"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\nimport { HashConnect } from \"hashconnect\";\nimport { AwesomeQR } from \"awesome-qr\";\nconst VERIFY_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst useWalletStore = create((set, address) => ({\n  verifyWalletSate: VERIFY_WALLET_STATE,\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async data => {\n    set(produce(state => ({ ...state,\n      verifyWalletSate: { ...state.verifyWalletSate,\n        get: { ...VERIFY_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      // console.log(data);\n      const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${data}`);\n      const response = await fetchAccount.json();\n      console.log(response.accounts[0].account);\n\n      if (data === response.accounts[0].account) {\n        set(produce(state => ({ ...state,\n          verifyWalletSate: { ...state.verifyWalletSate,\n            get: { ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: true\n              }\n            }\n          }\n        })));\n      }\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        verifyWalletSate: { ...state.verifyWalletSate,\n          get: { ...VERIFY_WALLET_STATE.get,\n            loading: false,\n            success: {\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  fetchWalletAddress: async () => {\n    // set(\n    //   produce((state) => ({\n    //     ...state,\n    //     walletState: {\n    //       ...state.walletState,\n    //       get: {\n    //         ...INITIAL_WALLET_STATE.get,\n    //         loading: true,\n    //       },\n    //     },\n    //   }))\n    // );\n    try {\n      let hashConnect = new HashConnect();\n      window.hashConnect = hashConnect;\n      console.log(\"Hash Connect Data\", hashConnect);\n      const appMetadata = {\n        name: \"HBar Shop\",\n        description: \"An example hedera dApp\",\n        icon: \"https://absolute.url/to/icon.png\",\n        url: \"https://9516-171-76-213-73.in.ngrok.io\"\n      };\n      const initData = await window.hashConnect.init(appMetadata, \"testnet\", false); // console.log('asdasd')\n      // let qrcode = \"\";\n      // const ScanCode = await new AwesomeQR({\n      //   text: initData.pairingString,\n      //   size: 400,\n      //   margin: 16,\n      //   maskPattern: 110,\n      //   colorLight: \"#fff\",\n      // })\n      //   .draw()\n      //   .then((dataURL) => {\n      //     if (dataURL) {\n      //       qrcode = dataURL.toString();\n      //     }\n      //   });\n      // console.log(qrcode);\n\n      console.log(\"Here \", window.hashConnect);\n      window.hashConnect.foundExtensionEvent.once(walletMetadata => {\n        console.log(\"WALLET METADAT \", walletMetadata);\n        window.hashConnect.connectToLocalWallet(initData.pairingString, walletMetadata);\n      }, err => console.error(err));\n      let walletAddress = \"\";\n      hashConnect.pairingEvent.once(pairingData => {\n        console.log(\"Paired Data: \", pairingData);\n        pairingData.accountIds.forEach(id => {\n          walletAddress = id;\n          console.log(walletAddress);\n        }); //   // set(\n        //   //   produce((state) => ({\n        //   //     ...state,\n        //   //     walletState: {\n        //   //       ...state.walletState,\n        //   //       get: {\n        //   //         ...INITIAL_WALLET_STATE.get,\n        //   //         success: {\n        //   //           data: walletAddress,\n        //   //           ok: true,\n        //   //         },\n        //   //       },\n        //   //     },\n        //   //   }))\n        //   // );\n      });\n    } catch (e) {\n      console.error(e); // set(\n      //   produce((state) => ({\n      //     ...state,\n      //     walletState: {\n      //       ...state.walletState,\n      //       get: {\n      //         ...INITIAL_WALLET_STATE.get,\n      //         loading: false,\n      //         success:{\n      //           data: e.message,\n      //           ok: false,\n      //         }\n      //       },\n      //     },\n      //   }))\n      // );\n    }\n  },\n  getWalletAddress: async shop => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        get: { ...INITIAL_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`); // console.log(data);\n\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            success: {\n              data: data,\n              ok: true\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            loading: false,\n            success: {\n              data: e.message,\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  postWalletAddress: async _ref => {\n    let {\n      shop,\n      walletAddress\n    } = _ref;\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        post: { ...INITIAL_WALLET_STATE.post,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.post(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`, {\n        shop,\n        walletAddress\n      });\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: true\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: false\n            },\n            failure: {\n              error: false,\n              message: \"Please Verify the Wallet Address\"\n            }\n          }\n        }\n      })));\n      throw error;\n    }\n  }\n}));\nexport default useWalletStore;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/wallet/index.js"],"names":["create","axios","produce","INTERNAL_SERVER_ERROR","Parse","HashConnect","AwesomeQR","VERIFY_WALLET_STATE","get","loading","success","ok","data","failure","error","message","INITIAL_WALLET_STATE","post","useWalletStore","set","address","verifyWalletSate","walletState","verifyWalletAddress","state","fetchAccount","fetch","response","json","console","log","accounts","account","e","fetchWalletAddress","hashConnect","window","appMetadata","name","description","icon","url","initData","init","foundExtensionEvent","once","walletMetadata","connectToLocalWallet","pairingString","err","walletAddress","pairingEvent","pairingData","accountIds","forEach","id","getWalletAddress","shop","process","env","REACT_APP_API_SHOPLOOKS_SERVER_URL","postWalletAddress"],"mappings":"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","sourcesContent":["import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\nimport { HashConnect } from \"hashconnect\";\nimport { AwesomeQR } from \"awesome-qr\";\n\nconst VERIFY_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useWalletStore = create((set, address) => ({\n  verifyWalletSate: VERIFY_WALLET_STATE,\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async (data) => {\n    set(\n      produce((state) => ({\n        ...state,\n        verifyWalletSate: {\n          ...state.verifyWalletSate,\n          get: {\n            ...VERIFY_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      // console.log(data);\n      const fetchAccount = await fetch(\n        `https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${data}`\n      );\n      const response = await fetchAccount.json();\n      console.log(response.accounts[0].account);\n\n      if (data === response.accounts[0].account) {\n        set(\n          produce((state) => ({\n            ...state,\n            verifyWalletSate: {\n              ...state.verifyWalletSate,\n              get: {\n                ...VERIFY_WALLET_STATE.get,\n                loading: false,\n                success: {\n                  ok: true,\n                },\n              },\n            },\n          }))\n        );\n      }\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          verifyWalletSate: {\n            ...state.verifyWalletSate,\n            get: {\n              ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: false,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n  fetchWalletAddress: async () => {\n    // set(\n    //   produce((state) => ({\n    //     ...state,\n    //     walletState: {\n    //       ...state.walletState,\n    //       get: {\n    //         ...INITIAL_WALLET_STATE.get,\n    //         loading: true,\n    //       },\n    //     },\n    //   }))\n    // );\n    try {\n      let hashConnect = new HashConnect();\n      window.hashConnect = hashConnect\n      console.log(\"Hash Connect Data\", hashConnect);\n      const appMetadata = {\n        name: \"HBar Shop\",\n        description: \"An example hedera dApp\",\n        icon: \"https://absolute.url/to/icon.png\",\n        url: \"https://9516-171-76-213-73.in.ngrok.io\"\n      };\n\n      const initData = await window.hashConnect.init(appMetadata, \"testnet\", false);\n      \n      // console.log('asdasd')\n      // let qrcode = \"\";\n      // const ScanCode = await new AwesomeQR({\n      //   text: initData.pairingString,\n      //   size: 400,\n      //   margin: 16,\n      //   maskPattern: 110,\n      //   colorLight: \"#fff\",\n      // })\n      //   .draw()\n      //   .then((dataURL) => {\n      //     if (dataURL) {\n      //       qrcode = dataURL.toString();\n      //     }\n      //   });\n      // console.log(qrcode);\n      console.log(\"Here \", window.hashConnect)\n      window.hashConnect.foundExtensionEvent.once((walletMetadata) => {\n        console.log(\"WALLET METADAT \", walletMetadata)\n        window.hashConnect.connectToLocalWallet(\n          initData.pairingString,\n          walletMetadata\n        );\n      }, (err) => console.error(err));\n      let walletAddress = \"\";\n      hashConnect.pairingEvent.once((pairingData) => {\n        console.log(\"Paired Data: \", pairingData);\n        pairingData.accountIds.forEach((id) => {\n          walletAddress = id;\n          console.log(walletAddress);\n        });\n        //   // set(\n        //   //   produce((state) => ({\n        //   //     ...state,\n        //   //     walletState: {\n        //   //       ...state.walletState,\n        //   //       get: {\n        //   //         ...INITIAL_WALLET_STATE.get,\n        //   //         success: {\n        //   //           data: walletAddress,\n        //   //           ok: true,\n        //   //         },\n        //   //       },\n        //   //     },\n        //   //   }))\n        //   // );\n      });\n    } catch (e) {\n      console.error(e);\n      // set(\n      //   produce((state) => ({\n      //     ...state,\n      //     walletState: {\n      //       ...state.walletState,\n      //       get: {\n      //         ...INITIAL_WALLET_STATE.get,\n      //         loading: false,\n      //         success:{\n      //           data: e.message,\n      //           ok: false,\n      //         }\n      //       },\n      //     },\n      //   }))\n      // );\n    }\n  },\n  getWalletAddress: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`\n      );\n      // console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              success: {\n                data: data,\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              loading: false,\n              success: {\n                data: e.message,\n                ok: false,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n  postWalletAddress: async ({ shop, walletAddress }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          post: {\n            ...INITIAL_WALLET_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`,\n        {\n          shop,\n          walletAddress,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: false,\n              },\n              failure: {\n                error: false,\n                message: \"Please Verify the Wallet Address\",\n              },\n            },\n          },\n        }))\n      );\n      throw error;\n    }\n  },\n}));\n\nexport default useWalletStore;\n"]},"metadata":{},"sourceType":"module"}