{"ast":null,"code":"import { AccountBalanceQuery, AccountInfoQuery, AccountRecordsQuery, Client, TransactionReceiptQuery } from '@hashgraph/sdk';\nexport class HashConnectProvider {\n  constructor(networkName, hashconnect, topicId, accountToSign) {\n    this.hashconnect = hashconnect;\n    this.network = networkName;\n    this.client = Client.forName(networkName);\n    this.topicId = topicId;\n    this.accountToSign = accountToSign;\n  }\n\n  getLedgerId() {\n    return this.client.ledgerId;\n  }\n\n  getNetwork() {\n    return this.client.network;\n  }\n\n  getMirrorNetwork() {\n    throw new Error(\"Get Mirror Network not implemented in HashConnect provider\");\n    return [];\n  }\n\n  getAccountBalance(accountId) {\n    return new AccountBalanceQuery().setAccountId(accountId).execute(this.client);\n  }\n\n  getAccountInfo(accountId) {\n    return new AccountInfoQuery().setAccountId(accountId).execute(this.client);\n  }\n\n  getAccountRecords(accountId) {\n    return new AccountRecordsQuery().setAccountId(accountId).execute(this.client);\n  }\n\n  getTransactionReceipt(transactionId) {\n    return new TransactionReceiptQuery().setTransactionId(transactionId).execute(this.client);\n  }\n\n  waitForReceipt(response) {\n    return new TransactionReceiptQuery().setNodeAccountIds([response.nodeId]).setTransactionId(response.transactionId).execute(this.client);\n  }\n\n  async call(request) {\n    const transaction = {\n      byteArray: this.getBytesOf(request),\n      metadata: {\n        accountToSign: this.accountToSign.toString(),\n        returnTransaction: false\n      },\n      topic: this.topicId\n    };\n    let res = await this.hashconnect.sendTransaction(this.topicId, transaction);\n    let response = res.response;\n    return response;\n    throw new Error(`We only know how to forward Transactions and Queries.`);\n  }\n\n  getBytesOf(request) {\n    let transaction = request;\n    let query;\n    if (!transaction) query = request;\n    if (!transaction && !query) throw new Error(\"Only Transactions and Queries can be serialized to be sent for signing by the HashPack wallet.\");\n    if (transaction) return request.toBytes();else return request.toBytes();\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SACIA,mBADJ,EACoCC,gBADpC,EAEIC,mBAFJ,EAEyBC,MAFzB,EAGgCC,uBAHhC,QAKO,gBALP;AASA,OAAM,MAAOC,mBAAP,CAA0B;AAO5BC,cAAmBC,WAAnB,EAAwCC,WAAxC,EAAkEC,OAAlE,EAAmFC,aAAnF,EAAwG;AACpG,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKG,OAAL,GAAeJ,WAAf;AACA,SAAKK,MAAL,GAAcT,MAAM,CAACU,OAAP,CAAeN,WAAf,CAAd;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACH;;AAEDI,aAAW;AACP,WAAO,KAAKF,MAAL,CAAYG,QAAnB;AACH;;AAEDC,YAAU;AACN,WAAO,KAAKJ,MAAL,CAAYD,OAAnB;AACH;;AAEDM,kBAAgB;AACZ,UAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AAEA,WAAO,EAAP;AACH;;AAEDC,mBAAiB,CAACC,SAAD,EAA8B;AAC3C,WAAO,IAAIpB,mBAAJ,GACFqB,YADE,CACWD,SADX,EAEFE,OAFE,CAEM,KAAKV,MAFX,CAAP;AAGH;;AAEDW,gBAAc,CAACH,SAAD,EAA8B;AACxC,WAAO,IAAInB,gBAAJ,GACFoB,YADE,CACWD,SADX,EAEFE,OAFE,CAEM,KAAKV,MAFX,CAAP;AAGH;;AAEDY,mBAAiB,CAACJ,SAAD,EAA8B;AAC3C,WAAO,IAAIlB,mBAAJ,GACFmB,YADE,CACWD,SADX,EAEFE,OAFE,CAEM,KAAKV,MAFX,CAAP;AAGH;;AAEDa,uBAAqB,CAACC,aAAD,EAAsC;AACvD,WAAO,IAAItB,uBAAJ,GACFuB,gBADE,CACeD,aADf,EAEFJ,OAFE,CAEM,KAAKV,MAFX,CAAP;AAGH;;AAEDgB,gBAAc,CAACC,QAAD,EAA8B;AACxC,WAAO,IAAIzB,uBAAJ,GACF0B,iBADE,CACgB,CAACD,QAAQ,CAACE,MAAV,CADhB,EAEFJ,gBAFE,CAEeE,QAAQ,CAACH,aAFxB,EAGFJ,OAHE,CAGM,KAAKV,MAHX,CAAP;AAIH;;AAES,QAAJoB,IAAI,CAA+BC,OAA/B,EAAgF;AACtF,UAAMC,WAAW,GAAG;AAChBC,eAAS,EAAE,KAAKC,UAAL,CAAgBH,OAAhB,CADK;AAEhBI,cAAQ,EAAE;AACN3B,qBAAa,EAAE,KAAKA,aAAL,CAAmB4B,QAAnB,EADT;AAENC,yBAAiB,EAAE;AAFb,OAFM;AAMhBC,WAAK,EAAE,KAAK/B;AANI,KAApB;AASA,QAAIgC,GAAG,GAAG,MAAM,KAAKjC,WAAL,CAAiBkC,eAAjB,CAAiC,KAAKjC,OAAtC,EAA+CyB,WAA/C,CAAhB;AAEA,QAAIL,QAAQ,GAAwBY,GAAG,CAACZ,QAAxC;AAEA,WAAQA,QAAR;AACI,UAAM,IAAIX,KAAJ,CAAU,uDAAV,CAAN;AACP;;AAEOkB,YAAU,CAA+BH,OAA/B,EAAgF;AAC9F,QAAIC,WAAW,GAAID,OAAnB;AACA,QAAIU,KAAJ;AAEA,QAAI,CAACT,WAAL,EACIS,KAAK,GAAIV,OAAT;AAEJ,QAAI,CAACC,WAAD,IAAgB,CAACS,KAArB,EACI,MAAM,IAAIzB,KAAJ,CAAU,gGAAV,CAAN;AAEJ,QAAIgB,WAAJ,EACI,OAASD,OAAmC,CAACW,OAApC,EAAT,CADJ,KAGI,OAASX,OAAkC,CAACW,OAAnC,EAAT;AACP;;AA5F2B","names":["AccountBalanceQuery","AccountInfoQuery","AccountRecordsQuery","Client","TransactionReceiptQuery","HashConnectProvider","constructor","networkName","hashconnect","topicId","accountToSign","network","client","forName","getLedgerId","ledgerId","getNetwork","getMirrorNetwork","Error","getAccountBalance","accountId","setAccountId","execute","getAccountInfo","getAccountRecords","getTransactionReceipt","transactionId","setTransactionId","waitForReceipt","response","setNodeAccountIds","nodeId","call","request","transaction","byteArray","getBytesOf","metadata","toString","returnTransaction","topic","res","sendTransaction","query","toBytes"],"sourceRoot":"","sources":["../../../src/provider/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}