{"ast":null,"code":"var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n/**\n* Encode a string to base32\n*/\n\nvar b32encode = function (s) {\n  var parts = [];\n  var quanta = Math.floor(s.length / 5);\n  var leftover = s.length % 5;\n\n  if (leftover != 0) {\n    for (var i = 0; i < 5 - leftover; i++) {\n      s += '\\x00';\n    }\n\n    quanta += 1;\n  }\n\n  for (var i = 0; i < quanta; i++) {\n    parts.push(alphabet.charAt(s.charCodeAt(i * 5) >> 3));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5) & 0x07) << 2 | s.charCodeAt(i * 5 + 1) >> 6));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5 + 1) & 0x3F) >> 1));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5 + 1) & 0x01) << 4 | s.charCodeAt(i * 5 + 2) >> 4));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5 + 2) & 0x0F) << 1 | s.charCodeAt(i * 5 + 3) >> 7));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5 + 3) & 0x7F) >> 2));\n    parts.push(alphabet.charAt((s.charCodeAt(i * 5 + 3) & 0x03) << 3 | s.charCodeAt(i * 5 + 4) >> 5));\n    parts.push(alphabet.charAt(s.charCodeAt(i * 5 + 4) & 0x1F));\n  }\n\n  var replace = 0;\n  if (leftover == 1) replace = 6;else if (leftover == 2) replace = 4;else if (leftover == 3) replace = 3;else if (leftover == 4) replace = 1;\n\n  for (var i = 0; i < replace; i++) parts.pop();\n\n  for (var i = 0; i < replace; i++) parts.push(\"=\");\n\n  return parts.join(\"\");\n};\n/**\n* Decode a base32 string.\n* This is made specifically for our use, deals only with proper strings\n*/\n\n\nvar b32decode = function (s) {\n  var r = new ArrayBuffer(s.length * 5 / 8);\n  var b = new Uint8Array(r);\n\n  for (var j = 0; j < s.length / 8; j++) {\n    var v = [0, 0, 0, 0, 0, 0, 0, 0];\n\n    for (var i = 0; i < 8; ++i) {\n      v[i] = alphabet.indexOf(s[j * 8 + i]);\n    }\n\n    var i = 0;\n    b[j * 5 + 0] = v[i + 0] << 3 | v[i + 1] >> 2;\n    b[j * 5 + 1] = (v[i + 1] & 0x3) << 6 | v[i + 2] << 1 | v[i + 3] >> 4;\n    b[j * 5 + 2] = (v[i + 3] & 0xf) << 4 | v[i + 4] >> 1;\n    b[j * 5 + 3] = (v[i + 4] & 0x1) << 7 | v[i + 5] << 2 | v[i + 6] >> 3;\n    b[j * 5 + 4] = (v[i + 6] & 0x7) << 5 | v[i + 7];\n  }\n\n  return b;\n};\n\nmodule.exports = {\n  b32decode: b32decode,\n  b32encode: b32encode\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/crypto/base32.js"],"names":["alphabet","b32encode","s","parts","quanta","Math","floor","length","leftover","i","push","charAt","charCodeAt","replace","pop","join","b32decode","r","ArrayBuffer","b","Uint8Array","j","v","indexOf","module","exports"],"mappings":"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","sourcesContent":["var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n /**\n* Encode a string to base32\n*/\nvar b32encode = function(s) {\n    var parts = [];\n    var quanta = Math.floor((s.length / 5));\n    var leftover = s.length % 5;\n\n     if (leftover != 0) {\n        for (var i = 0; i < (5 - leftover); i++) {\n            s += '\\x00';\n        }\n        quanta += 1;\n    }\n\n     for (var i = 0; i < quanta; i++) {\n        parts.push(alphabet.charAt(s.charCodeAt(i * 5) >> 3));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5) & 0x07) << 2) | (s.charCodeAt(i * 5 + 1) >> 6)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x3F) >> 1)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x01) << 4) | (s.charCodeAt(i * 5 + 2) >> 4)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 2) & 0x0F) << 1) | (s.charCodeAt(i * 5 + 3) >> 7)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x7F) >> 2)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x03) << 3) | (s.charCodeAt(i * 5 + 4) >> 5)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 4) & 0x1F))));\n    }\n\n     var replace = 0;\n    if (leftover == 1) replace = 6;\n    else if (leftover == 2) replace = 4;\n    else if (leftover == 3) replace = 3;\n    else if (leftover == 4) replace = 1;\n\n     for (var i = 0; i < replace; i++) parts.pop();\n    for (var i = 0; i < replace; i++) parts.push(\"=\");\n\n     return parts.join(\"\");\n}\n\n/**\n* Decode a base32 string.\n* This is made specifically for our use, deals only with proper strings\n*/\nvar b32decode = function(s) {\n    var r = new ArrayBuffer(s.length * 5 / 8);\n    var b = new Uint8Array(r);\n    for (var j = 0; j < s.length / 8; j++) {\n        var v = [0, 0, 0, 0, 0, 0, 0, 0];\n        for (var i = 0; i < 8; ++i) {\n            v[i] = alphabet.indexOf(s[j * 8 + i]);\n        }\n        var i = 0;\n        b[j * 5 + 0] = (v[i + 0] << 3) | (v[i + 1] >> 2);\n        b[j * 5 + 1] = ((v[i + 1] & 0x3) << 6) | (v[i + 2] << 1) | (v[i + 3] >> 4);\n        b[j * 5 + 2] = ((v[i + 3] & 0xf) << 4) | (v[i + 4] >> 1);\n        b[j * 5 + 3] = ((v[i + 4] & 0x1) << 7) | (v[i + 5] << 2) | (v[i + 6] >> 3);\n        b[j * 5 + 4] = ((v[i + 6] & 0x7) << 5) | (v[i + 7]);\n    }\n    return b;\n}\n\nmodule.exports = {\n    b32decode: b32decode,\n    b32encode: b32encode\n};"]},"metadata":{},"sourceType":"script"}