{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar bech32 = require('./crypto/bech32');\n\nvar BTCValidator = require('./bitcoin_validator');\n\nfunction validateAddress(address, currency, opts) {\n  var networkType = opts ? opts.networkType : '';\n  var prefix = 'bitcoincash';\n  var regexp = new RegExp(currency.regexp);\n  var raw_address;\n  var res = address.split(':');\n\n  if (res.length === 1) {\n    raw_address = address;\n  } else {\n    if (res[0] !== 'bitcoincash') {\n      return false;\n    }\n\n    raw_address = res[1];\n  }\n\n  if (!regexp.test(raw_address)) {\n    return false;\n  }\n\n  if (raw_address.toLowerCase() != raw_address && raw_address.toUpperCase() != raw_address) {\n    return false;\n  }\n\n  var decoded = cryptoUtils.base32.b32decode(raw_address);\n\n  if (networkType === 'testnet') {\n    prefix = 'bchtest';\n  }\n\n  try {\n    if (bech32.verifyChecksum(prefix, decoded, bech32.encodings.BECH32)) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  isValidAddress: function (address, currency, networkType) {\n    return validateAddress(address, currency, networkType) || BTCValidator.isValidAddress(address, currency, networkType);\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/bch_validator.js"],"names":["cryptoUtils","require","bech32","BTCValidator","validateAddress","address","currency","opts","networkType","prefix","regexp","RegExp","raw_address","res","split","length","test","toLowerCase","toUpperCase","decoded","base32","b32decode","verifyChecksum","encodings","BECH32","e","module","exports","isValidAddress"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AAEA,SAASG,eAAT,CAAyBC,OAAzB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAC9C,MAAIC,WAAW,GAAGD,IAAI,GAAGA,IAAI,CAACC,WAAR,GAAsB,EAA5C;AACA,MAAIC,MAAM,GAAG,aAAb;AACA,MAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAWL,QAAQ,CAACI,MAApB,CAAb;AACA,MAAIE,WAAJ;AAEA,MAAIC,GAAG,GAAGR,OAAO,CAACS,KAAR,CAAc,GAAd,CAAV;;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AAClBH,IAAAA,WAAW,GAAGP,OAAd;AACH,GAFD,MAEO;AACH,QAAIQ,GAAG,CAAC,CAAD,CAAH,KAAW,aAAf,EAA8B;AAC1B,aAAO,KAAP;AACH;;AACDD,IAAAA,WAAW,GAAGC,GAAG,CAAC,CAAD,CAAjB;AACH;;AAED,MAAI,CAACH,MAAM,CAACM,IAAP,CAAYJ,WAAZ,CAAL,EAA+B;AAC3B,WAAO,KAAP;AACH;;AAED,MAAIA,WAAW,CAACK,WAAZ,MAA6BL,WAA7B,IAA4CA,WAAW,CAACM,WAAZ,MAA6BN,WAA7E,EAA0F;AACtF,WAAO,KAAP;AACH;;AAED,MAAIO,OAAO,GAAGnB,WAAW,CAACoB,MAAZ,CAAmBC,SAAnB,CAA6BT,WAA7B,CAAd;;AACA,MAAIJ,WAAW,KAAK,SAApB,EAA+B;AAC3BC,IAAAA,MAAM,GAAG,SAAT;AACH;;AAED,MAAI;AACA,QAAIP,MAAM,CAACoB,cAAP,CAAsBb,MAAtB,EAA8BU,OAA9B,EAAuCjB,MAAM,CAACqB,SAAP,CAAiBC,MAAxD,CAAJ,EAAqE;AACjE,aAAO,KAAP;AACH;AACJ,GAJD,CAIE,OAAMC,CAAN,EAAS;AACP,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUvB,OAAV,EAAmBC,QAAnB,EAA6BE,WAA7B,EAA0C;AACtD,WAAOJ,eAAe,CAACC,OAAD,EAAUC,QAAV,EAAoBE,WAApB,CAAf,IAAmDL,YAAY,CAACyB,cAAb,CAA4BvB,OAA5B,EAAqCC,QAArC,EAA+CE,WAA/C,CAA1D;AACH;AAHY,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils');\nvar bech32 = require('./crypto/bech32');\nvar BTCValidator = require('./bitcoin_validator');\n\nfunction validateAddress(address, currency, opts) {\n    var networkType = opts ? opts.networkType : ''\n    var prefix = 'bitcoincash';\n    var regexp = new RegExp(currency.regexp);\n    var raw_address;\n\n    var res = address.split(':');\n    if (res.length === 1) {\n        raw_address = address\n    } else {\n        if (res[0] !== 'bitcoincash') {\n            return false;\n        }\n        raw_address = res[1];\n    }\n\n    if (!regexp.test(raw_address)) {\n        return false;\n    }\n\n    if (raw_address.toLowerCase() != raw_address && raw_address.toUpperCase() != raw_address) {\n        return false;\n    }\n\n    var decoded = cryptoUtils.base32.b32decode(raw_address);\n    if (networkType === 'testnet') {\n        prefix = 'bchtest';\n    }\n\n    try {\n        if (bech32.verifyChecksum(prefix, decoded, bech32.encodings.BECH32)) {\n            return false;\n        }\n    } catch(e) {\n        return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, networkType) {\n        return validateAddress(address, currency, networkType) || BTCValidator.isValidAddress(address, currency, networkType);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}