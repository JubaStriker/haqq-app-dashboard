{"ast":null,"code":"let api = 'https://api.cryptonator.com/api/ticker/';\n\nfunction getPrice() {\n  return new Promise((done, err) => {\n    err('Use One of Our Methods, Please Check API for reference on Methods');\n  });\n}\n\ngetPrice.getCryptoPrice = (base, crypto) => {\n  return new Promise((done, err) => {\n    if (typeof base === 'undefined' && typeof crypto === 'undefined') {\n      err(`You forgot to provide Base / Cryptic Currency Name`);\n    } else {\n      let cApi = api + crypto + '-' + base;\n      fetch(cApi).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          err(`Sorry, We couldn't get the Price. Bad response code : ` + response.status);\n        }\n      }).then(json => done(json.ticker)).catch(error => console.error(`Sorry, We couldn't get the Price. Error: ` + error));\n    }\n  });\n};\n\ngetPrice.getBasePrice = (base, crypto) => {\n  return new Promise((done, err) => {\n    if (typeof base === 'undefined' && typeof crypto === 'undefined') {\n      err('You forgot to provide Base / Cryptic Currency Name');\n    } else {\n      let cApi = api + base + '-' + crypto;\n      fetch(cApi).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          err(`Sorry, We couldn't get the Price. Bad response code : ` + response.status);\n        }\n      }).then(json => done(json.ticker)).catch(error => console.error(`Sorry, We couldn't get the Price. Error: ` + error));\n    }\n  });\n};\n\nmodule.exports = getPrice;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/crypto-price/lib/price.js"],"names":["api","getPrice","Promise","done","err","getCryptoPrice","base","crypto","cApi","fetch","then","response","status","json","ticker","catch","error","console","getBasePrice","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAG,yCAAV;;AAEA,SAASC,QAAT,GAAoB;AACnB,SAAO,IAAIC,OAAJ,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AACjCA,IAAAA,GAAG,CAAC,mEAAD,CAAH;AACA,GAFM,CAAP;AAGA;;AAEDH,QAAQ,CAACI,cAAT,GAA2B,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC5C,SAAO,IAAIL,OAAJ,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AACjC,QAAG,OAAOE,IAAP,KAAgB,WAAhB,IAA+B,OAAOC,MAAP,KAAkB,WAApD,EAAiE;AAChEH,MAAAA,GAAG,CAAE,oDAAF,CAAH;AACA,KAFD,MAEO;AACN,UAAII,IAAI,GAAGR,GAAG,GAAGO,MAAN,GAAe,GAAf,GAAqBD,IAAhC;AACAG,MAAAA,KAAK,CAACD,IAAD,CAAL,CACEE,IADF,CACOC,QAAQ,IAAI;AACjB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC5B,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACA,SAFD,MAEO;AACNT,UAAAA,GAAG,CAAE,wDAAD,GAA2DO,QAAQ,CAACC,MAArE,CAAH;AACA;AACD,OAPF,EAQEF,IARF,CAQOG,IAAI,IAAIV,IAAI,CAACU,IAAI,CAACC,MAAN,CARnB,EASEC,KATF,CASQC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAe,2CAAD,GAA8CA,KAA5D,CATjB;AAUA;AACD,GAhBM,CAAP;AAiBA,CAlBD;;AAoBAf,QAAQ,CAACiB,YAAT,GAAyB,CAACZ,IAAD,EAAOC,MAAP,KAAkB;AAC1C,SAAO,IAAIL,OAAJ,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AACjC,QAAG,OAAOE,IAAP,KAAgB,WAAhB,IAA+B,OAAOC,MAAP,KAAkB,WAApD,EAAiE;AAChEH,MAAAA,GAAG,CAAC,oDAAD,CAAH;AACA,KAFD,MAEO;AACN,UAAII,IAAI,GAAGR,GAAG,GAAGM,IAAN,GAAa,GAAb,GAAmBC,MAA9B;AACAE,MAAAA,KAAK,CAACD,IAAD,CAAL,CACEE,IADF,CACOC,QAAQ,IAAI;AACjB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC5B,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACA,SAFD,MAEO;AACNT,UAAAA,GAAG,CAAE,wDAAD,GAA2DO,QAAQ,CAACC,MAArE,CAAH;AACA;AACD,OAPF,EAQEF,IARF,CAQOG,IAAI,IAAIV,IAAI,CAACU,IAAI,CAACC,MAAN,CARnB,EASEC,KATF,CASQC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAe,2CAAD,GAA8CA,KAA5D,CATjB;AAUA;AACD,GAhBM,CAAP;AAiBA,CAlBD;;AAoBAG,MAAM,CAACC,OAAP,GAAiBnB,QAAjB","sourcesContent":["let api = 'https://api.cryptonator.com/api/ticker/'\n\nfunction getPrice() {\n\treturn new Promise((done, err) => {\n\t\terr('Use One of Our Methods, Please Check API for reference on Methods')\n\t})\n}\n\ngetPrice.getCryptoPrice = ((base, crypto) => {\n\treturn new Promise((done, err) => {\n\t\tif(typeof base === 'undefined' && typeof crypto === 'undefined') {\n\t\t\terr(`You forgot to provide Base / Cryptic Currency Name`)\n\t\t} else {\n\t\t\tlet cApi = api + crypto + '-' + base\n\t\t\tfetch(cApi)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\treturn response.json()\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr(`Sorry, We couldn't get the Price. Bad response code : ` + response.status)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(json => done(json.ticker))\n\t\t\t\t.catch(error => console.error(`Sorry, We couldn't get the Price. Error: ` + error))\n\t\t}\n\t})\n})\n\ngetPrice.getBasePrice = ((base, crypto) => {\n\treturn new Promise((done, err) => {\n\t\tif(typeof base === 'undefined' && typeof crypto === 'undefined') {\n\t\t\terr('You forgot to provide Base / Cryptic Currency Name')\n\t\t} else {\n\t\t\tlet cApi = api + base + '-' + crypto\n\t\t\tfetch(cApi)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\treturn response.json()\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr(`Sorry, We couldn't get the Price. Bad response code : ` + response.status)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(json => done(json.ticker))\n\t\t\t\t.catch(error => console.error(`Sorry, We couldn't get the Price. Error: ` + error))\n\t\t}\n\t})\n})\n\nmodule.exports = getPrice"]},"metadata":{},"sourceType":"script"}