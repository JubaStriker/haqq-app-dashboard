{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountInfoQuery from \"./AccountInfoQuery.js\";\nimport KeyList from \"../KeyList.js\";\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"./AccountId.js\").default} AccountId\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\nexport default class AccountInfoFlow {\n  /**\n   * @param {Client} client\n   * @param {AccountId | string} accountId\n   * @param {Uint8Array} message\n   * @param {Uint8Array} signature\n   * @returns {Promise<boolean>}\n   */\n  static async verifySignature(client, accountId, message, signature) {\n    const info = await new AccountInfoQuery().setAccountId(accountId).execute(client);\n\n    if (info.key instanceof KeyList) {\n      return false;\n    }\n\n    return (\n      /** @type {PublicKey} */\n      info.key.verify(message, signature)\n    );\n  }\n  /**\n   * @param {Client} client\n   * @param {AccountId | string} accountId\n   * @param {Transaction} transaction\n   * @returns {Promise<boolean>}\n   */\n\n\n  static async verifyTransaction(client, accountId, transaction) {\n    const info = await new AccountInfoQuery().setAccountId(accountId).execute(client);\n\n    if (info.key instanceof KeyList) {\n      return false;\n    }\n\n    return (\n      /** @type {PublicKey} */\n      info.key.verifyTransaction(transaction)\n    );\n  }\n  /**\n   * @param {Signer} signer\n   * @param {AccountId | string} accountId\n   * @param {Uint8Array} message\n   * @param {Uint8Array} signature\n   * @returns {Promise<boolean>}\n   */\n\n\n  static async verifySignatureWithSigner(signer, accountId, message, signature) {\n    const info = await new AccountInfoQuery().setAccountId(accountId).executeWithSigner(signer);\n\n    if (info.key instanceof KeyList) {\n      return false;\n    }\n\n    return (\n      /** @type {PublicKey} */\n      info.key.verify(message, signature)\n    );\n  }\n  /**\n   * @param {Signer} signer\n   * @param {AccountId | string} accountId\n   * @param {Transaction} transaction\n   * @returns {Promise<boolean>}\n   */\n\n\n  static async verifyTransactionWithSigner(signer, accountId, transaction) {\n    const info = await new AccountInfoQuery().setAccountId(accountId).executeWithSigner(signer);\n\n    if (info.key instanceof KeyList) {\n      return false;\n    }\n\n    return (\n      /** @type {PublicKey} */\n      info.key.verifyTransaction(transaction)\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/AccountInfoFlow.js"],"names":["AccountInfoQuery","KeyList","AccountInfoFlow","verifySignature","client","accountId","message","signature","info","setAccountId","execute","key","verify","verifyTransaction","transaction","verifySignatureWithSigner","signer","executeWithSigner","verifyTransactionWithSigner"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,eAAN,CAAsB;AACjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACgC,eAAfC,eAAe,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwC;AAChE,UAAMC,IAAI,GAAG,MAAM,IAAIR,gBAAJ,GACdS,YADc,CACDJ,SADC,EAEdK,OAFc,CAENN,MAFM,CAAnB;;AAIA,QAAII,IAAI,CAACG,GAAL,YAAoBV,OAAxB,EAAiC;AAC7B,aAAO,KAAP;AACH;;AAED;AAAO;AAA0BO,MAAAA,IAAI,CAACG,GAAN,CAAWC,MAAX,CAAkBN,OAAlB,EAA2BC,SAA3B;AAAhC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACkC,eAAjBM,iBAAiB,CAACT,MAAD,EAASC,SAAT,EAAoBS,WAApB,EAAiC;AAC3D,UAAMN,IAAI,GAAG,MAAM,IAAIR,gBAAJ,GACdS,YADc,CACDJ,SADC,EAEdK,OAFc,CAENN,MAFM,CAAnB;;AAIA,QAAII,IAAI,CAACG,GAAL,YAAoBV,OAAxB,EAAiC;AAC7B,aAAO,KAAP;AACH;;AAED;AAAO;AAA0BO,MAAAA,IAAI,CAACG,GAAN,CAAWE,iBAAX,CAC5BC,WAD4B;AAAhC;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC0C,eAAzBC,yBAAyB,CAClCC,MADkC,EAElCX,SAFkC,EAGlCC,OAHkC,EAIlCC,SAJkC,EAKpC;AACE,UAAMC,IAAI,GAAG,MAAM,IAAIR,gBAAJ,GACdS,YADc,CACDJ,SADC,EAEdY,iBAFc,CAEID,MAFJ,CAAnB;;AAIA,QAAIR,IAAI,CAACG,GAAL,YAAoBV,OAAxB,EAAiC;AAC7B,aAAO,KAAP;AACH;;AAED;AAAO;AAA0BO,MAAAA,IAAI,CAACG,GAAN,CAAWC,MAAX,CAAkBN,OAAlB,EAA2BC,SAA3B;AAAhC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC4C,eAA3BW,2BAA2B,CAACF,MAAD,EAASX,SAAT,EAAoBS,WAApB,EAAiC;AACrE,UAAMN,IAAI,GAAG,MAAM,IAAIR,gBAAJ,GACdS,YADc,CACDJ,SADC,EAEdY,iBAFc,CAEID,MAFJ,CAAnB;;AAIA,QAAIR,IAAI,CAACG,GAAL,YAAoBV,OAAxB,EAAiC;AAC7B,aAAO,KAAP;AACH;;AAED;AAAO;AAA0BO,MAAAA,IAAI,CAACG,GAAN,CAAWE,iBAAX,CAC5BC,WAD4B;AAAhC;AAGH;;AAlFgC","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountInfoQuery from \"./AccountInfoQuery.js\";\nimport KeyList from \"../KeyList.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"./AccountId.js\").default} AccountId\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\nexport default class AccountInfoFlow {\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignature(client, accountId, message, signature) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransaction(client, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction\n        );\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignatureWithSigner(\n        signer,\n        accountId,\n        message,\n        signature\n    ) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransactionWithSigner(signer, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}