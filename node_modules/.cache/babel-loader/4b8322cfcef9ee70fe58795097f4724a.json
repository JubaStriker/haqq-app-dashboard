{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Hbar from \"../Hbar.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IContractCallTransactionBody} HashgraphProto.proto.IContractCallTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HashgraphProto.proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").proto.IFileID} HashgraphProto.proto.IFileID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {string} name\n * @property {ContractFunctionParameters} parameters\n */\n\nexport default class ContractExecuteTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {ContractId | string} [props.contractId]\n   * @param {number | Long} [props.gas]\n   * @param {number | string | Long | BigNumber | Hbar} [props.amount]\n   * @param {Uint8Array} [props.functionParameters]\n   * @param {FunctionParameters} [props.function]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?ContractId}\n     */\n\n    this._contractId = null;\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n    this._gas = null;\n    /**\n     * @private\n     * @type {?Hbar}\n     */\n\n    this._amount = null;\n    /**\n     * @private\n     * @type {?Uint8Array}\n     */\n\n    this._functionParameters = null;\n\n    if (props.contractId != null) {\n      this.setContractId(props.contractId);\n    }\n\n    if (props.gas != null) {\n      this.setGas(props.gas);\n    }\n\n    if (props.amount != null) {\n      this.setPayableAmount(props.amount);\n    }\n\n    if (props.functionParameters != null) {\n      this.setFunctionParameters(props.functionParameters);\n    } else if (props.function != null) {\n      this.setFunction(props.function.name, props.function.parameters);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {ContractExecuteTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const call =\n    /** @type {HashgraphProto.proto.IContractCallTransactionBody} */\n    body.contractCall;\n    return Transaction._fromProtobufTransactions(new ContractExecuteTransaction({\n      contractId: call.contractID != null ? ContractId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IContractID} */\n      call.contractID) : undefined,\n      gas: call.gas != null ? call.gas : undefined,\n      amount: call.amount != null ? Hbar.fromTinybars(call.amount) : undefined,\n      functionParameters: call.functionParameters != null ? call.functionParameters : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?ContractId}\n   */\n\n\n  get contractId() {\n    return this._contractId;\n  }\n  /**\n   * Sets the contract ID which is being executed in this transaction.\n   *\n   * @param {ContractId | string} contractId\n   * @returns {ContractExecuteTransaction}\n   */\n\n\n  setContractId(contractId) {\n    this._requireNotFrozen();\n\n    this._contractId = typeof contractId === \"string\" ? ContractId.fromString(contractId) : contractId.clone();\n    return this;\n  }\n  /**\n   * @returns {?Long}\n   */\n\n\n  get gas() {\n    return this._gas;\n  }\n  /**\n   * Sets the contract ID which is being executed in this transaction.\n   *\n   * @param {number | Long} gas\n   * @returns {ContractExecuteTransaction}\n   */\n\n\n  setGas(gas) {\n    this._requireNotFrozen();\n\n    this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n    return this;\n  }\n  /**\n   * @returns {?Hbar}\n   */\n\n\n  get payableAmount() {\n    return this._amount;\n  }\n  /**\n   * Sets the contract ID which is being executed in this transaction.\n   *\n   * @param {number | string | Long | BigNumber | Hbar} amount\n   * @returns {ContractExecuteTransaction}\n   */\n\n\n  setPayableAmount(amount) {\n    this._requireNotFrozen();\n\n    this._amount = amount instanceof Hbar ? amount : new Hbar(amount);\n    return this;\n  }\n  /**\n   * @returns {?Uint8Array}\n   */\n\n\n  get functionParameters() {\n    return this._functionParameters;\n  }\n  /**\n   * @param {Uint8Array} functionParameters\n   * @returns {this}\n   */\n\n\n  setFunctionParameters(functionParameters) {\n    this._requireNotFrozen();\n\n    this._functionParameters = functionParameters;\n    return this;\n  }\n  /**\n   * @param {string} name\n   * @param {ContractFunctionParameters} [functionParameters]\n   * @returns {this}\n   */\n\n\n  setFunction(name, functionParameters) {\n    this._requireNotFrozen();\n\n    this._functionParameters = functionParameters != null ? functionParameters._build(name) : new ContractFunctionParameters()._build(name);\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._contractId != null) {\n      this._contractId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.smartContract.contractCallMethod(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"contractCall\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.IContractCallTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      contractID: this._contractId != null ? this._contractId._toProtobuf() : null,\n      gas: this._gas,\n      amount: this._amount != null ? this._amount.toTinybars() : null,\n      functionParameters: this._functionParameters\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `ContractExecuteTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"contractCall\", // eslint-disable-next-line @typescript-eslint/unbound-method\nContractExecuteTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/contract/ContractExecuteTransaction.js"],"names":["Hbar","Transaction","TRANSACTION_REGISTRY","ContractId","ContractFunctionParameters","Long","ContractExecuteTransaction","constructor","props","_contractId","_gas","_amount","_functionParameters","contractId","setContractId","gas","setGas","amount","setPayableAmount","functionParameters","setFunctionParameters","function","setFunction","name","parameters","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","call","contractCall","_fromProtobufTransactions","contractID","undefined","fromTinybars","_requireNotFrozen","fromString","clone","fromValue","payableAmount","_build","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","contractCallMethod","_getTransactionDataCase","_makeTransactionData","_toProtobuf","toTinybars","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,WAAP,IACIC,oBADJ,QAEO,+BAFP;AAGA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,0BAAP,MAAuC,iCAAvC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,0BAAN,SAAyCL,WAAzC,CAAqD;AAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIM,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACpB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,IAAnB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,IAAZ;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,OAAL,GAAe,IAAf;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,mBAAL,GAA2B,IAA3B;;AAEA,QAAIJ,KAAK,CAACK,UAAN,IAAoB,IAAxB,EAA8B;AAC1B,WAAKC,aAAL,CAAmBN,KAAK,CAACK,UAAzB;AACH;;AAED,QAAIL,KAAK,CAACO,GAAN,IAAa,IAAjB,EAAuB;AACnB,WAAKC,MAAL,CAAYR,KAAK,CAACO,GAAlB;AACH;;AAED,QAAIP,KAAK,CAACS,MAAN,IAAgB,IAApB,EAA0B;AACtB,WAAKC,gBAAL,CAAsBV,KAAK,CAACS,MAA5B;AACH;;AAED,QAAIT,KAAK,CAACW,kBAAN,IAA4B,IAAhC,EAAsC;AAClC,WAAKC,qBAAL,CAA2BZ,KAAK,CAACW,kBAAjC;AACH,KAFD,MAEO,IAAIX,KAAK,CAACa,QAAN,IAAkB,IAAtB,EAA4B;AAC/B,WAAKC,WAAL,CAAiBd,KAAK,CAACa,QAAN,CAAeE,IAAhC,EAAsCf,KAAK,CAACa,QAAN,CAAeG,UAArD;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAChBC,YADgB,EAEhBC,kBAFgB,EAGhBC,cAHgB,EAIhBC,OAJgB,EAKhBC,MALgB,EAMlB;AACE,UAAMC,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACA,UAAME,IAAI;AACN;AACID,IAAAA,IAAI,CAACE,YAFb;AAKA,WAAOhC,WAAW,CAACiC,yBAAZ,CACH,IAAI5B,0BAAJ,CAA+B;AAC3BO,MAAAA,UAAU,EACNmB,IAAI,CAACG,UAAL,IAAmB,IAAnB,GACMhC,UAAU,CAACsB,aAAX;AACI;AACIO,MAAAA,IAAI,CAACG,UAFb,CADN,GAMMC,SARiB;AAS3BrB,MAAAA,GAAG,EAAEiB,IAAI,CAACjB,GAAL,IAAY,IAAZ,GAAmBiB,IAAI,CAACjB,GAAxB,GAA8BqB,SATR;AAU3BnB,MAAAA,MAAM,EACFe,IAAI,CAACf,MAAL,IAAe,IAAf,GACMjB,IAAI,CAACqC,YAAL,CAAkBL,IAAI,CAACf,MAAvB,CADN,GAEMmB,SAbiB;AAc3BjB,MAAAA,kBAAkB,EACda,IAAI,CAACb,kBAAL,IAA2B,IAA3B,GACMa,IAAI,CAACb,kBADX,GAEMiB;AAjBiB,KAA/B,CADG,EAoBHV,YApBG,EAqBHC,kBArBG,EAsBHC,cAtBG,EAuBHC,OAvBG,EAwBHC,MAxBG,CAAP;AA0BH;AAED;AACJ;AACA;;;AACkB,MAAVjB,UAAU,GAAG;AACb,WAAO,KAAKJ,WAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,aAAa,CAACD,UAAD,EAAa;AACtB,SAAKyB,iBAAL;;AACA,SAAK7B,WAAL,GACI,OAAOI,UAAP,KAAsB,QAAtB,GACMV,UAAU,CAACoC,UAAX,CAAsB1B,UAAtB,CADN,GAEMA,UAAU,CAAC2B,KAAX,EAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACW,MAAHzB,GAAG,GAAG;AACN,WAAO,KAAKL,IAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,MAAM,CAACD,GAAD,EAAM;AACR,SAAKuB,iBAAL;;AACA,SAAK5B,IAAL,GAAYK,GAAG,YAAYV,IAAf,GAAsBU,GAAtB,GAA4BV,IAAI,CAACoC,SAAL,CAAe1B,GAAf,CAAxC;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACqB,MAAb2B,aAAa,GAAG;AAChB,WAAO,KAAK/B,OAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,gBAAgB,CAACD,MAAD,EAAS;AACrB,SAAKqB,iBAAL;;AACA,SAAK3B,OAAL,GAAeM,MAAM,YAAYjB,IAAlB,GAAyBiB,MAAzB,GAAkC,IAAIjB,IAAJ,CAASiB,MAAT,CAAjD;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AAC0B,MAAlBE,kBAAkB,GAAG;AACrB,WAAO,KAAKP,mBAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIQ,EAAAA,qBAAqB,CAACD,kBAAD,EAAqB;AACtC,SAAKmB,iBAAL;;AACA,SAAK1B,mBAAL,GAA2BO,kBAA3B;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,CAACC,IAAD,EAAOJ,kBAAP,EAA2B;AAClC,SAAKmB,iBAAL;;AACA,SAAK1B,mBAAL,GACIO,kBAAkB,IAAI,IAAtB,GACMA,kBAAkB,CAACwB,MAAnB,CAA0BpB,IAA1B,CADN,GAEM,IAAInB,0BAAJ,GAAiCuC,MAAjC,CAAwCpB,IAAxC,CAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACIqB,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,QAAI,KAAKpC,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,WAAKA,WAAL,CAAiBqC,gBAAjB,CAAkCD,MAAlC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACvB,WAAOD,OAAO,CAACE,aAAR,CAAsBC,kBAAtB,CAAyCF,OAAzC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,uBAAuB,GAAG;AACtB,WAAO,cAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,oBAAoB,GAAG;AACnB,WAAO;AACHlB,MAAAA,UAAU,EACN,KAAK1B,WAAL,IAAoB,IAApB,GACM,KAAKA,WAAL,CAAiB6C,WAAjB,EADN,GAEM,IAJP;AAKHvC,MAAAA,GAAG,EAAE,KAAKL,IALP;AAMHO,MAAAA,MAAM,EAAE,KAAKN,OAAL,IAAgB,IAAhB,GAAuB,KAAKA,OAAL,CAAa4C,UAAb,EAAvB,GAAmD,IANxD;AAOHpC,MAAAA,kBAAkB,EAAE,KAAKP;AAPtB,KAAP;AASH;AAED;AACJ;AACA;;;AACI4C,EAAAA,SAAS,GAAG;AACR,UAAMC,SAAS;AAAG;AACd,SAAKC,eAAL,CAAqBC,OAArB,CAA6BC,UADjC;AAGA,WAAQ,8BAA6BH,SAAS,CAACI,QAAV,EAAqB,EAA1D;AACH;;AA/P+D;AAkQpE3D,oBAAoB,CAAC4D,GAArB,CACI,cADJ,EAEI;AACAxD,0BAA0B,CAACmB,aAH/B","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IContractCallTransactionBody} HashgraphProto.proto.IContractCallTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HashgraphProto.proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").proto.IFileID} HashgraphProto.proto.IFileID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {string} name\n * @property {ContractFunctionParameters} parameters\n */\n\nexport default class ContractExecuteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {number | Long} [props.gas]\n     * @param {number | string | Long | BigNumber | Hbar} [props.amount]\n     * @param {Uint8Array} [props.functionParameters]\n     * @param {FunctionParameters} [props.function]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._functionParameters = null;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        if (props.amount != null) {\n            this.setPayableAmount(props.amount);\n        }\n\n        if (props.functionParameters != null) {\n            this.setFunctionParameters(props.functionParameters);\n        } else if (props.function != null) {\n            this.setFunction(props.function.name, props.function.parameters);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {ContractExecuteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const call =\n            /** @type {HashgraphProto.proto.IContractCallTransactionBody} */ (\n                body.contractCall\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new ContractExecuteTransaction({\n                contractId:\n                    call.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {HashgraphProto.proto.IContractID} */ (\n                                  call.contractID\n                              )\n                          )\n                        : undefined,\n                gas: call.gas != null ? call.gas : undefined,\n                amount:\n                    call.amount != null\n                        ? Hbar.fromTinybars(call.amount)\n                        : undefined,\n                functionParameters:\n                    call.functionParameters != null\n                        ? call.functionParameters\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractExecuteTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {number | Long} gas\n     * @returns {ContractExecuteTransaction}\n     */\n    setGas(gas) {\n        this._requireNotFrozen();\n        this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get payableAmount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} amount\n     * @returns {ContractExecuteTransaction}\n     */\n    setPayableAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Hbar ? amount : new Hbar(amount);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get functionParameters() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @param {Uint8Array} functionParameters\n     * @returns {this}\n     */\n    setFunctionParameters(functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters = functionParameters;\n\n        return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {ContractFunctionParameters} [functionParameters]\n     * @returns {this}\n     */\n    setFunction(name, functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters =\n            functionParameters != null\n                ? functionParameters._build(name)\n                : new ContractFunctionParameters()._build(name);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractCallMethod(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractCall\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.IContractCallTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            gas: this._gas,\n            amount: this._amount != null ? this._amount.toTinybars() : null,\n            functionParameters: this._functionParameters,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ContractExecuteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractCall\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractExecuteTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}