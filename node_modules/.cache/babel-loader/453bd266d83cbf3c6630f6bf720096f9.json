{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\n\nexport default class TokenTransfer {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {TokenId | string} props.tokenId\n   * @param {AccountId | string} props.accountId\n   * @param {number | null} props.expectedDecimals\n   * @param {Long | number} props.amount\n   * @param {boolean} props.isApproved\n   */\n  constructor(props) {\n    /**\n     * The Token ID that sends or receives cryptocurrency.\n     *\n     * @readonly\n     */\n    this.tokenId = props.tokenId instanceof TokenId ? props.tokenId : TokenId.fromString(props.tokenId);\n    /**\n     * The Account ID that sends or receives cryptocurrency.\n     *\n     * @readonly\n     */\n\n    this.accountId = props.accountId instanceof AccountId ? props.accountId : AccountId.fromString(props.accountId);\n    this.expectedDecimals = props.expectedDecimals;\n    this.amount = Long.fromValue(props.amount);\n    this.isApproved = props.isApproved;\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITokenTransferList[]} tokenTransfers\n   * @returns {TokenTransfer[]}\n   */\n\n\n  static _fromProtobuf(tokenTransfers) {\n    const transfers = [];\n\n    for (const tokenTransfer of tokenTransfers) {\n      const tokenId = TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      tokenTransfer.token);\n\n      const expectedDecimals = tokenTransfer.expectedDecimals != null ?\n      /** @type {number | null } */\n      tokenTransfer.expectedDecimals.value : null;\n\n      for (const transfer of tokenTransfer.transfers != null ? tokenTransfer.transfers : []) {\n        transfers.push(new TokenTransfer({\n          tokenId,\n          accountId: AccountId._fromProtobuf(\n          /** @type {HashgraphProto.proto.IAccountID} */\n          transfer.accountID),\n          expectedDecimals,\n          amount: transfer.amount != null ? transfer.amount : Long.ZERO,\n          isApproved: transfer.isApproval == true\n        }));\n      }\n    }\n\n    return transfers;\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.IAccountAmount}\n   */\n\n\n  _toProtobuf() {\n    return {\n      accountID: this.accountId._toProtobuf(),\n      amount: this.amount,\n      isApproval: this.isApproved\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/token/TokenTransfer.js"],"names":["Long","AccountId","TokenId","TokenTransfer","constructor","props","tokenId","fromString","accountId","expectedDecimals","amount","fromValue","isApproved","_fromProtobuf","tokenTransfers","transfers","tokenTransfer","token","value","transfer","push","accountID","ZERO","isApproval","_toProtobuf"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,CAAoB;AAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,OAAL,GACID,KAAK,CAACC,OAAN,YAAyBJ,OAAzB,GACMG,KAAK,CAACC,OADZ,GAEMJ,OAAO,CAACK,UAAR,CAAmBF,KAAK,CAACC,OAAzB,CAHV;AAKA;AACR;AACA;AACA;AACA;;AACQ,SAAKE,SAAL,GACIH,KAAK,CAACG,SAAN,YAA2BP,SAA3B,GACMI,KAAK,CAACG,SADZ,GAEMP,SAAS,CAACM,UAAV,CAAqBF,KAAK,CAACG,SAA3B,CAHV;AAKA,SAAKC,gBAAL,GAAwBJ,KAAK,CAACI,gBAA9B;AACA,SAAKC,MAAL,GAAcV,IAAI,CAACW,SAAL,CAAeN,KAAK,CAACK,MAArB,CAAd;AACA,SAAKE,UAAL,GAAkBP,KAAK,CAACO,UAAxB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,cAAD,EAAiB;AACjC,UAAMC,SAAS,GAAG,EAAlB;;AAEA,SAAK,MAAMC,aAAX,IAA4BF,cAA5B,EAA4C;AACxC,YAAMR,OAAO,GAAGJ,OAAO,CAACW,aAAR;AACZ;AACIG,MAAAA,aAAa,CAACC,KAFN,CAAhB;;AAKA,YAAMR,gBAAgB,GAClBO,aAAa,CAACP,gBAAd,IAAkC,IAAlC;AACM;AACIO,MAAAA,aAAa,CAACP,gBAAd,CAA+BS,KAFzC,GAIM,IALV;;AAOA,WAAK,MAAMC,QAAX,IAAuBH,aAAa,CAACD,SAAd,IAA2B,IAA3B,GACjBC,aAAa,CAACD,SADG,GAEjB,EAFN,EAEU;AACNA,QAAAA,SAAS,CAACK,IAAV,CACI,IAAIjB,aAAJ,CAAkB;AACdG,UAAAA,OADc;AAEdE,UAAAA,SAAS,EAAEP,SAAS,CAACY,aAAV;AACP;AACIM,UAAAA,QAAQ,CAACE,SAFN,CAFG;AAOdZ,UAAAA,gBAPc;AAQdC,UAAAA,MAAM,EACFS,QAAQ,CAACT,MAAT,IAAmB,IAAnB,GACMS,QAAQ,CAACT,MADf,GAEMV,IAAI,CAACsB,IAXD;AAYdV,UAAAA,UAAU,EAAEO,QAAQ,CAACI,UAAT,IAAuB;AAZrB,SAAlB,CADJ;AAgBH;AACJ;;AAED,WAAOR,SAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIS,EAAAA,WAAW,GAAG;AACV,WAAO;AACHH,MAAAA,SAAS,EAAE,KAAKb,SAAL,CAAegB,WAAf,EADR;AAEHd,MAAAA,MAAM,EAAE,KAAKA,MAFV;AAGHa,MAAAA,UAAU,EAAE,KAAKX;AAHd,KAAP;AAKH;;AA5F8B","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\nexport default class TokenTransfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId | string} props.tokenId\n     * @param {AccountId | string} props.accountId\n     * @param {number | null} props.expectedDecimals\n     * @param {Long | number} props.amount\n     * @param {boolean} props.isApproved\n     */\n    constructor(props) {\n        /**\n         * The Token ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.tokenId =\n            props.tokenId instanceof TokenId\n                ? props.tokenId\n                : TokenId.fromString(props.tokenId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId =\n            props.accountId instanceof AccountId\n                ? props.accountId\n                : AccountId.fromString(props.accountId);\n\n        this.expectedDecimals = props.expectedDecimals;\n        this.amount = Long.fromValue(props.amount);\n        this.isApproved = props.isApproved;\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITokenTransferList[]} tokenTransfers\n     * @returns {TokenTransfer[]}\n     */\n    static _fromProtobuf(tokenTransfers) {\n        const transfers = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (\n                    tokenTransfer.token\n                )\n            );\n            const expectedDecimals =\n                tokenTransfer.expectedDecimals != null\n                    ? /** @type {number | null } */ (\n                          tokenTransfer.expectedDecimals.value\n                      )\n                    : null;\n\n            for (const transfer of tokenTransfer.transfers != null\n                ? tokenTransfer.transfers\n                : []) {\n                transfers.push(\n                    new TokenTransfer({\n                        tokenId,\n                        accountId: AccountId._fromProtobuf(\n                            /** @type {HashgraphProto.proto.IAccountID} */ (\n                                transfer.accountID\n                            )\n                        ),\n                        expectedDecimals,\n                        amount:\n                            transfer.amount != null\n                                ? transfer.amount\n                                : Long.ZERO,\n                        isApproved: transfer.isApproval == true,\n                    })\n                );\n            }\n        }\n\n        return transfers;\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IAccountAmount}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount,\n            isApproval: this.isApproved,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}