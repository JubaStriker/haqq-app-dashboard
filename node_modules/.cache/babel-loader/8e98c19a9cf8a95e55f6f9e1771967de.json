{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Hbar from \"../Hbar.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, { DEFAULT_AUTO_RENEW_PERIOD, DEFAULT_RECORD_THRESHOLD, TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Duration from \"../Duration.js\";\nimport Long from \"long\";\nimport Key from \"../Key.js\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n */\n\n/**\n * Create a new Hedera™ crypto-currency account.\n */\n\nexport default class AccountCreateTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Key} [props.key]\n   * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]\n   * @param {boolean} [props.receiverSignatureRequired]\n   * @param {AccountId} [props.proxyAccountId]\n   * @param {Duration | Long | number} [props.autoRenewPeriod]\n   * @param {string} [props.accountMemo]\n   * @param {Long | number} [props.maxAutomaticTokenAssociations]\n   * @param {AccountId | string} [props.stakedAccountId]\n   * @param {Long | number} [props.stakedNodeId]\n   * @param {boolean} [props.declineStakingReward]\n   * @param {PublicKey} [props.aliasKey]\n   * @param {EvmAddress} [props.aliasEvmAddress]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Key}\n     */\n\n    this._key = null;\n    /**\n     * @private\n     * @type {?Hbar}\n     */\n\n    this._initialBalance = null;\n    /**\n     * @private\n     * @type {Hbar}\n     */\n\n    this._sendRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n    /**\n     * @private\n     * @type {Hbar}\n     */\n\n    this._receiveRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this._receiverSignatureRequired = false;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._proxyAccountId = null;\n    /**\n     * @private\n     * @type {Duration}\n     */\n\n    this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this._accountMemo = null;\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n    this._maxAutomaticTokenAssociations = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._stakedAccountId = null;\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n    this._stakedNodeId = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this._declineStakingReward = false;\n    /**\n     * @private\n     * @type {?PublicKey}\n     */\n\n    this._aliasKey = null;\n    /**\n     * @private\n     * @type {?EvmAddress}\n     */\n\n    this._aliasEvmAddress = null;\n\n    if (props.key != null) {\n      this.setKey(props.key);\n    }\n\n    if (props.receiverSignatureRequired != null) {\n      this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n    }\n\n    if (props.initialBalance != null) {\n      this.setInitialBalance(props.initialBalance);\n    }\n\n    if (props.proxyAccountId != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setProxyAccountId(props.proxyAccountId);\n    }\n\n    if (props.autoRenewPeriod != null) {\n      this.setAutoRenewPeriod(props.autoRenewPeriod);\n    }\n\n    if (props.accountMemo != null) {\n      this.setAccountMemo(props.accountMemo);\n    }\n\n    if (props.maxAutomaticTokenAssociations != null) {\n      this.setMaxAutomaticTokenAssociations(props.maxAutomaticTokenAssociations);\n    }\n\n    if (props.stakedAccountId != null) {\n      this.setStakedAccountId(props.stakedAccountId);\n    }\n\n    if (props.stakedNodeId != null) {\n      this.setStakedNodeId(props.stakedNodeId);\n    }\n\n    if (props.declineStakingReward != null) {\n      this.setDeclineStakingReward(props.declineStakingReward);\n    }\n\n    if (props.aliasKey != null) {\n      this.setAliasKey(props.aliasKey);\n    }\n\n    if (props.aliasEvmAddress != null) {\n      this.setAliasEvmAddress(props.aliasEvmAddress);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {AccountCreateTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const create =\n    /** @type {HashgraphProto.proto.ICryptoCreateTransactionBody} */\n    body.cryptoCreateAccount;\n    return Transaction._fromProtobufTransactions(new AccountCreateTransaction({\n      key: create.key != null ? Key._fromProtobufKey(create.key) : undefined,\n      initialBalance: create.initialBalance != null ? create.initialBalance : undefined,\n      receiverSignatureRequired: create.receiverSigRequired != null ? create.receiverSigRequired : undefined,\n      proxyAccountId: create.proxyAccountID != null ? AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      create.proxyAccountID) : undefined,\n      autoRenewPeriod: create.autoRenewPeriod != null ? create.autoRenewPeriod.seconds != null ? create.autoRenewPeriod.seconds : undefined : undefined,\n      accountMemo: create.memo != null ? create.memo : undefined,\n      maxAutomaticTokenAssociations: create.maxAutomaticTokenAssociations != null ? create.maxAutomaticTokenAssociations : undefined,\n      stakedAccountId: create.stakedAccountId != null ? AccountId._fromProtobuf(create.stakedAccountId) : undefined,\n      stakedNodeId: create.stakedNodeId != null ? create.stakedNodeId : undefined,\n      declineStakingReward: create.declineReward == true\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?Key}\n   */\n\n\n  get key() {\n    return this._key;\n  }\n  /**\n   * Set the key for this account.\n   *\n   * This is the key that must sign each transfer out of the account.\n   *\n   * If `receiverSignatureRequired` is true, then the key must also sign\n   * any transfer into the account.\n   *\n   * @param {Key} key\n   * @returns {this}\n   */\n\n\n  setKey(key) {\n    this._requireNotFrozen();\n\n    this._key = key;\n    return this;\n  }\n  /**\n   * @returns {?Hbar}\n   */\n\n\n  get initialBalance() {\n    return this._initialBalance;\n  }\n  /**\n   * Set the initial amount to transfer into this account.\n   *\n   * @param {number | string | Long | BigNumber | Hbar} initialBalance\n   * @returns {this}\n   */\n\n\n  setInitialBalance(initialBalance) {\n    this._requireNotFrozen();\n\n    this._initialBalance = initialBalance instanceof Hbar ? initialBalance : new Hbar(initialBalance);\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get receiverSignatureRequired() {\n    return this._receiverSignatureRequired;\n  }\n  /**\n   * Set to true to require the key for this account to sign any transfer of\n   * hbars to this account.\n   *\n   * @param {boolean} receiverSignatureRequired\n   * @returns {this}\n   */\n\n\n  setReceiverSignatureRequired(receiverSignatureRequired) {\n    this._requireNotFrozen();\n\n    this._receiverSignatureRequired = receiverSignatureRequired;\n    return this;\n  }\n  /**\n   * @deprecated\n   * @returns {?AccountId}\n   */\n\n\n  get proxyAccountId() {\n    return this._proxyAccountId;\n  }\n  /**\n   * @deprecated\n   *\n   * Set the ID of the account to which this account is proxy staked.\n   * @param {AccountId} proxyAccountId\n   * @returns {this}\n   */\n\n\n  setProxyAccountId(proxyAccountId) {\n    this._requireNotFrozen();\n\n    this._proxyAccountId = proxyAccountId;\n    return this;\n  }\n  /**\n   * @returns {Duration}\n   */\n\n\n  get autoRenewPeriod() {\n    return this._autoRenewPeriod;\n  }\n  /**\n   * Set the auto renew period for this account.\n   *\n   * @param {Duration | Long | number} autoRenewPeriod\n   * @returns {this}\n   */\n\n\n  setAutoRenewPeriod(autoRenewPeriod) {\n    this._requireNotFrozen();\n\n    this._autoRenewPeriod = autoRenewPeriod instanceof Duration ? autoRenewPeriod : new Duration(autoRenewPeriod);\n    return this;\n  }\n  /**\n   * @returns {?string}\n   */\n\n\n  get accountMemo() {\n    return this._accountMemo;\n  }\n  /**\n   * @param {string} memo\n   * @returns {this}\n   */\n\n\n  setAccountMemo(memo) {\n    this._requireNotFrozen();\n\n    this._accountMemo = memo;\n    return this;\n  }\n  /**\n   * @returns {?Long}\n   */\n\n\n  get maxAutomaticTokenAssociations() {\n    return this._maxAutomaticTokenAssociations;\n  }\n  /**\n   * @param {Long | number} maxAutomaticTokenAssociations\n   * @returns {this}\n   */\n\n\n  setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations) {\n    this._requireNotFrozen();\n\n    this._maxAutomaticTokenAssociations = typeof maxAutomaticTokenAssociations === \"number\" ? Long.fromNumber(maxAutomaticTokenAssociations) : maxAutomaticTokenAssociations;\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get stakedAccountId() {\n    return this._stakedAccountId;\n  }\n  /**\n   * @param {AccountId | string} stakedAccountId\n   * @returns {this}\n   */\n\n\n  setStakedAccountId(stakedAccountId) {\n    this._requireNotFrozen();\n\n    this._stakedAccountId = typeof stakedAccountId === \"string\" ? AccountId.fromString(stakedAccountId) : stakedAccountId;\n    return this;\n  }\n  /**\n   * @returns {?Long}\n   */\n\n\n  get stakedNodeId() {\n    return this._stakedNodeId;\n  }\n  /**\n   * @param {Long | number} stakedNodeId\n   * @returns {this}\n   */\n\n\n  setStakedNodeId(stakedNodeId) {\n    this._requireNotFrozen();\n\n    this._stakedNodeId = Long.fromValue(stakedNodeId);\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get declineStakingRewards() {\n    return this._declineStakingReward;\n  }\n  /**\n   * @param {boolean} declineStakingReward\n   * @returns {this}\n   */\n\n\n  setDeclineStakingReward(declineStakingReward) {\n    this._requireNotFrozen();\n\n    this._declineStakingReward = declineStakingReward;\n    return this;\n  }\n  /**\n   * @returns {?PublicKey}\n   */\n\n\n  get aliasKey() {\n    return this._aliasKey;\n  }\n  /**\n   * @param {PublicKey} aliasKey\n   * @returns {this}\n   */\n\n\n  setAliasKey(aliasKey) {\n    this._aliasKey = aliasKey;\n    return this;\n  }\n  /**\n   * @returns {?EvmAddress}\n   */\n\n\n  get aliasEvmAddress() {\n    return this._aliasEvmAddress;\n  }\n  /**\n   * @param {Uint8Array | string | EvmAddress} aliasEvmAddress\n   * @returns {this}\n   */\n\n\n  setAliasEvmAddress(aliasEvmAddress) {\n    if (typeof aliasEvmAddress === \"string\") {\n      this._aliasEvmAddress = EvmAddress.fromString(aliasEvmAddress);\n    } else if (aliasEvmAddress instanceof Uint8Array) {\n      this._aliasEvmAddress = EvmAddress.fromBytes(aliasEvmAddress);\n    } else {\n      this._aliasEvmAddress = aliasEvmAddress;\n    }\n\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._proxyAccountId != null) {\n      this._proxyAccountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.createAccount(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoCreateAccount\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.ICryptoCreateTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    let alias = null;\n\n    if (this._aliasKey != null) {\n      alias = HashgraphProto.proto.Key.encode(this._aliasKey._toProtobufKey()).finish();\n    } else if (this._aliasEvmAddress != null) {\n      alias = this._aliasEvmAddress.toBytes();\n    }\n\n    return {\n      key: this._key != null ? this._key._toProtobufKey() : null,\n      initialBalance: this._initialBalance != null ? this._initialBalance.toTinybars() : null,\n      autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n      proxyAccountID: this._proxyAccountId != null ? this._proxyAccountId._toProtobuf() : null,\n      receiveRecordThreshold: this._receiveRecordThreshold.toTinybars(),\n      sendRecordThreshold: this._sendRecordThreshold.toTinybars(),\n      receiverSigRequired: this._receiverSignatureRequired,\n      memo: this._accountMemo,\n      maxAutomaticTokenAssociations: this._maxAutomaticTokenAssociations != null ? this._maxAutomaticTokenAssociations.toInt() : null,\n      stakedAccountId: this.stakedAccountId != null ? this.stakedAccountId._toProtobuf() : null,\n      stakedNodeId: this.stakedNodeId,\n      declineReward: this.declineStakingRewards,\n      alias\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `AccountCreateTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoCreateAccount\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountCreateTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/AccountCreateTransaction.js"],"names":["Hbar","AccountId","Transaction","DEFAULT_AUTO_RENEW_PERIOD","DEFAULT_RECORD_THRESHOLD","TRANSACTION_REGISTRY","Duration","Long","Key","EvmAddress","HashgraphProto","AccountCreateTransaction","constructor","props","_key","_initialBalance","_sendRecordThreshold","_receiveRecordThreshold","_receiverSignatureRequired","_proxyAccountId","_autoRenewPeriod","_accountMemo","_maxAutomaticTokenAssociations","_stakedAccountId","_stakedNodeId","_declineStakingReward","_aliasKey","_aliasEvmAddress","key","setKey","receiverSignatureRequired","setReceiverSignatureRequired","initialBalance","setInitialBalance","proxyAccountId","setProxyAccountId","autoRenewPeriod","setAutoRenewPeriod","accountMemo","setAccountMemo","maxAutomaticTokenAssociations","setMaxAutomaticTokenAssociations","stakedAccountId","setStakedAccountId","stakedNodeId","setStakedNodeId","declineStakingReward","setDeclineStakingReward","aliasKey","setAliasKey","aliasEvmAddress","setAliasEvmAddress","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","create","cryptoCreateAccount","_fromProtobufTransactions","_fromProtobufKey","undefined","receiverSigRequired","proxyAccountID","seconds","memo","declineReward","_requireNotFrozen","fromNumber","fromString","fromValue","declineStakingRewards","Uint8Array","fromBytes","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","createAccount","_getTransactionDataCase","_makeTransactionData","alias","proto","encode","_toProtobufKey","finish","toBytes","toTinybars","_toProtobuf","receiveRecordThreshold","sendRecordThreshold","toInt","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,WAAP,IACIC,yBADJ,EAEIC,wBAFJ,EAGIC,oBAHJ,QAIO,+BAJP;AAKA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,wBAAN,SAAuCT,WAAvC,CAAmD;AAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIU,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACpB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,IAAZ;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,eAAL,GAAuB,IAAvB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,oBAAL,GAA4BZ,wBAA5B;AAEA;AACR;AACA;AACA;;AACQ,SAAKa,uBAAL,GAA+Bb,wBAA/B;AAEA;AACR;AACA;AACA;;AACQ,SAAKc,0BAAL,GAAkC,KAAlC;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,eAAL,GAAuB,IAAvB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAId,QAAJ,CAAaH,yBAAb,CAAxB;AAEA;AACR;AACA;AACA;;AACQ,SAAKkB,YAAL,GAAoB,IAApB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,8BAAL,GAAsC,IAAtC;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,aAAL,GAAqB,IAArB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,qBAAL,GAA6B,KAA7B;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,IAAjB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;;AAEA,QAAId,KAAK,CAACe,GAAN,IAAa,IAAjB,EAAuB;AACnB,WAAKC,MAAL,CAAYhB,KAAK,CAACe,GAAlB;AACH;;AAED,QAAIf,KAAK,CAACiB,yBAAN,IAAmC,IAAvC,EAA6C;AACzC,WAAKC,4BAAL,CAAkClB,KAAK,CAACiB,yBAAxC;AACH;;AAED,QAAIjB,KAAK,CAACmB,cAAN,IAAwB,IAA5B,EAAkC;AAC9B,WAAKC,iBAAL,CAAuBpB,KAAK,CAACmB,cAA7B;AACH;;AAED,QAAInB,KAAK,CAACqB,cAAN,IAAwB,IAA5B,EAAkC;AAC9B;AACA,WAAKC,iBAAL,CAAuBtB,KAAK,CAACqB,cAA7B;AACH;;AAED,QAAIrB,KAAK,CAACuB,eAAN,IAAyB,IAA7B,EAAmC;AAC/B,WAAKC,kBAAL,CAAwBxB,KAAK,CAACuB,eAA9B;AACH;;AAED,QAAIvB,KAAK,CAACyB,WAAN,IAAqB,IAAzB,EAA+B;AAC3B,WAAKC,cAAL,CAAoB1B,KAAK,CAACyB,WAA1B;AACH;;AAED,QAAIzB,KAAK,CAAC2B,6BAAN,IAAuC,IAA3C,EAAiD;AAC7C,WAAKC,gCAAL,CACI5B,KAAK,CAAC2B,6BADV;AAGH;;AAED,QAAI3B,KAAK,CAAC6B,eAAN,IAAyB,IAA7B,EAAmC;AAC/B,WAAKC,kBAAL,CAAwB9B,KAAK,CAAC6B,eAA9B;AACH;;AAED,QAAI7B,KAAK,CAAC+B,YAAN,IAAsB,IAA1B,EAAgC;AAC5B,WAAKC,eAAL,CAAqBhC,KAAK,CAAC+B,YAA3B;AACH;;AAED,QAAI/B,KAAK,CAACiC,oBAAN,IAA8B,IAAlC,EAAwC;AACpC,WAAKC,uBAAL,CAA6BlC,KAAK,CAACiC,oBAAnC;AACH;;AAED,QAAIjC,KAAK,CAACmC,QAAN,IAAkB,IAAtB,EAA4B;AACxB,WAAKC,WAAL,CAAiBpC,KAAK,CAACmC,QAAvB;AACH;;AAED,QAAInC,KAAK,CAACqC,eAAN,IAAyB,IAA7B,EAAmC;AAC/B,WAAKC,kBAAL,CAAwBtC,KAAK,CAACqC,eAA9B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,SAAbE,aAAa,CAChBC,YADgB,EAEhBC,kBAFgB,EAGhBC,cAHgB,EAIhBC,OAJgB,EAKhBC,MALgB,EAMlB;AACE,UAAMC,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACA,UAAME,MAAM;AACR;AACID,IAAAA,IAAI,CAACE,mBAFb;AAKA,WAAO1D,WAAW,CAAC2D,yBAAZ,CACH,IAAIlD,wBAAJ,CAA6B;AACzBiB,MAAAA,GAAG,EACC+B,MAAM,CAAC/B,GAAP,IAAc,IAAd,GACMpB,GAAG,CAACsD,gBAAJ,CAAqBH,MAAM,CAAC/B,GAA5B,CADN,GAEMmC,SAJe;AAKzB/B,MAAAA,cAAc,EACV2B,MAAM,CAAC3B,cAAP,IAAyB,IAAzB,GACM2B,MAAM,CAAC3B,cADb,GAEM+B,SARe;AASzBjC,MAAAA,yBAAyB,EACrB6B,MAAM,CAACK,mBAAP,IAA8B,IAA9B,GACML,MAAM,CAACK,mBADb,GAEMD,SAZe;AAazB7B,MAAAA,cAAc,EACVyB,MAAM,CAACM,cAAP,IAAyB,IAAzB,GACMhE,SAAS,CAACmD,aAAV;AACI;AACIO,MAAAA,MAAM,CAACM,cAFf,CADN,GAMMF,SApBe;AAqBzB3B,MAAAA,eAAe,EACXuB,MAAM,CAACvB,eAAP,IAA0B,IAA1B,GACMuB,MAAM,CAACvB,eAAP,CAAuB8B,OAAvB,IAAkC,IAAlC,GACIP,MAAM,CAACvB,eAAP,CAAuB8B,OAD3B,GAEIH,SAHV,GAIMA,SA1Be;AA2BzBzB,MAAAA,WAAW,EAAEqB,MAAM,CAACQ,IAAP,IAAe,IAAf,GAAsBR,MAAM,CAACQ,IAA7B,GAAoCJ,SA3BxB;AA4BzBvB,MAAAA,6BAA6B,EACzBmB,MAAM,CAACnB,6BAAP,IAAwC,IAAxC,GACMmB,MAAM,CAACnB,6BADb,GAEMuB,SA/Be;AAgCzBrB,MAAAA,eAAe,EACXiB,MAAM,CAACjB,eAAP,IAA0B,IAA1B,GACMzC,SAAS,CAACmD,aAAV,CAAwBO,MAAM,CAACjB,eAA/B,CADN,GAEMqB,SAnCe;AAoCzBnB,MAAAA,YAAY,EACRe,MAAM,CAACf,YAAP,IAAuB,IAAvB,GACMe,MAAM,CAACf,YADb,GAEMmB,SAvCe;AAwCzBjB,MAAAA,oBAAoB,EAAEa,MAAM,CAACS,aAAP,IAAwB;AAxCrB,KAA7B,CADG,EA2CHf,YA3CG,EA4CHC,kBA5CG,EA6CHC,cA7CG,EA8CHC,OA9CG,EA+CHC,MA/CG,CAAP;AAiDH;AAED;AACJ;AACA;;;AACW,MAAH7B,GAAG,GAAG;AACN,WAAO,KAAKd,IAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,MAAM,CAACD,GAAD,EAAM;AACR,SAAKyC,iBAAL;;AACA,SAAKvD,IAAL,GAAYc,GAAZ;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACsB,MAAdI,cAAc,GAAG;AACjB,WAAO,KAAKjB,eAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIkB,EAAAA,iBAAiB,CAACD,cAAD,EAAiB;AAC9B,SAAKqC,iBAAL;;AACA,SAAKtD,eAAL,GACIiB,cAAc,YAAYhC,IAA1B,GACMgC,cADN,GAEM,IAAIhC,IAAJ,CAASgC,cAAT,CAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACiC,MAAzBF,yBAAyB,GAAG;AAC5B,WAAO,KAAKZ,0BAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIa,EAAAA,4BAA4B,CAACD,yBAAD,EAA4B;AACpD,SAAKuC,iBAAL;;AACA,SAAKnD,0BAAL,GAAkCY,yBAAlC;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACsB,MAAdI,cAAc,GAAG;AACjB,WAAO,KAAKf,eAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIgB,EAAAA,iBAAiB,CAACD,cAAD,EAAiB;AAC9B,SAAKmC,iBAAL;;AACA,SAAKlD,eAAL,GAAuBe,cAAvB;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACuB,MAAfE,eAAe,GAAG;AAClB,WAAO,KAAKhB,gBAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIiB,EAAAA,kBAAkB,CAACD,eAAD,EAAkB;AAChC,SAAKiC,iBAAL;;AACA,SAAKjD,gBAAL,GACIgB,eAAe,YAAY9B,QAA3B,GACM8B,eADN,GAEM,IAAI9B,QAAJ,CAAa8B,eAAb,CAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACmB,MAAXE,WAAW,GAAG;AACd,WAAO,KAAKjB,YAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIkB,EAAAA,cAAc,CAAC4B,IAAD,EAAO;AACjB,SAAKE,iBAAL;;AACA,SAAKhD,YAAL,GAAoB8C,IAApB;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACqC,MAA7B3B,6BAA6B,GAAG;AAChC,WAAO,KAAKlB,8BAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACImB,EAAAA,gCAAgC,CAACD,6BAAD,EAAgC;AAC5D,SAAK6B,iBAAL;;AACA,SAAK/C,8BAAL,GACI,OAAOkB,6BAAP,KAAyC,QAAzC,GACMjC,IAAI,CAAC+D,UAAL,CAAgB9B,6BAAhB,CADN,GAEMA,6BAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACuB,MAAfE,eAAe,GAAG;AAClB,WAAO,KAAKnB,gBAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIoB,EAAAA,kBAAkB,CAACD,eAAD,EAAkB;AAChC,SAAK2B,iBAAL;;AACA,SAAK9C,gBAAL,GACI,OAAOmB,eAAP,KAA2B,QAA3B,GACMzC,SAAS,CAACsE,UAAV,CAAqB7B,eAArB,CADN,GAEMA,eAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACoB,MAAZE,YAAY,GAAG;AACf,WAAO,KAAKpB,aAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIqB,EAAAA,eAAe,CAACD,YAAD,EAAe;AAC1B,SAAKyB,iBAAL;;AACA,SAAK7C,aAAL,GAAqBjB,IAAI,CAACiE,SAAL,CAAe5B,YAAf,CAArB;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AAC6B,MAArB6B,qBAAqB,GAAG;AACxB,WAAO,KAAKhD,qBAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIsB,EAAAA,uBAAuB,CAACD,oBAAD,EAAuB;AAC1C,SAAKuB,iBAAL;;AACA,SAAK5C,qBAAL,GAA6BqB,oBAA7B;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACgB,MAARE,QAAQ,GAAG;AACX,WAAO,KAAKtB,SAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIuB,EAAAA,WAAW,CAACD,QAAD,EAAW;AAClB,SAAKtB,SAAL,GAAiBsB,QAAjB;AACA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACuB,MAAfE,eAAe,GAAG;AAClB,WAAO,KAAKvB,gBAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIwB,EAAAA,kBAAkB,CAACD,eAAD,EAAkB;AAChC,QAAI,OAAOA,eAAP,KAA2B,QAA/B,EAAyC;AACrC,WAAKvB,gBAAL,GAAwBlB,UAAU,CAAC8D,UAAX,CAAsBrB,eAAtB,CAAxB;AACH,KAFD,MAEO,IAAIA,eAAe,YAAYwB,UAA/B,EAA2C;AAC9C,WAAK/C,gBAAL,GAAwBlB,UAAU,CAACkE,SAAX,CAAqBzB,eAArB,CAAxB;AACH,KAFM,MAEA;AACH,WAAKvB,gBAAL,GAAwBuB,eAAxB;AACH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACI0B,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,QAAI,KAAK1D,eAAL,IAAwB,IAA5B,EAAkC;AAC9B,WAAKA,eAAL,CAAqB2D,gBAArB,CAAsCD,MAAtC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACvB,WAAOD,OAAO,CAACE,MAAR,CAAeC,aAAf,CAA6BF,OAA7B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,uBAAuB,GAAG;AACtB,WAAO,qBAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,oBAAoB,GAAG;AACnB,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAK5D,SAAL,IAAkB,IAAtB,EAA4B;AACxB4D,MAAAA,KAAK,GAAG5E,cAAc,CAAC6E,KAAf,CAAqB/E,GAArB,CAAyBgF,MAAzB,CACJ,KAAK9D,SAAL,CAAe+D,cAAf,EADI,EAENC,MAFM,EAAR;AAGH,KAJD,MAIO,IAAI,KAAK/D,gBAAL,IAAyB,IAA7B,EAAmC;AACtC2D,MAAAA,KAAK,GAAG,KAAK3D,gBAAL,CAAsBgE,OAAtB,EAAR;AACH;;AAED,WAAO;AACH/D,MAAAA,GAAG,EAAE,KAAKd,IAAL,IAAa,IAAb,GAAoB,KAAKA,IAAL,CAAU2E,cAAV,EAApB,GAAiD,IADnD;AAEHzD,MAAAA,cAAc,EACV,KAAKjB,eAAL,IAAwB,IAAxB,GACM,KAAKA,eAAL,CAAqB6E,UAArB,EADN,GAEM,IALP;AAMHxD,MAAAA,eAAe,EAAE,KAAKhB,gBAAL,CAAsByE,WAAtB,EANd;AAOH5B,MAAAA,cAAc,EACV,KAAK9C,eAAL,IAAwB,IAAxB,GACM,KAAKA,eAAL,CAAqB0E,WAArB,EADN,GAEM,IAVP;AAWHC,MAAAA,sBAAsB,EAAE,KAAK7E,uBAAL,CAA6B2E,UAA7B,EAXrB;AAYHG,MAAAA,mBAAmB,EAAE,KAAK/E,oBAAL,CAA0B4E,UAA1B,EAZlB;AAaH5B,MAAAA,mBAAmB,EAAE,KAAK9C,0BAbvB;AAcHiD,MAAAA,IAAI,EAAE,KAAK9C,YAdR;AAeHmB,MAAAA,6BAA6B,EACzB,KAAKlB,8BAAL,IAAuC,IAAvC,GACM,KAAKA,8BAAL,CAAoC0E,KAApC,EADN,GAEM,IAlBP;AAmBHtD,MAAAA,eAAe,EACX,KAAKA,eAAL,IAAwB,IAAxB,GACM,KAAKA,eAAL,CAAqBmD,WAArB,EADN,GAEM,IAtBP;AAuBHjD,MAAAA,YAAY,EAAE,KAAKA,YAvBhB;AAwBHwB,MAAAA,aAAa,EAAE,KAAKK,qBAxBjB;AAyBHa,MAAAA;AAzBG,KAAP;AA2BH;AAED;AACJ;AACA;;;AACIW,EAAAA,SAAS,GAAG;AACR,UAAMC,SAAS;AAAG;AACd,SAAKC,eAAL,CAAqBC,OAArB,CAA6BC,UADjC;AAGA,WAAQ,4BAA2BH,SAAS,CAACI,QAAV,EAAqB,EAAxD;AACH;;AA9iB6D;AAijBlEjG,oBAAoB,CAACkG,GAArB,CACI,qBADJ,EAEI;AACA5F,wBAAwB,CAACyC,aAH7B","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Hbar from \"../Hbar.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    DEFAULT_RECORD_THRESHOLD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Duration from \"../Duration.js\";\nimport Long from \"long\";\nimport Key from \"../Key.js\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n */\n\n/**\n * Create a new Hedera™ crypto-currency account.\n */\nexport default class AccountCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.key]\n     * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]\n     * @param {boolean} [props.receiverSignatureRequired]\n     * @param {AccountId} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {string} [props.accountMemo]\n     * @param {Long | number} [props.maxAutomaticTokenAssociations]\n     * @param {AccountId | string} [props.stakedAccountId]\n     * @param {Long | number} [props.stakedNodeId]\n     * @param {boolean} [props.declineStakingReward]\n     * @param {PublicKey} [props.aliasKey]\n     * @param {EvmAddress} [props.aliasEvmAddress]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._key = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._initialBalance = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._sendRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._receiveRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._receiverSignatureRequired = false;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._accountMemo = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._maxAutomaticTokenAssociations = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._stakedAccountId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._stakedNodeId = null;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._declineStakingReward = false;\n\n        /**\n         * @private\n         * @type {?PublicKey}\n         */\n        this._aliasKey = null;\n\n        /**\n         * @private\n         * @type {?EvmAddress}\n         */\n        this._aliasEvmAddress = null;\n\n        if (props.key != null) {\n            this.setKey(props.key);\n        }\n\n        if (props.receiverSignatureRequired != null) {\n            this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n        }\n\n        if (props.initialBalance != null) {\n            this.setInitialBalance(props.initialBalance);\n        }\n\n        if (props.proxyAccountId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.accountMemo != null) {\n            this.setAccountMemo(props.accountMemo);\n        }\n\n        if (props.maxAutomaticTokenAssociations != null) {\n            this.setMaxAutomaticTokenAssociations(\n                props.maxAutomaticTokenAssociations\n            );\n        }\n\n        if (props.stakedAccountId != null) {\n            this.setStakedAccountId(props.stakedAccountId);\n        }\n\n        if (props.stakedNodeId != null) {\n            this.setStakedNodeId(props.stakedNodeId);\n        }\n\n        if (props.declineStakingReward != null) {\n            this.setDeclineStakingReward(props.declineStakingReward);\n        }\n\n        if (props.aliasKey != null) {\n            this.setAliasKey(props.aliasKey);\n        }\n\n        if (props.aliasEvmAddress != null) {\n            this.setAliasEvmAddress(props.aliasEvmAddress);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create =\n            /** @type {HashgraphProto.proto.ICryptoCreateTransactionBody} */ (\n                body.cryptoCreateAccount\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountCreateTransaction({\n                key:\n                    create.key != null\n                        ? Key._fromProtobufKey(create.key)\n                        : undefined,\n                initialBalance:\n                    create.initialBalance != null\n                        ? create.initialBalance\n                        : undefined,\n                receiverSignatureRequired:\n                    create.receiverSigRequired != null\n                        ? create.receiverSigRequired\n                        : undefined,\n                proxyAccountId:\n                    create.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HashgraphProto.proto.IAccountID} */ (\n                                  create.proxyAccountID\n                              )\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                accountMemo: create.memo != null ? create.memo : undefined,\n                maxAutomaticTokenAssociations:\n                    create.maxAutomaticTokenAssociations != null\n                        ? create.maxAutomaticTokenAssociations\n                        : undefined,\n                stakedAccountId:\n                    create.stakedAccountId != null\n                        ? AccountId._fromProtobuf(create.stakedAccountId)\n                        : undefined,\n                stakedNodeId:\n                    create.stakedNodeId != null\n                        ? create.stakedNodeId\n                        : undefined,\n                declineStakingReward: create.declineReward == true,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKey(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this account.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._requireNotFrozen();\n        this._initialBalance =\n            initialBalance instanceof Hbar\n                ? initialBalance\n                : new Hbar(initialBalance);\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get receiverSignatureRequired() {\n        return this._receiverSignatureRequired;\n    }\n\n    /**\n     * Set to true to require the key for this account to sign any transfer of\n     * hbars to this account.\n     *\n     * @param {boolean} receiverSignatureRequired\n     * @returns {this}\n     */\n    setReceiverSignatureRequired(receiverSignatureRequired) {\n        this._requireNotFrozen();\n        this._receiverSignatureRequired = receiverSignatureRequired;\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @deprecated\n     *\n     * Set the ID of the account to which this account is proxy staked.\n     * @param {AccountId} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId = proxyAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get accountMemo() {\n        return this._accountMemo;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setAccountMemo(memo) {\n        this._requireNotFrozen();\n        this._accountMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get maxAutomaticTokenAssociations() {\n        return this._maxAutomaticTokenAssociations;\n    }\n\n    /**\n     * @param {Long | number} maxAutomaticTokenAssociations\n     * @returns {this}\n     */\n    setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations) {\n        this._requireNotFrozen();\n        this._maxAutomaticTokenAssociations =\n            typeof maxAutomaticTokenAssociations === \"number\"\n                ? Long.fromNumber(maxAutomaticTokenAssociations)\n                : maxAutomaticTokenAssociations;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get stakedAccountId() {\n        return this._stakedAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} stakedAccountId\n     * @returns {this}\n     */\n    setStakedAccountId(stakedAccountId) {\n        this._requireNotFrozen();\n        this._stakedAccountId =\n            typeof stakedAccountId === \"string\"\n                ? AccountId.fromString(stakedAccountId)\n                : stakedAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stakedNodeId() {\n        return this._stakedNodeId;\n    }\n\n    /**\n     * @param {Long | number} stakedNodeId\n     * @returns {this}\n     */\n    setStakedNodeId(stakedNodeId) {\n        this._requireNotFrozen();\n        this._stakedNodeId = Long.fromValue(stakedNodeId);\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get declineStakingRewards() {\n        return this._declineStakingReward;\n    }\n\n    /**\n     * @param {boolean} declineStakingReward\n     * @returns {this}\n     */\n    setDeclineStakingReward(declineStakingReward) {\n        this._requireNotFrozen();\n        this._declineStakingReward = declineStakingReward;\n\n        return this;\n    }\n\n    /**\n     * @returns {?PublicKey}\n     */\n    get aliasKey() {\n        return this._aliasKey;\n    }\n\n    /**\n     * @param {PublicKey} aliasKey\n     * @returns {this}\n     */\n    setAliasKey(aliasKey) {\n        this._aliasKey = aliasKey;\n        return this;\n    }\n\n    /**\n     * @returns {?EvmAddress}\n     */\n    get aliasEvmAddress() {\n        return this._aliasEvmAddress;\n    }\n\n    /**\n     * @param {Uint8Array | string | EvmAddress} aliasEvmAddress\n     * @returns {this}\n     */\n    setAliasEvmAddress(aliasEvmAddress) {\n        if (typeof aliasEvmAddress === \"string\") {\n            this._aliasEvmAddress = EvmAddress.fromString(aliasEvmAddress);\n        } else if (aliasEvmAddress instanceof Uint8Array) {\n            this._aliasEvmAddress = EvmAddress.fromBytes(aliasEvmAddress);\n        } else {\n            this._aliasEvmAddress = aliasEvmAddress;\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._proxyAccountId != null) {\n            this._proxyAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.createAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoCreateAccount\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.ICryptoCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        let alias = null;\n        if (this._aliasKey != null) {\n            alias = HashgraphProto.proto.Key.encode(\n                this._aliasKey._toProtobufKey()\n            ).finish();\n        } else if (this._aliasEvmAddress != null) {\n            alias = this._aliasEvmAddress.toBytes();\n        }\n\n        return {\n            key: this._key != null ? this._key._toProtobufKey() : null,\n            initialBalance:\n                this._initialBalance != null\n                    ? this._initialBalance.toTinybars()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            receiveRecordThreshold: this._receiveRecordThreshold.toTinybars(),\n            sendRecordThreshold: this._sendRecordThreshold.toTinybars(),\n            receiverSigRequired: this._receiverSignatureRequired,\n            memo: this._accountMemo,\n            maxAutomaticTokenAssociations:\n                this._maxAutomaticTokenAssociations != null\n                    ? this._maxAutomaticTokenAssociations.toInt()\n                    : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId._toProtobuf()\n                    : null,\n            stakedNodeId: this.stakedNodeId,\n            declineReward: this.declineStakingRewards,\n            alias,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountCreateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoCreateAccount\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountCreateTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}