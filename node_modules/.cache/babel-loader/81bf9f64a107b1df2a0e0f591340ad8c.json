{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TransactionRecord from \"./TransactionRecord.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Status from \"../Status.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport Logger from \"js-logger\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nconst {\n  proto\n} = HashgraphProto;\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<TransactionRecord>}\n */\n\nexport default class TransactionRecordQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {TransactionId} [props.transactionId]\n   * @param {boolean} [props.includeChildren]\n   * @param {boolean} [props.includeDuplicates]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TransactionId}\n     */\n\n    this._transactionId = null;\n    /**\n     * @private\n     * @type {?boolean}\n     */\n\n    this._includeChildren = null;\n    /**\n     * @private\n     * @type {?boolean}\n     */\n\n    this._includeDuplicates = null;\n\n    if (props.transactionId != null) {\n      this.setTransactionId(props.transactionId);\n    }\n\n    if (props.includeChildren != null) {\n      this.setIncludeChildren(props.includeChildren);\n    }\n\n    if (props.includeDuplicates != null) {\n      this.setIncludeDuplicates(props.includeDuplicates);\n    }\n  }\n  /**\n   * @returns {?TransactionId}\n   */\n\n\n  get transactionId() {\n    return this._transactionId;\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} query\n   * @returns {TransactionRecordQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const record =\n    /** @type {HashgraphProto.proto.ITransactionGetRecordQuery} */\n    query.transactionGetRecord;\n    return new TransactionRecordQuery({\n      transactionId: record.transactionID ? TransactionId._fromProtobuf(record.transactionID) : undefined,\n      includeChildren: record.includeChildRecords != null ? record.includeChildRecords : undefined,\n      includeDuplicates: record.includeDuplicates != null ? record.includeDuplicates : undefined\n    });\n  }\n  /**\n   * Set the transaction ID for which the record is being requested.\n   *\n   * @param {TransactionId | string} transactionId\n   * @returns {TransactionRecordQuery}\n   */\n\n\n  setTransactionId(transactionId) {\n    this._transactionId = typeof transactionId === \"string\" ? TransactionId.fromString(transactionId) : transactionId.clone();\n    return this;\n  }\n  /**\n   * @param {boolean} includeChildren\n   * @returns {TransactionRecordQuery}\n   */\n\n\n  setIncludeChildren(includeChildren) {\n    this._includeChildren = includeChildren;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get includeChildren() {\n    return this._includeChildren != null ? this._includeChildren : false;\n  }\n  /**\n   * @param {boolean} includeDuplicates\n   * @returns {TransactionRecordQuery}\n   */\n\n\n  setIncludeDuplicates(includeDuplicates) {\n    this._duplicates = includeDuplicates;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get includeDuplicates() {\n    return this._duplicates != null ? this._duplicates : false;\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} request\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {[Status, ExecutionState]}\n   */\n\n\n  _shouldRetry(request, response) {\n    const {\n      nodeTransactionPrecheckCode\n    } = this._mapResponseHeader(response);\n\n    let status = Status._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : proto.ResponseCodeEnum.OK);\n\n    Logger.debug(`[${this._getLogId()}] received node precheck status ${status.toString()}`);\n\n    switch (status) {\n      case Status.Busy:\n      case Status.Unknown:\n      case Status.ReceiptNotFound:\n      case Status.RecordNotFound:\n        return [status, ExecutionState.Retry];\n\n      case Status.Ok:\n        break;\n\n      default:\n        return [status, ExecutionState.Error];\n    }\n\n    const transactionGetRecord =\n    /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */\n    response.transactionGetRecord;\n    const header =\n    /** @type {HashgraphProto.proto.IResponseHeader} */\n    transactionGetRecord.header;\n\n    if (header.responseType === HashgraphProto.proto.ResponseType.COST_ANSWER) {\n      return [status, ExecutionState.Finished];\n    }\n\n    const record =\n    /** @type {HashgraphProto.proto.ITransactionRecord} */\n    transactionGetRecord.transactionRecord;\n    const receipt =\n    /** @type {HashgraphProto.proto.ITransactionReceipt} */\n    record.receipt;\n    const receiptStatusCode =\n    /** @type {HashgraphProto.proto.ResponseCodeEnum} */\n    receipt.status;\n    status = Status._fromCode(receiptStatusCode);\n    Logger.debug(`[${this._getLogId()}] received record's receipt ${status.toString()}`);\n\n    switch (status) {\n      case Status.Ok:\n      case Status.Busy:\n      case Status.Unknown:\n      case Status.ReceiptNotFound:\n      case Status.RecordNotFound:\n        return [status, ExecutionState.Retry];\n\n      case Status.Success:\n        return [status, ExecutionState.Finished];\n\n      default:\n        return [status, ExecutionState.Error];\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} request\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {Error}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapStatusError(request, response) {\n    const {\n      nodeTransactionPrecheckCode\n    } = this._mapResponseHeader(response);\n\n    let status = Status._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : proto.ResponseCodeEnum.OK);\n\n    switch (status) {\n      case Status.Ok:\n        // Do nothing\n        break;\n\n      default:\n        return new PrecheckStatusError({\n          status,\n          transactionId: this._getTransactionId()\n        });\n    }\n\n    const transactionGetRecord =\n    /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */\n    response.transactionGetRecord;\n    const record =\n    /** @type {HashgraphProto.proto.ITransactionRecord} */\n    transactionGetRecord.transactionRecord;\n    const receipt =\n    /** @type {HashgraphProto.proto.ITransactionReceipt} */\n    record.receipt;\n    const receiptStatusError =\n    /** @type {HashgraphProto.proto.ResponseCodeEnum} */\n    receipt.status;\n    status = Status._fromCode(receiptStatusError);\n    return new ReceiptStatusError({\n      status,\n      transactionId: this._getTransactionId(),\n      transactionReceipt: TransactionReceipt._fromProtobuf({\n        receipt\n      })\n    });\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._transactionId != null && this._transactionId.accountId != null) {\n      this._transactionId.accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getTxRecordByTxID(request);\n  }\n  /**\n   * @override\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {HashgraphProto.proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const transactionGetRecord =\n    /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */\n    response.transactionGetRecord;\n    return (\n      /** @type {HashgraphProto.proto.IResponseHeader} */\n      transactionGetRecord.header\n    );\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<TransactionRecord>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const record =\n    /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */\n    response.transactionGetRecord;\n    return Promise.resolve(TransactionRecord._fromProtobuf(record));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQueryHeader} header\n   * @returns {HashgraphProto.proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      transactionGetRecord: {\n        header,\n        transactionID: this._transactionId != null ? this._transactionId._toProtobuf() : null,\n        includeChildRecords: this._includeChildren,\n        includeDuplicates: this._includeDuplicates\n      }\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp = this._paymentTransactionId != null && this._paymentTransactionId.validStart != null ? this._paymentTransactionId.validStart : this._timestamp;\n    return `TransactionRecordQuery:${timestamp.toString()}`;\n  }\n\n}\nQUERY_REGISTRY.set(\"transactionGetRecord\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTransactionRecordQuery._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/transaction/TransactionRecordQuery.js"],"names":["Query","QUERY_REGISTRY","TransactionRecord","TransactionReceipt","TransactionId","Status","PrecheckStatusError","ReceiptStatusError","ExecutionState","Logger","HashgraphProto","proto","TransactionRecordQuery","constructor","props","_transactionId","_includeChildren","_includeDuplicates","transactionId","setTransactionId","includeChildren","setIncludeChildren","includeDuplicates","setIncludeDuplicates","_fromProtobuf","query","record","transactionGetRecord","transactionID","undefined","includeChildRecords","fromString","clone","_duplicates","_shouldRetry","request","response","nodeTransactionPrecheckCode","_mapResponseHeader","status","_fromCode","ResponseCodeEnum","OK","debug","_getLogId","toString","Busy","Unknown","ReceiptNotFound","RecordNotFound","Retry","Ok","Error","header","responseType","ResponseType","COST_ANSWER","Finished","transactionRecord","receipt","receiptStatusCode","Success","_mapStatusError","_getTransactionId","receiptStatusError","transactionReceipt","_validateChecksums","client","accountId","validateChecksum","_execute","channel","crypto","getTxRecordByTxID","_mapResponse","nodeAccountId","Promise","resolve","_onMakeRequest","_toProtobuf","timestamp","_paymentTransactionId","validStart","_timestamp","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TransactionRecord from \"./TransactionRecord.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Status from \"../Status.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport Logger from \"js-logger\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\nconst { proto } = HashgraphProto;\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<TransactionRecord>}\n */\nexport default class TransactionRecordQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId} [props.transactionId]\n     * @param {boolean} [props.includeChildren]\n     * @param {boolean} [props.includeDuplicates]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeChildren = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeDuplicates = null;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n\n        if (props.includeChildren != null) {\n            this.setIncludeChildren(props.includeChildren);\n        }\n\n        if (props.includeDuplicates != null) {\n            this.setIncludeDuplicates(props.includeDuplicates);\n        }\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} query\n     * @returns {TransactionRecordQuery}\n     */\n    static _fromProtobuf(query) {\n        const record =\n            /** @type {HashgraphProto.proto.ITransactionGetRecordQuery} */ (\n                query.transactionGetRecord\n            );\n\n        return new TransactionRecordQuery({\n            transactionId: record.transactionID\n                ? TransactionId._fromProtobuf(record.transactionID)\n                : undefined,\n            includeChildren:\n                record.includeChildRecords != null\n                    ? record.includeChildRecords\n                    : undefined,\n            includeDuplicates:\n                record.includeDuplicates != null\n                    ? record.includeDuplicates\n                    : undefined,\n        });\n    }\n\n    /**\n     * Set the transaction ID for which the record is being requested.\n     *\n     * @param {TransactionId | string} transactionId\n     * @returns {TransactionRecordQuery}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId =\n            typeof transactionId === \"string\"\n                ? TransactionId.fromString(transactionId)\n                : transactionId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} includeChildren\n     * @returns {TransactionRecordQuery}\n     */\n    setIncludeChildren(includeChildren) {\n        this._includeChildren = includeChildren;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeChildren() {\n        return this._includeChildren != null ? this._includeChildren : false;\n    }\n\n    /**\n     * @param {boolean} includeDuplicates\n     * @returns {TransactionRecordQuery}\n     */\n    setIncludeDuplicates(includeDuplicates) {\n        this._duplicates = includeDuplicates;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeDuplicates() {\n        return this._duplicates != null ? this._duplicates : false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} request\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {[Status, ExecutionState]}\n     */\n    _shouldRetry(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK\n        );\n\n        Logger.debug(\n            `[${this._getLogId()}] received node precheck status ${status.toString()}`\n        );\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n                return [status, ExecutionState.Retry];\n\n            case Status.Ok:\n                break;\n\n            default:\n                return [status, ExecutionState.Error];\n        }\n\n        const transactionGetRecord =\n            /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        const header = /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            transactionGetRecord.header\n        );\n\n        if (\n            header.responseType ===\n            HashgraphProto.proto.ResponseType.COST_ANSWER\n        ) {\n            return [status, ExecutionState.Finished];\n        }\n\n        const record = /** @type {HashgraphProto.proto.ITransactionRecord} */ (\n            transactionGetRecord.transactionRecord\n        );\n        const receipt =\n            /** @type {HashgraphProto.proto.ITransactionReceipt} */ (\n                record.receipt\n            );\n        const receiptStatusCode =\n            /** @type {HashgraphProto.proto.ResponseCodeEnum} */ (\n                receipt.status\n            );\n        status = Status._fromCode(receiptStatusCode);\n\n        Logger.debug(\n            `[${this._getLogId()}] received record's receipt ${status.toString()}`\n        );\n\n        switch (status) {\n            case Status.Ok:\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n                return [status, ExecutionState.Retry];\n\n            case Status.Success:\n                return [status, ExecutionState.Finished];\n\n            default:\n                return [status, ExecutionState.Error];\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} request\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK\n        );\n\n        switch (status) {\n            case Status.Ok:\n                // Do nothing\n                break;\n\n            default:\n                return new PrecheckStatusError({\n                    status,\n                    transactionId: this._getTransactionId(),\n                });\n        }\n\n        const transactionGetRecord =\n            /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        const record = /** @type {HashgraphProto.proto.ITransactionRecord} */ (\n            transactionGetRecord.transactionRecord\n        );\n        const receipt =\n            /** @type {HashgraphProto.proto.ITransactionReceipt} */ (\n                record.receipt\n            );\n        const receiptStatusError =\n            /** @type {HashgraphProto.proto.ResponseCodeEnum} */ (\n                receipt.status\n            );\n\n        status = Status._fromCode(receiptStatusError);\n\n        return new ReceiptStatusError({\n            status,\n            transactionId: this._getTransactionId(),\n            transactionReceipt: TransactionReceipt._fromProtobuf({ receipt }),\n        });\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (\n            this._transactionId != null &&\n            this._transactionId.accountId != null\n        ) {\n            this._transactionId.accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTxRecordByTxID(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {HashgraphProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetRecord =\n            /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        return /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            transactionGetRecord.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<TransactionRecord>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const record =\n            /** @type {HashgraphProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n\n        return Promise.resolve(TransactionRecord._fromProtobuf(record));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQueryHeader} header\n     * @returns {HashgraphProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetRecord: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n                includeChildRecords: this._includeChildren,\n                includeDuplicates: this._includeDuplicates,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TransactionRecordQuery:${timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetRecord\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionRecordQuery._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}