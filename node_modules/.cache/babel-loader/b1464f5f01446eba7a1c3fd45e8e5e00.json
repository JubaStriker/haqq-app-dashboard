{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport NftId from \"../token/NftId.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteAllowanceTransactionBody} HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\n\nexport default class AccountAllowanceDeleteTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {HbarAllowance[]} [props.hbarAllowances]\n   * @param {TokenAllowance[]} [props.tokenAllowances]\n   * @param {TokenNftAllowance[]} [props.nftAllowances]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {TokenNftAllowance[]}\n     */\n\n    this._nftAllowances = props.nftAllowances != null ? props.nftAllowances : [];\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {AccountAllowanceDeleteTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const allowance =\n    /** @type {HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody} */\n    body.cryptoDeleteAllowance;\n    return Transaction._fromProtobufTransactions(new AccountAllowanceDeleteTransaction({\n      nftAllowances: (allowance.nftAllowances != null ? allowance.nftAllowances : []).map(allowance => TokenNftAllowance._fromProtobuf(allowance))\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {TokenNftAllowance[]}\n   */\n\n\n  get tokenNftAllowanceDeletions() {\n    return this._nftAllowances;\n  }\n  /**\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} ownerAccountId\n   * @returns {AccountAllowanceDeleteTransaction}\n   */\n\n\n  deleteAllTokenNftAllowances(nftId, ownerAccountId) {\n    this._requireNotFrozen();\n\n    const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n    const owner = typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId;\n    let found = false;\n\n    for (const allowance of this._nftAllowances) {\n      if (allowance.tokenId.compare(id.tokenId) === 0) {\n        if (allowance.serialNumbers != null) {\n          allowance.serialNumbers.push(id.serial);\n        }\n\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      this._nftAllowances.push(new TokenNftAllowance({\n        tokenId: id.tokenId,\n        spenderAccountId: null,\n        serialNumbers: [id.serial],\n        ownerAccountId: owner,\n        allSerials: false\n      }));\n    }\n\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    this._nftAllowances.map(allowance => allowance._validateChecksums(client));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.deleteAllowances(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoDeleteAllowance\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      nftAllowances: this._nftAllowances.map(allowance => allowance._toProtobuf())\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `AccountAllowanceDeleteTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoDeleteAllowance\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountAllowanceDeleteTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/AccountAllowanceDeleteTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","AccountId","NftId","TokenNftAllowance","AccountAllowanceDeleteTransaction","constructor","props","_nftAllowances","nftAllowances","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","allowance","cryptoDeleteAllowance","_fromProtobufTransactions","map","tokenNftAllowanceDeletions","deleteAllTokenNftAllowances","nftId","ownerAccountId","_requireNotFrozen","id","fromString","owner","found","tokenId","compare","serialNumbers","push","serial","spenderAccountId","allSerials","_validateChecksums","client","_execute","channel","request","crypto","deleteAllowances","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport NftId from \"../token/NftId.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteAllowanceTransactionBody} HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountAllowanceDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarAllowances]\n     * @param {TokenAllowance[]} [props.tokenAllowances]\n     * @param {TokenNftAllowance[]} [props.nftAllowances]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftAllowances =\n            props.nftAllowances != null ? props.nftAllowances : [];\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountAllowanceDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const allowance =\n            /** @type {HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody} */ (\n                body.cryptoDeleteAllowance\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountAllowanceDeleteTransaction({\n                nftAllowances: (allowance.nftAllowances != null\n                    ? allowance.nftAllowances\n                    : []\n                ).map((allowance) =>\n                    TokenNftAllowance._fromProtobuf(allowance)\n                ),\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {TokenNftAllowance[]}\n     */\n    get tokenNftAllowanceDeletions() {\n        return this._nftAllowances;\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @returns {AccountAllowanceDeleteTransaction}\n     */\n    deleteAllTokenNftAllowances(nftId, ownerAccountId) {\n        this._requireNotFrozen();\n\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        const owner =\n            typeof ownerAccountId === \"string\"\n                ? AccountId.fromString(ownerAccountId)\n                : ownerAccountId;\n        let found = false;\n\n        for (const allowance of this._nftAllowances) {\n            if (allowance.tokenId.compare(id.tokenId) === 0) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(id.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftAllowances.push(\n                new TokenNftAllowance({\n                    tokenId: id.tokenId,\n                    spenderAccountId: null,\n                    serialNumbers: [id.serial],\n                    ownerAccountId: owner,\n                    allSerials: false,\n                })\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._nftAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.deleteAllowances(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDeleteAllowance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.ICryptoDeleteAllowanceTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            nftAllowances: this._nftAllowances.map((allowance) =>\n                allowance._toProtobuf()\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDeleteAllowance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountAllowanceDeleteTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}