{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0; // Default stream and parsers for Uint8TypedArray data type\n\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/js-binary-schema-parser/lib/parsers/uint8.js"],"names":["Object","defineProperty","exports","value","readBits","readArray","readUnsigned","readString","peekBytes","readBytes","peekByte","readByte","buildStream","uint8Data","data","pos","stream","offset","arguments","length","undefined","subarray","Array","from","map","String","fromCharCode","join","littleEndian","bytes","byteSize","totalOrFunc","result","parent","total","parser","arr","i","subBitsTotal","bits","startIndex","Math","pow","schema","_byte","keys","reduce","res","key","def","index"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0;\n\n// Default stream and parsers for Uint8TypedArray data type\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;"]},"metadata":{},"sourceType":"script"}