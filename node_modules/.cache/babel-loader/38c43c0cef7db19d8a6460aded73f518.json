{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.INftTransfer} HashgraphProto.proto.INftTransfer\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\n\nexport default class TokenNftTransfer {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {TokenId | string} props.tokenId\n   * @param {AccountId | string} props.senderAccountId\n   * @param {AccountId | string} props.receiverAccountId\n   * @param {Long | number} props.serialNumber\n   * @param {boolean} props.isApproved\n   */\n  constructor(props) {\n    /**\n     * The Token ID that sends or receives cryptocurrency.\n     */\n    this.tokenId = props.tokenId instanceof TokenId ? props.tokenId : TokenId.fromString(props.tokenId);\n    /**\n     * The Account ID that sends or receives cryptocurrency.\n     */\n\n    this.senderAccountId = props.senderAccountId instanceof AccountId ? props.senderAccountId : AccountId.fromString(props.senderAccountId);\n    /**\n     * The Account ID that sends or receives cryptocurrency.\n     */\n\n    this.receiverAccountId = props.receiverAccountId instanceof AccountId ? props.receiverAccountId : AccountId.fromString(props.receiverAccountId);\n    this.serialNumber = Long.fromValue(props.serialNumber);\n    this.isApproved = props.isApproved;\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITokenTransferList[]} tokenTransfers\n   * @returns {TokenNftTransfer[]}\n   */\n\n\n  static _fromProtobuf(tokenTransfers) {\n    const transfers = [];\n\n    for (const tokenTransfer of tokenTransfers) {\n      const tokenId = TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      tokenTransfer.token);\n\n      for (const transfer of tokenTransfer.nftTransfers != null ? tokenTransfer.nftTransfers : []) {\n        transfers.push(new TokenNftTransfer({\n          tokenId,\n          senderAccountId: AccountId._fromProtobuf(\n          /** @type {HashgraphProto.proto.IAccountID} */\n          transfer.senderAccountID),\n          receiverAccountId: AccountId._fromProtobuf(\n          /** @type {HashgraphProto.proto.IAccountID} */\n          transfer.receiverAccountID),\n          serialNumber: transfer.serialNumber != null ? transfer.serialNumber : Long.ZERO,\n          isApproved: transfer.isApproval == true\n        }));\n      }\n    }\n\n    return transfers;\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.INftTransfer}\n   */\n\n\n  _toProtobuf() {\n    return {\n      senderAccountID: this.senderAccountId._toProtobuf(),\n      receiverAccountID: this.receiverAccountId._toProtobuf(),\n      serialNumber: this.serialNumber,\n      isApproval: this.isApproved\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/token/TokenNftTransfer.js"],"names":["Long","AccountId","TokenId","TokenNftTransfer","constructor","props","tokenId","fromString","senderAccountId","receiverAccountId","serialNumber","fromValue","isApproved","_fromProtobuf","tokenTransfers","transfers","tokenTransfer","token","transfer","nftTransfers","push","senderAccountID","receiverAccountID","ZERO","isApproval","_toProtobuf"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,CAAuB;AAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACQ,SAAKC,OAAL,GACID,KAAK,CAACC,OAAN,YAAyBJ,OAAzB,GACMG,KAAK,CAACC,OADZ,GAEMJ,OAAO,CAACK,UAAR,CAAmBF,KAAK,CAACC,OAAzB,CAHV;AAKA;AACR;AACA;;AACQ,SAAKE,eAAL,GACIH,KAAK,CAACG,eAAN,YAAiCP,SAAjC,GACMI,KAAK,CAACG,eADZ,GAEMP,SAAS,CAACM,UAAV,CAAqBF,KAAK,CAACG,eAA3B,CAHV;AAKA;AACR;AACA;;AACQ,SAAKC,iBAAL,GACIJ,KAAK,CAACI,iBAAN,YAAmCR,SAAnC,GACMI,KAAK,CAACI,iBADZ,GAEMR,SAAS,CAACM,UAAV,CAAqBF,KAAK,CAACI,iBAA3B,CAHV;AAKA,SAAKC,YAAL,GAAoBV,IAAI,CAACW,SAAL,CAAeN,KAAK,CAACK,YAArB,CAApB;AACA,SAAKE,UAAL,GAAkBP,KAAK,CAACO,UAAxB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,cAAD,EAAiB;AACjC,UAAMC,SAAS,GAAG,EAAlB;;AAEA,SAAK,MAAMC,aAAX,IAA4BF,cAA5B,EAA4C;AACxC,YAAMR,OAAO,GAAGJ,OAAO,CAACW,aAAR;AACZ;AACIG,MAAAA,aAAa,CAACC,KAFN,CAAhB;;AAMA,WAAK,MAAMC,QAAX,IAAuBF,aAAa,CAACG,YAAd,IAA8B,IAA9B,GACjBH,aAAa,CAACG,YADG,GAEjB,EAFN,EAEU;AACNJ,QAAAA,SAAS,CAACK,IAAV,CACI,IAAIjB,gBAAJ,CAAqB;AACjBG,UAAAA,OADiB;AAEjBE,UAAAA,eAAe,EAAEP,SAAS,CAACY,aAAV;AACb;AACIK,UAAAA,QAAQ,CAACG,eAFA,CAFA;AAOjBZ,UAAAA,iBAAiB,EAAER,SAAS,CAACY,aAAV;AACf;AACIK,UAAAA,QAAQ,CAACI,iBAFE,CAPF;AAYjBZ,UAAAA,YAAY,EACRQ,QAAQ,CAACR,YAAT,IAAyB,IAAzB,GACMQ,QAAQ,CAACR,YADf,GAEMV,IAAI,CAACuB,IAfE;AAgBjBX,UAAAA,UAAU,EAAEM,QAAQ,CAACM,UAAT,IAAuB;AAhBlB,SAArB,CADJ;AAoBH;AACJ;;AAED,WAAOT,SAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIU,EAAAA,WAAW,GAAG;AACV,WAAO;AACHJ,MAAAA,eAAe,EAAE,KAAKb,eAAL,CAAqBiB,WAArB,EADd;AAEHH,MAAAA,iBAAiB,EAAE,KAAKb,iBAAL,CAAuBgB,WAAvB,EAFhB;AAGHf,MAAAA,YAAY,EAAE,KAAKA,YAHhB;AAIHc,MAAAA,UAAU,EAAE,KAAKZ;AAJd,KAAP;AAMH;;AA9FiC","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.INftTransfer} HashgraphProto.proto.INftTransfer\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\nexport default class TokenNftTransfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId | string} props.tokenId\n     * @param {AccountId | string} props.senderAccountId\n     * @param {AccountId | string} props.receiverAccountId\n     * @param {Long | number} props.serialNumber\n     * @param {boolean} props.isApproved\n     */\n    constructor(props) {\n        /**\n         * The Token ID that sends or receives cryptocurrency.\n         */\n        this.tokenId =\n            props.tokenId instanceof TokenId\n                ? props.tokenId\n                : TokenId.fromString(props.tokenId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         */\n        this.senderAccountId =\n            props.senderAccountId instanceof AccountId\n                ? props.senderAccountId\n                : AccountId.fromString(props.senderAccountId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         */\n        this.receiverAccountId =\n            props.receiverAccountId instanceof AccountId\n                ? props.receiverAccountId\n                : AccountId.fromString(props.receiverAccountId);\n\n        this.serialNumber = Long.fromValue(props.serialNumber);\n        this.isApproved = props.isApproved;\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITokenTransferList[]} tokenTransfers\n     * @returns {TokenNftTransfer[]}\n     */\n    static _fromProtobuf(tokenTransfers) {\n        const transfers = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (\n                    tokenTransfer.token\n                )\n            );\n\n            for (const transfer of tokenTransfer.nftTransfers != null\n                ? tokenTransfer.nftTransfers\n                : []) {\n                transfers.push(\n                    new TokenNftTransfer({\n                        tokenId,\n                        senderAccountId: AccountId._fromProtobuf(\n                            /** @type {HashgraphProto.proto.IAccountID} */ (\n                                transfer.senderAccountID\n                            )\n                        ),\n                        receiverAccountId: AccountId._fromProtobuf(\n                            /** @type {HashgraphProto.proto.IAccountID} */ (\n                                transfer.receiverAccountID\n                            )\n                        ),\n                        serialNumber:\n                            transfer.serialNumber != null\n                                ? transfer.serialNumber\n                                : Long.ZERO,\n                        isApproved: transfer.isApproval == true,\n                    })\n                );\n            }\n        }\n\n        return transfers;\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.INftTransfer}\n     */\n    _toProtobuf() {\n        return {\n            senderAccountID: this.senderAccountId._toProtobuf(),\n            receiverAccountID: this.receiverAccountId._toProtobuf(),\n            serialNumber: this.serialNumber,\n            isApproval: this.isApproved,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}