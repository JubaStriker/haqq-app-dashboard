{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { RelayMessage } from './';\nimport SimpleCrypto from \"simple-crypto-js\"; // const protons = require('protons');\n\nexport class MessageUtil {\n  // private proto = protons(`\n  // message SimpleMessage {\n  //     uint64 timestamp = 1;\n  //     string type = 2;\n  //     string data = 3;\n  // }`);\n\n  /**\n   * Compiles the simple protobuf with the specified paramaters\n   *\n   * @param message message to prepare\n   * @param type type of message\n   * @returns protobuf message\n   */\n  async prepareSimpleMessage(type, data, topic, hc) {\n    data.id = uuidv4();\n    if (hc.debug) console.log(\"hashconnect - Sending message - id: \" + data.id); //uncomment this to encode as protobuff\n\n    let encryptedData = await this.encrypt(JSON.stringify(data), hc.encryptionKeys[data.topic], hc);\n    let message = new RelayMessage(Date.now(), type, encryptedData, topic // JSON.stringify(data)\n    );\n    return JSON.stringify(message);\n  }\n\n  async decode(payload, hc) {\n    if (hc.debug) console.log(\"hashconnect - decoding message payload\"); //todo: this is temporary to enable backwards compatibility\n\n    let parsedPayload = payload;\n    if (typeof payload == \"string\") parsedPayload = JSON.parse(payload);\n    let message = parsedPayload;\n    message.data = await this.decrypt(message.data, hc.encryptionKeys[message.topic], hc); //uncomment this to decode protobuf\n    // return this.proto.SimpleMessage.decode(payload)\n    // this.decrypt(payload, hc.encryptionKeys[])\n\n    return message;\n  }\n  /**\n   * Generate a random topic ID UUID\n   *\n   * @returns random UUID topic ID\n   */\n\n\n  createRandomTopicId() {\n    return uuidv4();\n  }\n\n  async encrypt(string, key, hc) {\n    if (hc.debug) console.log(\"hashconnect - encrypting with key: \" + key);\n    if (hc.debug) console.log(\"Topic key mapping\", hc.encryptionKeys);\n    var simpleCrypto = new SimpleCrypto(key);\n    return simpleCrypto.encrypt(string);\n  }\n\n  async decrypt(string, key, hc) {\n    if (hc.debug) console.log(\"hashconnect - decryption with key: \" + key);\n    var simpleCrypto = new SimpleCrypto(key);\n    let text = simpleCrypto.decrypt(string);\n    return text;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,SAASC,YAAT,QAA+C,IAA/C;AAEA,OAAOC,YAAP,MAAyB,kBAAzB,C,CAEA;;AAEA,OAAM,MAAOC,WAAP,CAAkB;AAEpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOiC,QAApBC,oBAAoB,CAACC,IAAD,EAAyBC,IAAzB,EAAyDC,KAAzD,EAAwEC,EAAxE,EAAuF;AAEpHF,QAAI,CAACG,EAAL,GAAUT,MAAM,EAAhB;AAEA,QAAIQ,EAAE,CAACE,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,yCAAyCN,IAAI,CAACG,EAA1D,EAJsG,CAMpH;;AAEA,QAAII,aAAa,GAAG,MAAM,KAAKC,OAAL,CAAaC,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAb,EAAmCE,EAAE,CAACS,cAAH,CAAkBX,IAAI,CAACC,KAAvB,CAAnC,EAAkEC,EAAlE,CAA1B;AAEA,QAAIU,OAAO,GAAG,IAAIjB,YAAJ,CACVkB,IAAI,CAACC,GAAL,EADU,EAEVf,IAFU,EAGVQ,aAHU,EAIVN,KAJU,CAKV;AALU,KAAd;AAQA,WAAOQ,IAAI,CAACC,SAAL,CAAeE,OAAf,CAAP;AACH;;AAEkB,QAANG,MAAM,CAACC,OAAD,EAAkBd,EAAlB,EAAiC;AAChD,QAAIA,EAAE,CAACE,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,wCAAZ,EADkC,CAGhD;;AACA,QAAIW,aAAa,GAAOD,OAAxB;AACA,QAAG,OAAOA,OAAP,IAAmB,QAAtB,EAAgCC,aAAa,GAAGR,IAAI,CAACS,KAAL,CAAWF,OAAX,CAAhB;AAEhC,QAAIJ,OAAO,GAAiBK,aAA5B;AAEAL,WAAO,CAACZ,IAAR,GAAe,MAAM,KAAKmB,OAAL,CAAaP,OAAO,CAACZ,IAArB,EAA2BE,EAAE,CAACS,cAAH,CAAkBC,OAAO,CAACX,KAA1B,CAA3B,EAA6DC,EAA7D,CAArB,CATgD,CAWhD;AACA;AACA;;AAEA,WAAOU,OAAP;AACH;AAED;;;;;;;AAKOQ,qBAAmB;AACtB,WAAO1B,MAAM,EAAb;AACH;;AAEY,QAAPc,OAAO,CAACa,MAAD,EAAiBC,GAAjB,EAA8BpB,EAA9B,EAA6C;AACtD,QAAIA,EAAE,CAACE,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,wCAAwCgB,GAApD;AACd,QAAIpB,EAAE,CAACE,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,EAAE,CAACS,cAApC;AAEd,QAAIY,YAAY,GAAG,IAAI3B,YAAJ,CAAiB0B,GAAjB,CAAnB;AAEA,WAAOC,YAAY,CAACf,OAAb,CAAqBa,MAArB,CAAP;AACH;;AAEY,QAAPF,OAAO,CAACE,MAAD,EAAiBC,GAAjB,EAA8BpB,EAA9B,EAA6C;AACtD,QAAIA,EAAE,CAACE,KAAP,EAAcC,OAAO,CAACC,GAAR,CAAY,wCAAwCgB,GAApD;AACd,QAAIC,YAAY,GAAG,IAAI3B,YAAJ,CAAiB0B,GAAjB,CAAnB;AACA,QAAIE,IAAI,GAAUD,YAAY,CAACJ,OAAb,CAAqBE,MAArB,CAAlB;AACA,WAAOG,IAAP;AACH;;AA9EmB","names":["v4","uuidv4","RelayMessage","SimpleCrypto","MessageUtil","prepareSimpleMessage","type","data","topic","hc","id","debug","console","log","encryptedData","encrypt","JSON","stringify","encryptionKeys","message","Date","now","decode","payload","parsedPayload","parse","decrypt","createRandomTopicId","string","key","simpleCrypto","text"],"sourceRoot":"","sources":["../../../src/message/message-utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}