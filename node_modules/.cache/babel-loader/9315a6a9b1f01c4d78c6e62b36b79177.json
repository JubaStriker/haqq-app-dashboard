{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\nconst {\n  proto\n} = HashgraphProto;\n/**\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\n\nexport default class ContractInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {ContractId} props.contractId\n   * @param {AccountId} props.accountId\n   * @param {string} props.contractAccountId\n   * @param {?Key} props.adminKey\n   * @param {Timestamp} props.expirationTime\n   * @param {Duration} props.autoRenewPeriod\n   * @param {?AccountId} props.autoRenewAccountId\n   * @param {Long} props.storage\n   * @param {string} props.contractMemo\n   * @param {Hbar} props.balance\n   * @param {boolean} props.isDeleted\n   * @param {TokenRelationshipMap} props.tokenRelationships\n   * @param {LedgerId|null} props.ledgerId\n   * @param {?StakingInfo} props.stakingInfo\n   */\n  constructor(props) {\n    /**\n     * ID of the contract instance, in the format used in transactions.\n     *\n     * @readonly\n     */\n    this.contractId = props.contractId;\n    /**\n     * ID of the cryptocurrency account owned by the contract instance,\n     * in the format used in transactions.\n     *\n     * @readonly\n     */\n\n    this.accountId = props.accountId;\n    /**\n     * ID of both the contract instance and the cryptocurrency account owned by the contract\n     * instance, in the format used by Solidity.\n     *\n     * @readonly\n     */\n\n    this.contractAccountId = props.contractAccountId;\n    /**\n     * The state of the instance and its fields can be modified arbitrarily if this key signs a\n     * transaction to modify it. If this is null, then such modifications are not possible,\n     * and there is no administrator that can override the normal operation of this smart\n     * contract instance. Note that if it is created with no admin keys, then there is no\n     * administrator to authorize changing the admin keys, so there can never be any admin keys\n     * for that instance.\n     *\n     * @readonly\n     */\n\n    this.adminKey = props.adminKey != null ? props.adminKey : null;\n    /**\n     * The current time at which this contract instance (and its account) is set to expire.\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * The expiration time will extend every this many seconds. If there are insufficient funds,\n     * then it extends as long as possible. If the account is empty when it expires,\n     * then it is deleted.\n     *\n     * @readonly\n     */\n\n    this.autoRenewPeriod = props.autoRenewPeriod;\n    /**\n     * ID of the an account to charge for auto-renewal of this contract. If not set, or set\n     * to an account with zero hbar balance, the contract's own hbar balance will be used\n     * to cover auto-renewal fees.\n     *\n     * @readonly\n     */\n\n    this.autoRenewAccountId = props.autoRenewAccountId;\n    /**\n     * Number of bytes of storage being used by this instance (which affects the cost to\n     * extend the expiration time).\n     *\n     * @readonly\n     */\n\n    this.storage = props.storage;\n    /**\n     * The memo associated with the contract (max 100 bytes).\n     *\n     * @readonly\n     */\n\n    this.contractMemo = props.contractMemo;\n    /**\n     * The current balance of the contract.\n     *\n     * @readonly\n     */\n\n    this.balance = props.balance;\n    /**\n     * Whether the contract has been deleted\n     *\n     * @readonly\n     */\n\n    this.isDeleted = props.isDeleted;\n    /**\n     * The tokens associated to the contract\n     *\n     * @readonly\n     */\n\n    this.tokenRelationships = props.tokenRelationships;\n    /**\n     * The ledger ID the response was returned from; please see <a href=\"https://github.com/hashgraph/hedera-improvement-proposal/blob/master/HIP/hip-198.md\">HIP-198</a> for the network-specific IDs.\n     */\n\n    this.ledgerId = props.ledgerId;\n    /**\n     * Staking metadata for this account.\n     */\n\n    this.stakingInfo = props.stakingInfo;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ContractGetInfoResponse.IContractInfo} info\n   * @returns {ContractInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    const autoRenewPeriod =\n    /** @type {Long | number} */\n\n    /** @type {HashgraphProto.proto.IDuration} */\n    info.autoRenewPeriod.seconds;\n    return new ContractInfo({\n      contractId: ContractId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IContractID} */\n      info.contractID),\n      accountId: AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      info.accountID),\n      contractAccountId: info.contractAccountID != null ? info.contractAccountID : \"\",\n      adminKey: info.adminKey != null ? Key._fromProtobufKey(info.adminKey) : null,\n      expirationTime: Timestamp._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITimestamp} */\n      info.expirationTime),\n      autoRenewPeriod: new Duration(autoRenewPeriod),\n      autoRenewAccountId: info.autoRenewAccountId != null ? AccountId._fromProtobuf(info.autoRenewAccountId) : null,\n      storage: info.storage != null ? info.storage instanceof Long ? info.storage : Long.fromValue(info.storage) : Long.ZERO,\n      contractMemo: info.memo != null ? info.memo : \"\",\n      balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n      isDeleted:\n      /** @type {boolean} */\n      info.deleted,\n      tokenRelationships: TokenRelationshipMap._fromProtobuf(info.tokenRelationships != null ? info.tokenRelationships : []),\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null,\n      stakingInfo: info.stakingInfo != null ? StakingInfo._fromProtobuf(info.stakingInfo) : null\n    });\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.ContractGetInfoResponse.IContractInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      contractID: this.contractId._toProtobuf(),\n      accountID: this.accountId._toProtobuf(),\n      contractAccountID: this.contractAccountId,\n      adminKey: this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n      expirationTime: this.expirationTime._toProtobuf(),\n      autoRenewPeriod: this.autoRenewPeriod != null ? this.autoRenewPeriod._toProtobuf() : null,\n      autoRenewAccountId: this.autoRenewAccountId != null ? this.autoRenewAccountId._toProtobuf() : null,\n      storage: this.storage,\n      memo: this.contractMemo,\n      balance: this.balance.toTinybars(),\n      deleted: this.isDeleted,\n      tokenRelationships: this.tokenRelationships != null ? this.tokenRelationships._toProtobuf() : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n      stakingInfo: this.stakingInfo != null ? this.stakingInfo._toProtobuf() : null\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {ContractInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return ContractInfo._fromProtobuf(proto.ContractGetInfoResponse.ContractInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.ContractGetInfoResponse.ContractInfo.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/contract/ContractInfo.js"],"names":["ContractId","AccountId","StakingInfo","Timestamp","Duration","Hbar","Long","HashgraphProto","TokenRelationshipMap","Key","LedgerId","proto","ContractInfo","constructor","props","contractId","accountId","contractAccountId","adminKey","expirationTime","autoRenewPeriod","autoRenewAccountId","storage","contractMemo","balance","isDeleted","tokenRelationships","ledgerId","stakingInfo","Object","freeze","_fromProtobuf","info","seconds","contractID","accountID","contractAccountID","_fromProtobufKey","fromValue","ZERO","memo","fromTinybars","deleted","fromBytes","_toProtobuf","_toProtobufKey","toTinybars","toBytes","bytes","ContractGetInfoResponse","decode","encode","finish"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\nconst { proto } = HashgraphProto;\n\n/**\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class ContractInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {AccountId} props.accountId\n     * @param {string} props.contractAccountId\n     * @param {?Key} props.adminKey\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {?AccountId} props.autoRenewAccountId\n     * @param {Long} props.storage\n     * @param {string} props.contractMemo\n     * @param {Hbar} props.balance\n     * @param {boolean} props.isDeleted\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     * @param {LedgerId|null} props.ledgerId\n     * @param {?StakingInfo} props.stakingInfo\n     */\n    constructor(props) {\n        /**\n         * ID of the contract instance, in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * ID of the cryptocurrency account owned by the contract instance,\n         * in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * ID of both the contract instance and the cryptocurrency account owned by the contract\n         * instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * The state of the instance and its fields can be modified arbitrarily if this key signs a\n         * transaction to modify it. If this is null, then such modifications are not possible,\n         * and there is no administrator that can override the normal operation of this smart\n         * contract instance. Note that if it is created with no admin keys, then there is no\n         * administrator to authorize changing the admin keys, so there can never be any admin keys\n         * for that instance.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey != null ? props.adminKey : null;\n\n        /**\n         * The current time at which this contract instance (and its account) is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The expiration time will extend every this many seconds. If there are insufficient funds,\n         * then it extends as long as possible. If the account is empty when it expires,\n         * then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * ID of the an account to charge for auto-renewal of this contract. If not set, or set\n         * to an account with zero hbar balance, the contract's own hbar balance will be used\n         * to cover auto-renewal fees.\n         *\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * Number of bytes of storage being used by this instance (which affects the cost to\n         * extend the expiration time).\n         *\n         * @readonly\n         */\n        this.storage = props.storage;\n\n        /**\n         * The memo associated with the contract (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.contractMemo = props.contractMemo;\n\n        /**\n         * The current balance of the contract.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * Whether the contract has been deleted\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * The tokens associated to the contract\n         *\n         * @readonly\n         */\n        this.tokenRelationships = props.tokenRelationships;\n\n        /**\n         * The ledger ID the response was returned from; please see <a href=\"https://github.com/hashgraph/hedera-improvement-proposal/blob/master/HIP/hip-198.md\">HIP-198</a> for the network-specific IDs.\n         */\n        this.ledgerId = props.ledgerId;\n\n        /**\n         * Staking metadata for this account.\n         */\n        this.stakingInfo = props.stakingInfo;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ContractGetInfoResponse.IContractInfo} info\n     * @returns {ContractInfo}\n     */\n    static _fromProtobuf(info) {\n        const autoRenewPeriod = /** @type {Long | number} */ (\n            /** @type {HashgraphProto.proto.IDuration} */ (info.autoRenewPeriod)\n                .seconds\n        );\n\n        return new ContractInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IContractID} */ (\n                    info.contractID\n                )\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IAccountID} */ (info.accountID)\n            ),\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : \"\",\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */ (\n                    info.expirationTime\n                )\n            ),\n            autoRenewPeriod: new Duration(autoRenewPeriod),\n            autoRenewAccountId:\n                info.autoRenewAccountId != null\n                    ? AccountId._fromProtobuf(info.autoRenewAccountId)\n                    : null,\n            storage:\n                info.storage != null\n                    ? info.storage instanceof Long\n                        ? info.storage\n                        : Long.fromValue(info.storage)\n                    : Long.ZERO,\n            contractMemo: info.memo != null ? info.memo : \"\",\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : []\n            ),\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            stakingInfo:\n                info.stakingInfo != null\n                    ? StakingInfo._fromProtobuf(info.stakingInfo)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.ContractGetInfoResponse.IContractInfo}\n     */\n    _toProtobuf() {\n        return {\n            contractID: this.contractId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            autoRenewAccountId:\n                this.autoRenewAccountId != null\n                    ? this.autoRenewAccountId._toProtobuf()\n                    : null,\n            storage: this.storage,\n            memo: this.contractMemo,\n            balance: this.balance.toTinybars(),\n            deleted: this.isDeleted,\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            stakingInfo:\n                this.stakingInfo != null\n                    ? this.stakingInfo._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractInfo}\n     */\n    static fromBytes(bytes) {\n        return ContractInfo._fromProtobuf(\n            proto.ContractGetInfoResponse.ContractInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ContractGetInfoResponse.ContractInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}