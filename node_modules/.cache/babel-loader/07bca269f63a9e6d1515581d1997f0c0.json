{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\nimport Timestamp from \"./Timestamp.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n/**\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * @typedef {object} StakingInfoJson\n * @property {boolean} declineStakingReward\n * @property {?string} stakePeriodStart\n * @property {?string} pendingReward\n * @property {?string} stakedToMe\n * @property {?string} stakedAccountId\n * @property {?string} stakedNodeId\n */\n\n/**\n * Staking metadata for an account or a contract returned in CryptoGetInfo or ContractGetInfo queries\n */\n\nexport default class StakingInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {boolean} props.declineStakingReward\n   * @param {?Timestamp} props.stakePeriodStart\n   * @param {?Hbar} props.pendingReward\n   * @param {?Hbar} props.stakedToMe\n   * @param {?AccountId} props.stakedAccountId\n   * @param {?Long} props.stakedNodeId\n   */\n  constructor(props) {\n    /**\n     * If true, this account or contract declined to receive a staking reward.\n     *\n     * @readonly\n     */\n    this.declineStakingReward = props.declineStakingReward;\n    /**\n     * The staking period during which either the staking settings for this\n     * account or contract changed (such as starting staking or changing\n     * staked_node_id) or the most recent reward was earned, whichever is\n     * later. If this account or contract is not currently staked to a\n     * node, then this field is not set.\n     *\n     * @readonly\n     */\n\n    this.stakePeriodStart = props.stakePeriodStart;\n    /**\n     * The amount in tinybars that will be received in the next reward\n     * situation.\n     *\n     * @readonly\n     */\n\n    this.pendingReward = props.pendingReward;\n    /**\n     * The total of balance of all accounts staked to this account or contract.\n     *\n     * @readonly\n     */\n\n    this.stakedToMe = props.stakedToMe;\n    /**\n     * The account to which this account or contract is staking.\n     *\n     * @readonly\n     */\n\n    this.stakedAccountId = props.stakedAccountId;\n    /**\n     * The ID of the node this account or contract is staked to.\n     *\n     * @readonly\n     */\n\n    this.stakedNodeId = props.stakedNodeId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IStakingInfo} info\n   * @returns {StakingInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    return new StakingInfo({\n      declineStakingReward: info.declineReward == true,\n      stakePeriodStart: info.stakePeriodStart != null ? Timestamp._fromProtobuf(info.stakePeriodStart) : null,\n      pendingReward: info.pendingReward != null ? Hbar.fromTinybars(info.pendingReward) : null,\n      stakedToMe: info.stakedToMe != null ? Hbar.fromTinybars(info.stakedToMe) : null,\n      stakedAccountId: info.stakedAccountId != null ? AccountId._fromProtobuf(info.stakedAccountId) : null,\n      stakedNodeId: info.stakedNodeId != null ? info.stakedNodeId : null\n    });\n  }\n  /**\n   * @returns {HashgraphProto.proto.IStakingInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      declineReward: this.declineStakingReward,\n      stakePeriodStart: this.stakePeriodStart != null ? this.stakePeriodStart._toProtobuf() : null,\n      pendingReward: this.pendingReward != null ? this.pendingReward.toTinybars() : null,\n      stakedToMe: this.stakedToMe != null ? this.stakedToMe.toTinybars() : null,\n      stakedAccountId: this.stakedAccountId != null ? this.stakedAccountId._toProtobuf() : null,\n      stakedNodeId: this.stakedNodeId\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {StakingInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return StakingInfo._fromProtobuf(HashgraphProto.proto.StakingInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.StakingInfo.encode(this._toProtobuf()).finish();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @returns {StakingInfoJson}\n   */\n\n\n  toJSON() {\n    return {\n      declineStakingReward: this.declineStakingReward,\n      stakePeriodStart: this.stakePeriodStart != null ? this.stakePeriodStart.toString() : null,\n      pendingReward: this.pendingReward != null ? this.pendingReward.toString() : null,\n      stakedToMe: this.stakedToMe != null ? this.stakedToMe.toString() : null,\n      stakedAccountId: this.stakedAccountId != null ? this.stakedAccountId.toString() : null,\n      stakedNodeId: this.stakedNodeId != null ? this.stakedNodeId.toString() : null\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/StakingInfo.js"],"names":["AccountId","Hbar","Timestamp","HashgraphProto","StakingInfo","constructor","props","declineStakingReward","stakePeriodStart","pendingReward","stakedToMe","stakedAccountId","stakedNodeId","Object","freeze","_fromProtobuf","info","declineReward","fromTinybars","_toProtobuf","toTinybars","fromBytes","bytes","proto","decode","toBytes","encode","finish","toString","JSON","stringify","toJSON"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\nimport Timestamp from \"./Timestamp.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * @typedef {object} StakingInfoJson\n * @property {boolean} declineStakingReward\n * @property {?string} stakePeriodStart\n * @property {?string} pendingReward\n * @property {?string} stakedToMe\n * @property {?string} stakedAccountId\n * @property {?string} stakedNodeId\n */\n\n/**\n * Staking metadata for an account or a contract returned in CryptoGetInfo or ContractGetInfo queries\n */\nexport default class StakingInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {boolean} props.declineStakingReward\n     * @param {?Timestamp} props.stakePeriodStart\n     * @param {?Hbar} props.pendingReward\n     * @param {?Hbar} props.stakedToMe\n     * @param {?AccountId} props.stakedAccountId\n     * @param {?Long} props.stakedNodeId\n     */\n    constructor(props) {\n        /**\n         * If true, this account or contract declined to receive a staking reward.\n         *\n         * @readonly\n         */\n        this.declineStakingReward = props.declineStakingReward;\n\n        /**\n         * The staking period during which either the staking settings for this\n         * account or contract changed (such as starting staking or changing\n         * staked_node_id) or the most recent reward was earned, whichever is\n         * later. If this account or contract is not currently staked to a\n         * node, then this field is not set.\n         *\n         * @readonly\n         */\n        this.stakePeriodStart = props.stakePeriodStart;\n\n        /**\n         * The amount in tinybars that will be received in the next reward\n         * situation.\n         *\n         * @readonly\n         */\n        this.pendingReward = props.pendingReward;\n\n        /**\n         * The total of balance of all accounts staked to this account or contract.\n         *\n         * @readonly\n         */\n        this.stakedToMe = props.stakedToMe;\n\n        /**\n         * The account to which this account or contract is staking.\n         *\n         * @readonly\n         */\n        this.stakedAccountId = props.stakedAccountId;\n\n        /**\n         * The ID of the node this account or contract is staked to.\n         *\n         * @readonly\n         */\n        this.stakedNodeId = props.stakedNodeId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IStakingInfo} info\n     * @returns {StakingInfo}\n     */\n    static _fromProtobuf(info) {\n        return new StakingInfo({\n            declineStakingReward: info.declineReward == true,\n            stakePeriodStart:\n                info.stakePeriodStart != null\n                    ? Timestamp._fromProtobuf(info.stakePeriodStart)\n                    : null,\n            pendingReward:\n                info.pendingReward != null\n                    ? Hbar.fromTinybars(info.pendingReward)\n                    : null,\n            stakedToMe:\n                info.stakedToMe != null\n                    ? Hbar.fromTinybars(info.stakedToMe)\n                    : null,\n            stakedAccountId:\n                info.stakedAccountId != null\n                    ? AccountId._fromProtobuf(info.stakedAccountId)\n                    : null,\n            stakedNodeId: info.stakedNodeId != null ? info.stakedNodeId : null,\n        });\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.IStakingInfo}\n     */\n    _toProtobuf() {\n        return {\n            declineReward: this.declineStakingReward,\n            stakePeriodStart:\n                this.stakePeriodStart != null\n                    ? this.stakePeriodStart._toProtobuf()\n                    : null,\n            pendingReward:\n                this.pendingReward != null\n                    ? this.pendingReward.toTinybars()\n                    : null,\n            stakedToMe:\n                this.stakedToMe != null ? this.stakedToMe.toTinybars() : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId._toProtobuf()\n                    : null,\n            stakedNodeId: this.stakedNodeId,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakingInfo}\n     */\n    static fromBytes(bytes) {\n        return StakingInfo._fromProtobuf(\n            HashgraphProto.proto.StakingInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.StakingInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {StakingInfoJson}\n     */\n    toJSON() {\n        return {\n            declineStakingReward: this.declineStakingReward,\n            stakePeriodStart:\n                this.stakePeriodStart != null\n                    ? this.stakePeriodStart.toString()\n                    : null,\n            pendingReward:\n                this.pendingReward != null\n                    ? this.pendingReward.toString()\n                    : null,\n            stakedToMe:\n                this.stakedToMe != null ? this.stakedToMe.toString() : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId.toString()\n                    : null,\n            stakedNodeId:\n                this.stakedNodeId != null ? this.stakedNodeId.toString() : null,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}