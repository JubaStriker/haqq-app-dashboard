{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Timestamp from \"../Timestamp.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, { TRANSACTION_REGISTRY, SCHEDULE_CREATE_TRANSACTION } from \"../transaction/Transaction.js\";\nimport Key from \"../Key.js\";\nimport Hbar from \"../Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IScheduleCreateTransactionBody} HashgraphProto.proto.IScheduleCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ISignatureMap} HashgraphProto.proto.ISignatureMap\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n */\n\n/**\n * Create a new Hedera™ crypto-currency account.\n */\n\nexport default class ScheduleCreateTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Key} [props.adminKey]\n   * @param {AccountId} [props.payerAccountID]\n   * @param {string} [props.scheduleMemo]\n   * @param {Timestamp} [props.expirationTime]\n   * @param {boolean} [props.waitForExpiry]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Key}\n     */\n\n    this._adminKey = null;\n    /**\n     * @private\n     * @type {?Transaction}\n     */\n\n    this._scheduledTransaction = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._payerAccountId = null;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this._scheduleMemo = null;\n    /**\n     * @private\n     * @type {Set<string>}\n     */\n\n    this._scheduledSignerPublicKeys = new Set();\n    /**\n     * @private\n     * @type {?Timestamp}\n     */\n\n    this._expirationTime = null;\n    /**\n     * @private\n     * @type {?boolean}\n     */\n\n    this._waitForExpiry = null;\n\n    if (props.adminKey != null) {\n      this.setAdminKey(props.adminKey);\n    }\n\n    if (props.payerAccountID != null) {\n      this.setPayerAccountId(props.payerAccountID);\n    }\n\n    if (props.scheduleMemo != null) {\n      this.setScheduleMemo(props.scheduleMemo);\n    }\n\n    this._defaultMaxTransactionFee = new Hbar(5);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {ScheduleCreateTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const create =\n    /** @type {HashgraphProto.proto.IScheduleCreateTransactionBody} */\n    body.scheduleCreate;\n    return Transaction._fromProtobufTransactions(new ScheduleCreateTransaction({\n      adminKey: create.adminKey != null ? Key._fromProtobufKey(create.adminKey) : undefined,\n      payerAccountID: create.payerAccountID != null ? AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      create.payerAccountID) : undefined,\n      scheduleMemo: create.memo != null ? create.memo : undefined,\n      waitForExpiry: create.waitForExpiry != null ? create.waitForExpiry : undefined,\n      expirationTime: create.expirationTime != null ? Timestamp._fromProtobuf(create.expirationTime) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @internal\n   * @param {Transaction} tx\n   * @returns {this}\n   */\n\n\n  _setScheduledTransaction(tx) {\n    this._scheduledTransaction = tx;\n    return this;\n  }\n  /**\n   * @returns {?Key}\n   */\n\n\n  get adminKey() {\n    return this._adminKey;\n  }\n  /**\n   * Set the key for this account.\n   *\n   * This is the key that must sign each transfer out of the account.\n   *\n   * If `receiverSignatureRequired` is true, then the key must also sign\n   * any transfer into the account.\n   *\n   * @param {Key} key\n   * @returns {this}\n   */\n\n\n  setAdminKey(key) {\n    this._requireNotFrozen();\n\n    this._adminKey = key;\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get payerAccountId() {\n    return this._payerAccountId;\n  }\n  /**\n   * @param {AccountId} account\n   * @returns {this}\n   */\n\n\n  setPayerAccountId(account) {\n    this._requireNotFrozen();\n\n    this._payerAccountId = account;\n    return this;\n  }\n  /**\n   * @param {string} memo\n   * @returns {this}\n   */\n\n\n  setScheduleMemo(memo) {\n    this._requireNotFrozen();\n\n    this._scheduleMemo = memo;\n    return this;\n  }\n  /**\n   * @returns {?string}\n   */\n\n\n  get getScheduleMemo() {\n    this._requireNotFrozen();\n\n    return this._scheduleMemo;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @returns {this}\n   */\n\n\n  setScheduledTransaction(transaction) {\n    this._requireNotFrozen();\n\n    transaction._requireNotFrozen();\n\n    this._scheduledTransaction = transaction.schedule()._scheduledTransaction;\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._payerAccountId != null) {\n      this._payerAccountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.schedule.createSchedule(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"scheduleCreate\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.IScheduleCreateTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      adminKey: this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n      payerAccountID: this._payerAccountId != null ? this._payerAccountId._toProtobuf() : null,\n      scheduledTransactionBody: this._scheduledTransaction != null ? this._scheduledTransaction._getScheduledTransactionBody() : null,\n      memo: this._scheduleMemo,\n      waitForExpiry: this._waitForExpiry,\n      expirationTime: this._expirationTime != null ? this._expirationTime._toProtobuf() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `ScheduleCreateTransaction:${timestamp.toString()}`;\n  }\n  /**\n   * @param {?Timestamp} expirationTime\n   * @returns {this}\n   */\n\n\n  setExpirationTime(expirationTime) {\n    this._expirationTime = expirationTime;\n    return this;\n  }\n  /**\n   * @returns {?Timestamp}\n   */\n\n\n  get expirationTime() {\n    this._requireNotFrozen();\n\n    return this._expirationTime;\n  }\n  /**\n   * @param {boolean} waitForExpiry\n   * @returns {this}\n   */\n\n\n  setWaitForExpiry(waitForExpiry) {\n    this._waitForExpiry = waitForExpiry;\n    return this;\n  }\n  /**\n   * @returns {?boolean}\n   */\n\n\n  get waitForExpiry() {\n    this._requireNotFrozen();\n\n    return this._waitForExpiry;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"scheduleCreate\", // eslint-disable-next-line @typescript-eslint/unbound-method\nScheduleCreateTransaction._fromProtobuf);\nSCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/schedule/ScheduleCreateTransaction.js"],"names":["Timestamp","AccountId","Transaction","TRANSACTION_REGISTRY","SCHEDULE_CREATE_TRANSACTION","Key","Hbar","ScheduleCreateTransaction","constructor","props","_adminKey","_scheduledTransaction","_payerAccountId","_scheduleMemo","_scheduledSignerPublicKeys","Set","_expirationTime","_waitForExpiry","adminKey","setAdminKey","payerAccountID","setPayerAccountId","scheduleMemo","setScheduleMemo","_defaultMaxTransactionFee","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","create","scheduleCreate","_fromProtobufTransactions","_fromProtobufKey","undefined","memo","waitForExpiry","expirationTime","_setScheduledTransaction","tx","key","_requireNotFrozen","payerAccountId","account","getScheduleMemo","setScheduledTransaction","transaction","schedule","_validateChecksums","client","validateChecksum","_execute","channel","request","createSchedule","_getTransactionDataCase","_makeTransactionData","_toProtobufKey","_toProtobuf","scheduledTransactionBody","_getScheduledTransactionBody","_getLogId","timestamp","_transactionIds","current","validStart","toString","setExpirationTime","setWaitForExpiry","set","push"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Timestamp from \"../Timestamp.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n    SCHEDULE_CREATE_TRANSACTION,\n} from \"../transaction/Transaction.js\";\nimport Key from \"../Key.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IScheduleCreateTransactionBody} HashgraphProto.proto.IScheduleCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ISignatureMap} HashgraphProto.proto.ISignatureMap\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n */\n\n/**\n * Create a new Hedera™ crypto-currency account.\n */\nexport default class ScheduleCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.adminKey]\n     * @param {AccountId} [props.payerAccountID]\n     * @param {string} [props.scheduleMemo]\n     * @param {Timestamp} [props.expirationTime]\n     * @param {boolean} [props.waitForExpiry]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Transaction}\n         */\n        this._scheduledTransaction = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._payerAccountId = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._scheduleMemo = null;\n\n        /**\n         * @private\n         * @type {Set<string>}\n         */\n        this._scheduledSignerPublicKeys = new Set();\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._waitForExpiry = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.payerAccountID != null) {\n            this.setPayerAccountId(props.payerAccountID);\n        }\n\n        if (props.scheduleMemo != null) {\n            this.setScheduleMemo(props.scheduleMemo);\n        }\n\n        this._defaultMaxTransactionFee = new Hbar(5);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {ScheduleCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create =\n            /** @type {HashgraphProto.proto.IScheduleCreateTransactionBody} */ (\n                body.scheduleCreate\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new ScheduleCreateTransaction({\n                adminKey:\n                    create.adminKey != null\n                        ? Key._fromProtobufKey(create.adminKey)\n                        : undefined,\n                payerAccountID:\n                    create.payerAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HashgraphProto.proto.IAccountID} */ (\n                                  create.payerAccountID\n                              )\n                          )\n                        : undefined,\n                scheduleMemo: create.memo != null ? create.memo : undefined,\n                waitForExpiry:\n                    create.waitForExpiry != null\n                        ? create.waitForExpiry\n                        : undefined,\n                expirationTime:\n                    create.expirationTime != null\n                        ? Timestamp._fromProtobuf(create.expirationTime)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @internal\n     * @param {Transaction} tx\n     * @returns {this}\n     */\n    _setScheduledTransaction(tx) {\n        this._scheduledTransaction = tx;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setAdminKey(key) {\n        this._requireNotFrozen();\n        this._adminKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get payerAccountId() {\n        return this._payerAccountId;\n    }\n\n    /**\n     * @param {AccountId} account\n     * @returns {this}\n     */\n    setPayerAccountId(account) {\n        this._requireNotFrozen();\n        this._payerAccountId = account;\n\n        return this;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setScheduleMemo(memo) {\n        this._requireNotFrozen();\n        this._scheduleMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get getScheduleMemo() {\n        this._requireNotFrozen();\n        return this._scheduleMemo;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {this}\n     */\n    setScheduledTransaction(transaction) {\n        this._requireNotFrozen();\n        transaction._requireNotFrozen();\n\n        this._scheduledTransaction =\n            transaction.schedule()._scheduledTransaction;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._payerAccountId != null) {\n            this._payerAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.schedule.createSchedule(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"scheduleCreate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.IScheduleCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            payerAccountID:\n                this._payerAccountId != null\n                    ? this._payerAccountId._toProtobuf()\n                    : null,\n            scheduledTransactionBody:\n                this._scheduledTransaction != null\n                    ? this._scheduledTransaction._getScheduledTransactionBody()\n                    : null,\n            memo: this._scheduleMemo,\n            waitForExpiry: this._waitForExpiry,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ScheduleCreateTransaction:${timestamp.toString()}`;\n    }\n\n    /**\n     * @param {?Timestamp} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._expirationTime = expirationTime;\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        this._requireNotFrozen();\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {boolean} waitForExpiry\n     * @returns {this}\n     */\n    setWaitForExpiry(waitForExpiry) {\n        this._waitForExpiry = waitForExpiry;\n\n        return this;\n    }\n\n    /**\n     * @returns {?boolean}\n     */\n    get waitForExpiry() {\n        this._requireNotFrozen();\n        return this._waitForExpiry;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"scheduleCreate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ScheduleCreateTransaction._fromProtobuf\n);\n\nSCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());\n"]},"metadata":{},"sourceType":"module"}