{"ast":null,"code":"var cbor = require('cbor-js');\n\nvar CRC = require('crc');\n\nvar base58 = require('./crypto/base58');\n\nvar BIP173Validator = require('./bip173_validator');\n\nfunction getDecoded(address) {\n  try {\n    var decoded = base58.decode(address);\n    return cbor.decode(new Uint8Array(decoded).buffer);\n  } catch (e) {\n    // if decoding fails, assume invalid address\n    return null;\n  }\n}\n\nfunction isValidAddressV1(address) {\n  var decoded = getDecoded(address);\n\n  if (!decoded || !Array.isArray(decoded) && decoded.length != 2) {\n    return false;\n  }\n\n  var tagged = decoded[0];\n  var validCrc = decoded[1];\n\n  if (typeof validCrc != 'number') {\n    return false;\n  } // get crc of the payload\n\n\n  var crc = CRC.crc32(tagged);\n  return crc == validCrc;\n}\n\nfunction isValidAddressShelley(address, currency, opts) {\n  // shelley address are just bip 173 - bech32 addresses (https://cips.cardano.org/cips/cip4/)\n  return BIP173Validator.isValidAddress(address, currency, opts);\n}\n\nmodule.exports = {\n  isValidAddress: function (address, currency) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return isValidAddressV1(address) || isValidAddressShelley(address, currency, opts);\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/ada_validator.js"],"names":["cbor","require","CRC","base58","BIP173Validator","getDecoded","address","decoded","decode","Uint8Array","buffer","e","isValidAddressV1","Array","isArray","length","tagged","validCrc","crc","crc32","isValidAddressShelley","currency","opts","isValidAddress","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA7B;;AAEA,SAASI,UAAT,CAAoBC,OAApB,EAA6B;AACzB,MAAI;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,MAAP,CAAcF,OAAd,CAAd;AACA,WAAON,IAAI,CAACQ,MAAL,CAAY,IAAIC,UAAJ,CAAeF,OAAf,EAAwBG,MAApC,CAAP;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACR;AACA,WAAO,IAAP;AACH;AACJ;;AAED,SAASC,gBAAT,CAA0BN,OAA1B,EAAmC;AAC/B,MAAIC,OAAO,GAAGF,UAAU,CAACC,OAAD,CAAxB;;AAEA,MAAI,CAACC,OAAD,IAAa,CAACM,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAD,IAA2BA,OAAO,CAACQ,MAAR,IAAkB,CAA9D,EAAkE;AAC9D,WAAO,KAAP;AACH;;AAED,MAAIC,MAAM,GAAGT,OAAO,CAAC,CAAD,CAApB;AACA,MAAIU,QAAQ,GAAGV,OAAO,CAAC,CAAD,CAAtB;;AACA,MAAI,OAAQU,QAAR,IAAqB,QAAzB,EAAmC;AAC/B,WAAO,KAAP;AACH,GAX8B,CAa/B;;;AACA,MAAIC,GAAG,GAAGhB,GAAG,CAACiB,KAAJ,CAAUH,MAAV,CAAV;AAEA,SAAOE,GAAG,IAAID,QAAd;AACH;;AAED,SAASG,qBAAT,CAA+Bd,OAA/B,EAAwCe,QAAxC,EAAkDC,IAAlD,EAAwD;AACpD;AACA,SAAOlB,eAAe,CAACmB,cAAhB,CAA+BjB,OAA/B,EAAwCe,QAAxC,EAAkDC,IAAlD,CAAP;AACH;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACbF,EAAAA,cAAc,EAAE,UAAUjB,OAAV,EAAmBe,QAAnB,EAAwC;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACpD,WAAOV,gBAAgB,CAACN,OAAD,CAAhB,IAA6Bc,qBAAqB,CAACd,OAAD,EAAUe,QAAV,EAAoBC,IAApB,CAAzD;AACH;AAHY,CAAjB","sourcesContent":["var cbor = require('cbor-js');\nvar CRC = require('crc');\nvar base58 = require('./crypto/base58');\nvar BIP173Validator = require('./bip173_validator')\n\nfunction getDecoded(address) {\n    try {\n        var decoded = base58.decode(address);\n        return cbor.decode(new Uint8Array(decoded).buffer);\n    } catch (e) {\n        // if decoding fails, assume invalid address\n        return null;\n    }\n}\n\nfunction isValidAddressV1(address) {\n    var decoded = getDecoded(address);\n\n    if (!decoded || (!Array.isArray(decoded) && decoded.length != 2)) {\n        return false;\n    }\n\n    var tagged = decoded[0];\n    var validCrc = decoded[1];\n    if (typeof (validCrc) != 'number') {\n        return false;\n    }\n\n    // get crc of the payload\n    var crc = CRC.crc32(tagged);\n\n    return crc == validCrc;\n}\n\nfunction isValidAddressShelley(address, currency, opts) {\n    // shelley address are just bip 173 - bech32 addresses (https://cips.cardano.org/cips/cip4/)\n    return BIP173Validator.isValidAddress(address, currency, opts);\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        return isValidAddressV1(address) || isValidAddressShelley(address, currency, opts);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}