{"ast":null,"code":"import { AccountId, TransactionId, AccountBalanceQuery, AccountInfoQuery, AccountRecordsQuery } from \"@hashgraph/sdk\";\nexport class HashConnectSigner {\n  constructor(hashconnect, provider, accountToSign, topic) {\n    this.hashconnect = hashconnect;\n    this.provider = provider;\n    this.accountToSign = accountToSign;\n    this.topicId = topic;\n  }\n\n  getLedgerId() {\n    return this.provider.client.ledgerId;\n  }\n\n  getAccountId() {\n    return AccountId.fromString(this.accountToSign);\n  }\n\n  getNetwork() {\n    let network = {};\n    network[this.accountToSign.toString()] = this.provider.network;\n    return network;\n  }\n\n  getMirrorNetwork() {\n    throw new Error(\"Get Mirror Network not implemented in HashConnect\");\n    return [];\n  }\n\n  sign(messages) {\n    throw new Error(\"Sign messages not implemented in HashConnect\");\n    console.log(messages);\n  }\n\n  getAccountBalance() {\n    return new AccountBalanceQuery().setAccountId(this.accountToSign).execute(this.provider.client);\n  }\n\n  getAccountInfo() {\n    return new AccountInfoQuery().setAccountId(this.accountToSign).execute(this.provider.client);\n  }\n\n  getAccountRecords() {\n    return new AccountRecordsQuery().setAccountId(this.accountToSign).execute(this.provider.client);\n  }\n\n  async signTransaction(transaction) {\n    return transaction.freezeWith(this.provider.client);\n  }\n\n  checkTransaction(transaction) {\n    throw new Error(\"Check transaction not implemented in HashConnect\");\n    console.log(transaction);\n  }\n\n  async populateTransaction(transaction) {\n    // await this.checkTransaction(transaction);\n    transaction.setTransactionId(TransactionId.generate(this.accountToSign));\n    transaction.freezeWith(this.provider.client); // transaction.setNodeAccountIds([]);\n\n    return transaction;\n  }\n\n  async call(request) {\n    const transaction = {\n      byteArray: this.getBytesOf(request),\n      metadata: {\n        accountToSign: this.accountToSign.toString(),\n        returnTransaction: false\n      },\n      topic: this.topicId\n    };\n    let res = await this.hashconnect.sendTransaction(this.topicId, transaction);\n    let response = res.response;\n    return response;\n  }\n\n  getBytesOf(request) {\n    let transaction = request;\n    let query;\n    if (!transaction) query = request;\n    if (!transaction && !query) throw new Error(\"Only Transactions and Queries can be serialized to be sent for signing by the HashPack wallet.\");\n    if (transaction) return request.toBytes();else return request.toBytes();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AccountId","TransactionId","AccountBalanceQuery","AccountInfoQuery","AccountRecordsQuery","HashConnectSigner","constructor","hashconnect","provider","accountToSign","topic","topicId","getLedgerId","client","ledgerId","getAccountId","fromString","getNetwork","network","toString","getMirrorNetwork","Error","sign","messages","console","log","getAccountBalance","setAccountId","execute","getAccountInfo","getAccountRecords","signTransaction","transaction","freezeWith","checkTransaction","populateTransaction","setTransactionId","generate","call","request","byteArray","getBytesOf","metadata","returnTransaction","res","sendTransaction","response","query","toBytes"],"sourceRoot":"","sources":["../../../src/provider/signer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}