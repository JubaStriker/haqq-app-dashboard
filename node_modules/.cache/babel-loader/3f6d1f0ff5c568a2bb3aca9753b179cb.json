{"ast":null,"code":"import { Event } from \"ts-typed-events\";\nimport { HashConnectConnectionState } from \".\";\nimport WebSocket from 'isomorphic-ws';\nexport class WebSocketRelay {\n  constructor(hc) {\n    this.subscribedTopics = [];\n    this.connected = new Event();\n    this.payload = new Event();\n    this.hc = hc;\n  } // TODO: is there a better way to do this?\n\n\n  processMessage(e) {\n    if (this.hc.debug) console.log(\"hashconnect - emitting payload\");\n    let dataStr = \"\";\n\n    if (typeof e.data === \"string\") {\n      dataStr = e.data;\n    } else {\n      dataStr = e.data.toString();\n    }\n\n    this.payload.emit(JSON.parse(dataStr));\n  }\n\n  async init() {\n    // TODO error flow\n    return new Promise(resolve => {\n      this.connectToSocket(() => {\n        resolve();\n      });\n    });\n  }\n\n  connectToSocket(callback) {\n    // this.socket = new WebSocket('ws://localhost:9001');\n    this.socket = new WebSocket('wss://hashconnect.hashpack.app');\n\n    this.socket.onopen = () => {\n      if (this.hc.debug) console.log(\"hashconnect - connected\");\n      this.hc.connectionStatusChangeEvent.emit(HashConnectConnectionState.Connected);\n      callback();\n    };\n\n    this.socket.onclose = () => {\n      this.hc.status = HashConnectConnectionState.Disconnected;\n      if (this.hc.debug) console.log(\"hashconnect - disconnected\");\n      this.hc.connectionStatusChangeEvent.emit(HashConnectConnectionState.Disconnected);\n      setTimeout(() => {\n        this.reconnect();\n      }, 300);\n    };\n  }\n\n  reconnect() {\n    if (this.hc.debug) console.log(\"hashconnect - reconnecting...\");\n    this.connectToSocket(async () => {\n      for (let topic of this.subscribedTopics) {\n        await this.subscribe(topic);\n      }\n\n      this.hc.status = HashConnectConnectionState.Connected;\n      if (this.hc.debug) console.log(\"hashconnect - reconnected\");\n    });\n  }\n\n  async subscribe(topic) {\n    if (this.hc.debug) console.log(\"hashconnect - Subscribing to topic id \" + topic);\n    if (this.subscribedTopics.indexOf(topic) == -1) this.subscribedTopics.push(topic);\n    this.socket.send(JSON.stringify({\n      action: 'sub',\n      topic: topic\n    }));\n\n    this.socket.onmessage = e => {\n      console.log(\"process\", e);\n      this.processMessage(e);\n    };\n  }\n\n  addDecryptionKey(privKey, topic) {\n    console.log(\"hashconnect - Adding decryption key \\n PrivKey: \" + privKey);\n    if (this.hc.debug) console.log(\"hashconnect - Adding decryption key \\n PrivKey: \" + privKey);\n    this.hc.encryptionKeys[topic] = privKey;\n  }\n\n  async unsubscribe(topic) {\n    if (this.hc.debug) console.log(\"hashconnect - Unsubscribing to \" + topic);\n    this.socket.send(JSON.stringify({\n      action: \"unsub\",\n      topic: topic\n    }));\n  } // TODO: determine appropriate types for sending messages, string should suffice for now\n\n\n  async publish(topic, message, pubKey) {\n    const msg = {\n      action: \"pub\",\n      payload: JSON.stringify(message),\n      topic: topic\n    };\n    if (this.hc.debug) console.log(\"hashconnect - Sending payload to \" + topic, \"\\n encrypted with \" + pubKey);\n    await this.socket.send(JSON.stringify(msg));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Event","HashConnectConnectionState","WebSocket","WebSocketRelay","constructor","hc","connected","payload","processMessage","e","debug","console","log","dataStr","data","toString","emit","JSON","parse","init","Promise","resolve","connectToSocket","callback","socket","onopen","connectionStatusChangeEvent","Connected","onclose","status","Disconnected","setTimeout","reconnect","topic","subscribedTopics","subscribe","indexOf","push","send","stringify","action","onmessage","addDecryptionKey","privKey","encryptionKeys","unsubscribe","publish","message","pubKey","msg"],"sourceRoot":"","sources":["../../../src/types/relay.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}