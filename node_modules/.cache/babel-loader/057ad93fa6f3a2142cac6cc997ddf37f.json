{"ast":null,"code":"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\nimport { HashConnect } from \"hashconnect\";\nconst VERIFY_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nlet hashConnect = new HashConnect();\nconst useWalletStore = create((set, address) => ({\n  verifyWalletSate: VERIFY_WALLET_STATE,\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async data => {\n    set(produce(state => ({ ...state,\n      verifyWalletSate: { ...state.verifyWalletSate,\n        get: { ...VERIFY_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      // console.log(data);\n      const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${data}`);\n      const response = await fetchAccount.json();\n      console.log(response.accounts[0].account);\n\n      if (data === response.accounts[0].account) {\n        set(produce(state => ({ ...state,\n          verifyWalletSate: { ...state.verifyWalletSate,\n            get: { ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: true\n              }\n            }\n          }\n        })));\n      }\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        verifyWalletSate: { ...state.verifyWalletSate,\n          get: { ...VERIFY_WALLET_STATE.get,\n            loading: false,\n            success: {\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  fetchWalletAddress: async () => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        get: { ...INITIAL_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      console.log('Fetch Wallet');\n      const appMetadata = {\n        name: \"Hbar Shopify Shop\",\n        description: \"Shop the look using HBAR\",\n        icon: \"https://s2.coinmarketcap.com/static/img/coins/64x64/4642.png\"\n      };\n      const initData = await hashConnect.init(appMetadata, \"testnet\", false);\n      console.log('Init Data:', initData);\n      await hashConnect.foundExtensionEvent.once(walletMetadata => {\n        console.log('Wallet MetaData: ', walletMetadata);\n        hashConnect.connectToLocalWallet(initData.pairingString, walletMetadata);\n      });\n      let walletAddress = \"\";\n      hashConnect.pairingEvent.once(pairingData => {\n        console.log(\"Paired Data: \", pairingData);\n        pairingData.accountIds.forEach(id => {\n          walletAddress = id;\n        });\n        set(produce(state => ({ ...state,\n          walletState: { ...state.walletState,\n            get: { ...INITIAL_WALLET_STATE.get,\n              success: {\n                data: walletAddress,\n                ok: true\n              }\n            }\n          }\n        })));\n      });\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            loading: false,\n            success: {\n              data: e.message,\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  getWalletAddress: async shop => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        get: { ...INITIAL_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`); // console.log(data);\n\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            success: {\n              data: data,\n              ok: true\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            loading: false,\n            success: {\n              data: e.message,\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  postWalletAddress: async _ref => {\n    let {\n      shop,\n      walletAddress\n    } = _ref;\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        post: { ...INITIAL_WALLET_STATE.post,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.post(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`, {\n        shop,\n        walletAddress\n      });\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: true\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: false\n            },\n            failure: {\n              error: false,\n              message: \"Please Verify the Wallet Address\"\n            }\n          }\n        }\n      })));\n      throw error;\n    }\n  }\n}));\nexport default useWalletStore;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/wallet/index.js"],"names":["create","axios","produce","INTERNAL_SERVER_ERROR","Parse","HashConnect","VERIFY_WALLET_STATE","get","loading","success","ok","data","failure","error","message","INITIAL_WALLET_STATE","post","hashConnect","useWalletStore","set","address","verifyWalletSate","walletState","verifyWalletAddress","state","fetchAccount","fetch","response","json","console","log","accounts","account","e","fetchWalletAddress","appMetadata","name","description","icon","initData","init","foundExtensionEvent","once","walletMetadata","connectToLocalWallet","pairingString","walletAddress","pairingEvent","pairingData","accountIds","forEach","id","getWalletAddress","shop","process","env","REACT_APP_API_SHOPLOOKS_SERVER_URL","postWalletAddress"],"mappings":"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","sourcesContent":["import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\nimport { HashConnect } from \"hashconnect\";\n\nconst VERIFY_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n}\n\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nlet hashConnect = new HashConnect();\nconst useWalletStore = create((set, address) => ({\n  verifyWalletSate: VERIFY_WALLET_STATE,\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async (data) => {\n    set(\n      produce((state) => ({\n        ...state,\n        verifyWalletSate: {\n          ...state.verifyWalletSate,\n          get: {\n            ...VERIFY_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try{\n      // console.log(data);\n    const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${data}`);\n    const response = await fetchAccount.json();\n    console.log(response.accounts[0].account);\n\n    if(data === response.accounts[0].account){\n      set(\n        produce((state) => ({\n          ...state,\n          verifyWalletSate: {\n            ...state.verifyWalletSate,\n            get: {\n              ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: true\n              }\n            },\n          },\n        }))\n      );\n    }\n    \n    }catch(e){\n      set(\n        produce((state) => ({\n          ...state,\n          verifyWalletSate: {\n            ...state.verifyWalletSate,\n            get: {\n              ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: false\n              }\n            },\n          },\n        }))\n      );\n    }\n  },\n  fetchWalletAddress: async () => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try{\n      console.log('Fetch Wallet')\n      const appMetadata = {\n        name: \"Hbar Shopify Shop\",\n        description: \"Shop the look using HBAR\",\n        icon: \"https://s2.coinmarketcap.com/static/img/coins/64x64/4642.png\",\n      };\n\n      const initData = await hashConnect.init(appMetadata, \"testnet\", false);\n      console.log('Init Data:',initData);\n\n      await hashConnect.foundExtensionEvent.once((walletMetadata) => {\n        console.log('Wallet MetaData: ', walletMetadata);\n        hashConnect.connectToLocalWallet(\n          initData.pairingString,\n          walletMetadata\n        );\n        \n      });\n\n      let walletAddress = \"\";\n      hashConnect.pairingEvent.once((pairingData) => {\n        console.log(\"Paired Data: \", pairingData);\n        pairingData.accountIds.forEach((id) => {\n          walletAddress = id;\n        });\n        set(\n          produce((state) => ({\n            ...state,\n            walletState: {\n              ...state.walletState,\n              get: {\n                ...INITIAL_WALLET_STATE.get,\n                success: {\n                  data: walletAddress,\n                  ok: true,\n                },\n              },\n            },\n          }))\n        );\n      });\n    }catch (e){\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              loading: false,\n              success:{\n                data: e.message,\n                ok: false,\n              }\n            },\n          },\n        }))\n      );\n    }\n\n  },\n  getWalletAddress: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      // console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              success: {\n                data: data,\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              loading: false,\n              success:{\n                data: e.message,\n                ok: false,\n              }\n            },\n          },\n        }))\n      );\n    }\n  },\n  postWalletAddress: async ({ shop, walletAddress }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          post: {\n            ...INITIAL_WALLET_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`,\n        {\n          shop,\n          walletAddress,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: false,\n              },\n              failure: {\n                error: false,\n                message: \"Please Verify the Wallet Address\",\n              },\n            },\n          },\n        }))\n      );\n      throw error;\n    }\n  },\n}));\n\nexport default useWalletStore;\n"]},"metadata":{},"sourceType":"module"}