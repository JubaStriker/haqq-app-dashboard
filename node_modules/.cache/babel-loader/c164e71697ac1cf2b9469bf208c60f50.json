{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport * as entity_id from \"../EntityIdHelper.js\";\nimport Key from \"../Key.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport CACHE from \"../Cache.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport Long from \"long\";\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency contract on Hedera.\n */\n\nexport default class ContractId extends Key {\n  /**\n   * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n   * @param {(number | Long)=} realm\n   * @param {(number | Long)=} num\n   * @param {Uint8Array=} evmAddress\n   */\n  constructor(props, realm, num, evmAddress) {\n    super();\n    const result = entity_id.constructor(props, realm, num);\n    this.shard = result.shard;\n    this.realm = result.realm;\n    this.num = result.num;\n    this.evmAddress = evmAddress != null ? evmAddress : null;\n    /**\n     * @type {string | null}\n     */\n\n    this._checksum = null;\n  }\n  /**\n   * @param {Long | number} shard\n   * @param {Long | number} realm\n   * @param {string} evmAddress\n   * @returns {ContractId}\n   */\n\n\n  static fromEvmAddress(shard, realm, evmAddress) {\n    return new ContractId(shard, realm, 0, hex.decode(evmAddress));\n  }\n  /**\n   * @param {string} text\n   * @returns {ContractId}\n   */\n\n\n  static fromString(text) {\n    const result = entity_id.fromStringSplitter(text);\n\n    if (Number.isNaN(result.shard) || Number.isNaN(result.realm)) {\n      throw new Error(\"invalid format for entity ID\");\n    }\n\n    const shard = result.shard != null ? Long.fromString(result.shard) : Long.ZERO;\n    const realm = result.realm != null ? Long.fromString(result.realm) : Long.ZERO;\n    const [num, evmAddress] = result.numOrHex.length < 40 ? [Long.fromString(result.numOrHex), undefined] : [Long.ZERO, hex.decode(result.numOrHex)];\n    return new ContractId(shard, realm, num, evmAddress);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IContractID} id\n   * @returns {ContractId}\n   */\n\n\n  static _fromProtobuf(id) {\n    const contractId = new ContractId(id.shardNum != null ? id.shardNum : 0, id.realmNum != null ? id.realmNum : 0, id.contractNum != null ? id.contractNum : 0);\n    return contractId;\n  }\n  /**\n   * @returns {string | null}\n   */\n\n\n  get checksum() {\n    return this._checksum;\n  }\n  /**\n   * @deprecated - Use `validateChecksum` instead\n   * @param {Client} client\n   */\n\n\n  validate(client) {\n    console.warn(\"Deprecated: Use `validateChecksum` instead\");\n    this.validateChecksum(client);\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  validateChecksum(client) {\n    entity_id.validateChecksum(this.shard, this.realm, this.num, this._checksum, client);\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {ContractId}\n   */\n\n\n  static fromBytes(bytes) {\n    return ContractId._fromProtobuf(HashgraphProto.proto.ContractID.decode(bytes));\n  }\n  /**\n   * @param {string} address\n   * @returns {ContractId}\n   */\n\n\n  static fromSolidityAddress(address) {\n    const [shard, realm, contract] = entity_id.fromSolidityAddress(address);\n    return new ContractId(shard, realm, contract);\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toSolidityAddress() {\n    if (this.evmAddress != null) {\n      return hex.encode(this.evmAddress);\n    } else {\n      return entity_id.toSolidityAddress([this.shard, this.realm, this.num]);\n    }\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.IContractID}\n   */\n\n\n  _toProtobuf() {\n    return {\n      contractNum: this.num,\n      shardNum: this.shard,\n      realmNum: this.realm,\n      evmAddress: this.evmAddress\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    if (this.evmAddress != null) {\n      return `${this.shard.toString()}.${this.realm.toString()}.${hex.encode(this.evmAddress)}`;\n    } else {\n      return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n  }\n  /**\n   * @param {Client} client\n   * @returns {string}\n   */\n\n\n  toStringWithChecksum(client) {\n    return entity_id.toStringWithChecksum(this.toString(), client);\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.ContractID.encode(this._toProtobuf()).finish();\n  }\n  /**\n   * @returns {ContractId}\n   */\n\n\n  clone() {\n    const id = new ContractId(this);\n    id._checksum = this._checksum;\n    id.evmAddress = this.evmAddress;\n    return id;\n  }\n  /**\n   * @param {ContractId} other\n   * @returns {number}\n   */\n\n\n  compare(other) {\n    return entity_id.compare([this.shard, this.realm, this.num], [other.shard, other.realm, other.num]);\n  }\n  /**\n   * @returns {HashgraphProto.proto.IKey}\n   */\n\n\n  _toProtobufKey() {\n    return {\n      contractID: this._toProtobuf()\n    };\n  }\n  /**\n   * @param {HashgraphProto.proto.IContractID} key\n   * @returns {ContractId}\n   */\n\n\n  static __fromProtobufKey(key) {\n    return ContractId._fromProtobuf(key);\n  }\n\n}\nCACHE.setContractId(key => ContractId.__fromProtobufKey(key));","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/contract/ContractId.js"],"names":["entity_id","Key","HashgraphProto","CACHE","hex","Long","ContractId","constructor","props","realm","num","evmAddress","result","shard","_checksum","fromEvmAddress","decode","fromString","text","fromStringSplitter","Number","isNaN","Error","ZERO","numOrHex","length","undefined","_fromProtobuf","id","contractId","shardNum","realmNum","contractNum","checksum","validate","client","console","warn","validateChecksum","fromBytes","bytes","proto","ContractID","fromSolidityAddress","address","contract","toSolidityAddress","encode","_toProtobuf","toString","toStringWithChecksum","toBytes","finish","clone","compare","other","_toProtobufKey","contractID","__fromProtobufKey","key","setContractId"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as entity_id from \"../EntityIdHelper.js\";\nimport Key from \"../Key.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport CACHE from \"../Cache.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency contract on Hedera.\n */\nexport default class ContractId extends Key {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     * @param {Uint8Array=} evmAddress\n     */\n    constructor(props, realm, num, evmAddress) {\n        super();\n\n        const result = entity_id.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        this.evmAddress = evmAddress != null ? evmAddress : null;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @param {Long | number} shard\n     * @param {Long | number} realm\n     * @param {string} evmAddress\n     * @returns {ContractId}\n     */\n    static fromEvmAddress(shard, realm, evmAddress) {\n        return new ContractId(shard, realm, 0, hex.decode(evmAddress));\n    }\n\n    /**\n     * @param {string} text\n     * @returns {ContractId}\n     */\n    static fromString(text) {\n        const result = entity_id.fromStringSplitter(text);\n\n        if (Number.isNaN(result.shard) || Number.isNaN(result.realm)) {\n            throw new Error(\"invalid format for entity ID\");\n        }\n\n        const shard =\n            result.shard != null ? Long.fromString(result.shard) : Long.ZERO;\n        const realm =\n            result.realm != null ? Long.fromString(result.realm) : Long.ZERO;\n        const [num, evmAddress] =\n            result.numOrHex.length < 40\n                ? [Long.fromString(result.numOrHex), undefined]\n                : [Long.ZERO, hex.decode(result.numOrHex)];\n\n        return new ContractId(shard, realm, num, evmAddress);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IContractID} id\n     * @returns {ContractId}\n     */\n    static _fromProtobuf(id) {\n        const contractId = new ContractId(\n            id.shardNum != null ? id.shardNum : 0,\n            id.realmNum != null ? id.realmNum : 0,\n            id.contractNum != null ? id.contractNum : 0\n        );\n\n        return contractId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        entity_id.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractId}\n     */\n    static fromBytes(bytes) {\n        return ContractId._fromProtobuf(\n            HashgraphProto.proto.ContractID.decode(bytes)\n        );\n    }\n\n    /**\n     * @param {string} address\n     * @returns {ContractId}\n     */\n    static fromSolidityAddress(address) {\n        const [shard, realm, contract] = entity_id.fromSolidityAddress(address);\n        return new ContractId(shard, realm, contract);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toSolidityAddress() {\n        if (this.evmAddress != null) {\n            return hex.encode(this.evmAddress);\n        } else {\n            return entity_id.toSolidityAddress([\n                this.shard,\n                this.realm,\n                this.num,\n            ]);\n        }\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IContractID}\n     */\n    _toProtobuf() {\n        return {\n            contractNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n            evmAddress: this.evmAddress,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        if (this.evmAddress != null) {\n            return `${this.shard.toString()}.${this.realm.toString()}.${hex.encode(\n                this.evmAddress\n            )}`;\n        } else {\n            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n        }\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return entity_id.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.ContractID.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n\n    /**\n     * @returns {ContractId}\n     */\n    clone() {\n        const id = new ContractId(this);\n        id._checksum = this._checksum;\n        id.evmAddress = this.evmAddress;\n        return id;\n    }\n\n    /**\n     * @param {ContractId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return entity_id.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num]\n        );\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.IKey}\n     */\n    _toProtobufKey() {\n        return {\n            contractID: this._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {HashgraphProto.proto.IContractID} key\n     * @returns {ContractId}\n     */\n    static __fromProtobufKey(key) {\n        return ContractId._fromProtobuf(key);\n    }\n}\n\nCACHE.setContractId((key) => ContractId.__fromProtobufKey(key));\n"]},"metadata":{},"sourceType":"module"}