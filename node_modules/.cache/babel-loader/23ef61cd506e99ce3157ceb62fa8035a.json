{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedNftAllowance} HashgraphProto.proto.IGrantedNftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftRemoveAllowance} HashgraphProto.proto.INftRemoveAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftAllowance} HashgraphProto.proto.INftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\nexport default class TokenNftAllowance {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {TokenId} props.tokenId\n   * @param {AccountId | null} props.spenderAccountId\n   * @param {AccountId | null} props.ownerAccountId\n   * @param {Long[] | null} props.serialNumbers\n   * @param {boolean | null} props.allSerials\n   */\n  constructor(props) {\n    /**\n     * The token that the allowance pertains to.\n     *\n     * @readonly\n     */\n    this.tokenId = props.tokenId;\n    /**\n     * The account ID of the spender of the hbar allowance.\n     *\n     * @readonly\n     */\n\n    this.spenderAccountId = props.spenderAccountId;\n    /**\n     * The account ID of the owner of the hbar allowance.\n     *\n     * @readonly\n     */\n\n    this.ownerAccountId = props.ownerAccountId;\n    /**\n     * The current balance of the spender's token allowance.\n     * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n     * (currently owned and any in the future).\n     *\n     * @readonly\n     */\n\n    this.serialNumbers = props.serialNumbers;\n    /**\n     * @readonly\n     */\n\n    this.allSerials = props.allSerials;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.INftAllowance} allowance\n   * @returns {TokenNftAllowance}\n   */\n\n\n  static _fromProtobuf(allowance) {\n    const allSerials = allowance.approvedForAll != null && allowance.approvedForAll.value == true;\n    return new TokenNftAllowance({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      allowance.tokenId),\n      spenderAccountId: allowance.spender != null ? AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      allowance.spender) : null,\n      ownerAccountId: allowance.owner != null ? AccountId._fromProtobuf(\n      /**@type {HashgraphProto.proto.IAccountID}*/\n      allowance.owner) : null,\n      serialNumbers: allSerials ? null : allowance.serialNumbers != null ? allowance.serialNumbers.map(serialNumber => Long.fromValue(serialNumber)) : [],\n      allSerials\n    });\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IGrantedNftAllowance} allowance\n   * @param {AccountId} ownerAccountId\n   * @returns {TokenNftAllowance}\n   */\n\n\n  static _fromGrantedProtobuf(allowance, ownerAccountId) {\n    return new TokenNftAllowance({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      allowance.tokenId),\n      spenderAccountId: AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      allowance.spender),\n      ownerAccountId,\n      serialNumbers: [],\n      allSerials: null\n    });\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.INftRemoveAllowance} allowance\n   * @returns {TokenNftAllowance}\n   */\n\n\n  static _fromRemoveProtobuf(allowance) {\n    return new TokenNftAllowance({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      allowance.tokenId),\n      spenderAccountId: null,\n      ownerAccountId: allowance.owner != null ? AccountId._fromProtobuf(\n      /**@type {HashgraphProto.proto.IAccountID}*/\n      allowance.owner) : null,\n      serialNumbers: allowance.serialNumbers != null ? allowance.serialNumbers.map(serialNumber => Long.fromValue(serialNumber)) : [],\n      allSerials: null\n    });\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.INftAllowance}\n   */\n\n\n  _toProtobuf() {\n    return {\n      tokenId: this.tokenId._toProtobuf(),\n      spender: this.spenderAccountId != null ? this.spenderAccountId._toProtobuf() : null,\n      owner: this.ownerAccountId != null ? this.ownerAccountId._toProtobuf() : null,\n      approvedForAll: this.serialNumbers == null ? {\n        value: this.allSerials\n      } : null,\n      serialNumbers: this.serialNumbers\n    };\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    this.tokenId.validateChecksum(client);\n\n    if (this.ownerAccountId != null) {\n      this.ownerAccountId.validateChecksum(client);\n    }\n\n    if (this.spenderAccountId != null) {\n      this.spenderAccountId.validateChecksum(client);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/TokenNftAllowance.js"],"names":["TokenId","AccountId","Long","TokenNftAllowance","constructor","props","tokenId","spenderAccountId","ownerAccountId","serialNumbers","allSerials","Object","freeze","_fromProtobuf","allowance","approvedForAll","value","spender","owner","map","serialNumber","fromValue","_fromGrantedProtobuf","_fromRemoveProtobuf","_toProtobuf","_validateChecksums","client","validateChecksum"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedNftAllowance} HashgraphProto.proto.IGrantedNftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftRemoveAllowance} HashgraphProto.proto.INftRemoveAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftAllowance} HashgraphProto.proto.INftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\nexport default class TokenNftAllowance {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {AccountId | null} props.spenderAccountId\n     * @param {AccountId | null} props.ownerAccountId\n     * @param {Long[] | null} props.serialNumbers\n     * @param {boolean | null} props.allSerials\n     */\n    constructor(props) {\n        /**\n         * The token that the allowance pertains to.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The account ID of the spender of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.spenderAccountId = props.spenderAccountId;\n\n        /**\n         * The account ID of the owner of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.ownerAccountId = props.ownerAccountId;\n\n        /**\n         * The current balance of the spender's token allowance.\n         * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n         * (currently owned and any in the future).\n         *\n         * @readonly\n         */\n        this.serialNumbers = props.serialNumbers;\n\n        /**\n         * @readonly\n         */\n        this.allSerials = props.allSerials;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.INftAllowance} allowance\n     * @returns {TokenNftAllowance}\n     */\n    static _fromProtobuf(allowance) {\n        const allSerials =\n            allowance.approvedForAll != null &&\n            allowance.approvedForAll.value == true;\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (allowance.tokenId)\n            ),\n            spenderAccountId:\n                allowance.spender != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HashgraphProto.proto.IAccountID} */ (\n                              allowance.spender\n                          )\n                      )\n                    : null,\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HashgraphProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          )\n                      )\n                    : null,\n            serialNumbers: allSerials\n                ? null\n                : allowance.serialNumbers != null\n                ? allowance.serialNumbers.map((serialNumber) =>\n                      Long.fromValue(serialNumber)\n                  )\n                : [],\n            allSerials,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IGrantedNftAllowance} allowance\n     * @param {AccountId} ownerAccountId\n     * @returns {TokenNftAllowance}\n     */\n    static _fromGrantedProtobuf(allowance, ownerAccountId) {\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (allowance.tokenId)\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IAccountID} */ (\n                    allowance.spender\n                )\n            ),\n            ownerAccountId,\n            serialNumbers: [],\n            allSerials: null,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.INftRemoveAllowance} allowance\n     * @returns {TokenNftAllowance}\n     */\n    static _fromRemoveProtobuf(allowance) {\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (allowance.tokenId)\n            ),\n            spenderAccountId: null,\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HashgraphProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          )\n                      )\n                    : null,\n            serialNumbers:\n                allowance.serialNumbers != null\n                    ? allowance.serialNumbers.map((serialNumber) =>\n                          Long.fromValue(serialNumber)\n                      )\n                    : [],\n            allSerials: null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.INftAllowance}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            spender:\n                this.spenderAccountId != null\n                    ? this.spenderAccountId._toProtobuf()\n                    : null,\n            owner:\n                this.ownerAccountId != null\n                    ? this.ownerAccountId._toProtobuf()\n                    : null,\n            approvedForAll:\n                this.serialNumbers == null ? { value: this.allSerials } : null,\n            serialNumbers: this.serialNumbers,\n        };\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this.tokenId.validateChecksum(client);\n\n        if (this.ownerAccountId != null) {\n            this.ownerAccountId.validateChecksum(client);\n        }\n\n        if (this.spenderAccountId != null) {\n            this.spenderAccountId.validateChecksum(client);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}