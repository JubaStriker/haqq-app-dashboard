{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Long from \"long\";\nexport default class ExchangeRate {\n  /**\n   * @private\n   * @param {object} props\n   * @param {number} props.hbars\n   * @param {number} props.cents\n   * @param {Date} props.expirationTime\n   */\n  constructor(props) {\n    /**\n     * Denotes Hbar equivalent to cents (USD)\n     *\n     * @readonly\n     * @type {number}\n     */\n    this.hbars = props.hbars;\n    /**\n     * Denotes cents (USD) equivalent to Hbar\n     *\n     * @readonly\n     * @type {number}\n     */\n\n    this.cents = props.cents;\n    /**\n     * Expiration time of this exchange rate\n     *\n     * @readonly\n     * @type {Date}\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * Calculated exchange rate\n     *\n     * @readonly\n     * @type {number}\n     */\n\n    this.exchangeRateInCents = props.cents / props.hbars;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {import(\"@hashgraph/proto\").proto.IExchangeRate} rate\n   * @returns {ExchangeRate}\n   */\n\n\n  static _fromProtobuf(rate) {\n    return new ExchangeRate({\n      hbars:\n      /** @type {number} */\n      rate.hbarEquiv,\n      cents:\n      /** @type {number} */\n      rate.centEquiv,\n      expirationTime: new Date(rate.expirationTime != null ? rate.expirationTime.seconds != null ? Long.isLong(rate.expirationTime.seconds) ? rate.expirationTime.seconds.toInt() * 1000 : rate.expirationTime.seconds : 0 : 0)\n    });\n  }\n  /**\n   * @internal\n   * @returns {import(\"@hashgraph/proto\").proto.IExchangeRate}\n   */\n\n\n  _toProtobuf() {\n    return {\n      hbarEquiv: this.hbars,\n      centEquiv: this.cents,\n      expirationTime: {\n        seconds: Long.fromNumber(Math.trunc(this.expirationTime.getTime() / 1000))\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/ExchangeRate.js"],"names":["Long","ExchangeRate","constructor","props","hbars","cents","expirationTime","exchangeRateInCents","Object","freeze","_fromProtobuf","rate","hbarEquiv","centEquiv","Date","seconds","isLong","toInt","_toProtobuf","fromNumber","Math","trunc","getTime"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACA;AACQ,SAAKC,KAAL,GAAaD,KAAK,CAACC,KAAnB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,KAAL,GAAaF,KAAK,CAACE,KAAnB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBH,KAAK,CAACG,cAA5B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,mBAAL,GAA2BJ,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACC,KAA/C;AAEAI,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,IAAD,EAAO;AACvB,WAAO,IAAIV,YAAJ,CAAiB;AACpBG,MAAAA,KAAK;AAAE;AAAuBO,MAAAA,IAAI,CAACC,SADf;AAEpBP,MAAAA,KAAK;AAAE;AAAuBM,MAAAA,IAAI,CAACE,SAFf;AAGpBP,MAAAA,cAAc,EAAE,IAAIQ,IAAJ,CACZH,IAAI,CAACL,cAAL,IAAuB,IAAvB,GACMK,IAAI,CAACL,cAAL,CAAoBS,OAApB,IAA+B,IAA/B,GACIf,IAAI,CAACgB,MAAL,CAAYL,IAAI,CAACL,cAAL,CAAoBS,OAAhC,IACIJ,IAAI,CAACL,cAAL,CAAoBS,OAApB,CAA4BE,KAA5B,KAAsC,IAD1C,GAEIN,IAAI,CAACL,cAAL,CAAoBS,OAH5B,GAII,CALV,GAMM,CAPM;AAHI,KAAjB,CAAP;AAaH;AAED;AACJ;AACA;AACA;;;AACIG,EAAAA,WAAW,GAAG;AACV,WAAO;AACHN,MAAAA,SAAS,EAAE,KAAKR,KADb;AAEHS,MAAAA,SAAS,EAAE,KAAKR,KAFb;AAGHC,MAAAA,cAAc,EAAE;AACZS,QAAAA,OAAO,EAAEf,IAAI,CAACmB,UAAL,CACLC,IAAI,CAACC,KAAL,CAAW,KAAKf,cAAL,CAAoBgB,OAApB,KAAgC,IAA3C,CADK;AADG;AAHb,KAAP;AASH;;AA/E6B","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Long from \"long\";\n\nexport default class ExchangeRate {\n    /**\n     * @private\n     * @param {object} props\n     * @param {number} props.hbars\n     * @param {number} props.cents\n     * @param {Date} props.expirationTime\n     */\n    constructor(props) {\n        /**\n         * Denotes Hbar equivalent to cents (USD)\n         *\n         * @readonly\n         * @type {number}\n         */\n        this.hbars = props.hbars;\n\n        /**\n         * Denotes cents (USD) equivalent to Hbar\n         *\n         * @readonly\n         * @type {number}\n         */\n        this.cents = props.cents;\n\n        /**\n         * Expiration time of this exchange rate\n         *\n         * @readonly\n         * @type {Date}\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * Calculated exchange rate\n         *\n         * @readonly\n         * @type {number}\n         */\n        this.exchangeRateInCents = props.cents / props.hbars;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {import(\"@hashgraph/proto\").proto.IExchangeRate} rate\n     * @returns {ExchangeRate}\n     */\n    static _fromProtobuf(rate) {\n        return new ExchangeRate({\n            hbars: /** @type {number} */ (rate.hbarEquiv),\n            cents: /** @type {number} */ (rate.centEquiv),\n            expirationTime: new Date(\n                rate.expirationTime != null\n                    ? rate.expirationTime.seconds != null\n                        ? Long.isLong(rate.expirationTime.seconds)\n                            ? rate.expirationTime.seconds.toInt() * 1000\n                            : rate.expirationTime.seconds\n                        : 0\n                    : 0\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {import(\"@hashgraph/proto\").proto.IExchangeRate}\n     */\n    _toProtobuf() {\n        return {\n            hbarEquiv: this.hbars,\n            centEquiv: this.cents,\n            expirationTime: {\n                seconds: Long.fromNumber(\n                    Math.trunc(this.expirationTime.getTime() / 1000)\n                ),\n            },\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}