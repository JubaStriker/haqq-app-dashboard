{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"./AccountId.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteTransactionBody} HashgraphProto.proto.ICryptoDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Marks an account as deleted, moving all its current hbars to another account.\n *\n * It will remain in the ledger, marked as deleted, until it expires.\n * Transfers into it a deleted account fail. But a deleted account can still have its\n * expiration extended in the normal way.\n */\n\nexport default class AccountDeleteTransaction extends Transaction {\n  /**\n   * @param {object} props\n   * @param {AccountId} [props.accountId]\n   * @param {AccountId} [props.transferAccountId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._accountId = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._transferAccountId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n\n    if (props.transferAccountId != null) {\n      this.setTransferAccountId(props.transferAccountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {AccountDeleteTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const accountDelete =\n    /** @type {HashgraphProto.proto.ICryptoDeleteTransactionBody} */\n    body.cryptoDelete;\n    return Transaction._fromProtobufTransactions(new AccountDeleteTransaction({\n      accountId: accountDelete.deleteAccountID != null ? AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      accountDelete.deleteAccountID) : undefined,\n      transferAccountId: accountDelete.transferAccountID != null ? AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      accountDelete.transferAccountID) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account ID which is being deleted in this transaction.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {AccountDeleteTransaction}\n   */\n\n\n  setAccountId(accountId) {\n    this._requireNotFrozen();\n\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get transferAccountId() {\n    return this._transferAccountId;\n  }\n  /**\n   * Set the account ID which will receive all remaining hbars.\n   *\n   * @param {AccountId | string} transferAccountId\n   * @returns {AccountDeleteTransaction}\n   */\n\n\n  setTransferAccountId(transferAccountId) {\n    this._requireNotFrozen();\n\n    this._transferAccountId = typeof transferAccountId === \"string\" ? AccountId.fromString(transferAccountId) : transferAccountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n\n    if (this._transferAccountId != null) {\n      this._transferAccountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.cryptoDelete(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoDelete\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.ICryptoDeleteTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      deleteAccountID: this._accountId != null ? this._accountId._toProtobuf() : null,\n      transferAccountID: this._transferAccountId != null ? this._transferAccountId._toProtobuf() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `AccountDeleteTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoDelete\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountDeleteTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/AccountDeleteTransaction.js"],"names":["AccountId","Transaction","TRANSACTION_REGISTRY","AccountDeleteTransaction","constructor","props","_accountId","_transferAccountId","accountId","setAccountId","transferAccountId","setTransferAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","accountDelete","cryptoDelete","_fromProtobufTransactions","deleteAccountID","undefined","transferAccountID","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteTransactionBody} HashgraphProto.proto.ICryptoDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Marks an account as deleted, moving all its current hbars to another account.\n *\n * It will remain in the ledger, marked as deleted, until it expires.\n * Transfers into it a deleted account fail. But a deleted account can still have its\n * expiration extended in the normal way.\n */\nexport default class AccountDeleteTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {AccountId} [props.accountId]\n     * @param {AccountId} [props.transferAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._transferAccountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.transferAccountId != null) {\n            this.setTransferAccountId(props.transferAccountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const accountDelete =\n            /** @type {HashgraphProto.proto.ICryptoDeleteTransactionBody} */ (\n                body.cryptoDelete\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountDeleteTransaction({\n                accountId:\n                    accountDelete.deleteAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HashgraphProto.proto.IAccountID} */ (\n                                  accountDelete.deleteAccountID\n                              )\n                          )\n                        : undefined,\n                transferAccountId:\n                    accountDelete.transferAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HashgraphProto.proto.IAccountID} */ (\n                                  accountDelete.transferAccountID\n                              )\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID which is being deleted in this transaction.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get transferAccountId() {\n        return this._transferAccountId;\n    }\n\n    /**\n     * Set the account ID which will receive all remaining hbars.\n     *\n     * @param {AccountId | string} transferAccountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setTransferAccountId(transferAccountId) {\n        this._requireNotFrozen();\n        this._transferAccountId =\n            typeof transferAccountId === \"string\"\n                ? AccountId.fromString(transferAccountId)\n                : transferAccountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n\n        if (this._transferAccountId != null) {\n            this._transferAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoDelete(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.ICryptoDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            deleteAccountID:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            transferAccountID:\n                this._transferAccountId != null\n                    ? this._transferAccountId._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDelete\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountDeleteTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}