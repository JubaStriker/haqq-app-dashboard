{"ast":null,"code":"const base58 = require('./crypto/base58');\n\nconst cryptoUtils = require('./crypto/utils');\n\nconst prefix = new Uint8Array([6, 161, 159]);\n\nfunction decodeRaw(buffer) {\n  let payload = buffer.slice(0, -4);\n  let checksum = buffer.slice(-4);\n  let newChecksum = cryptoUtils.hexStr2byteArray(cryptoUtils.sha256x2(cryptoUtils.byteArray2hexStr(payload)));\n  if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;\n  return payload;\n}\n\nconst isValidAddress = function (address) {\n  try {\n    let buffer = base58.decode(address);\n    let payload = decodeRaw(buffer);\n    if (!payload) return false;\n    payload.slice(prefix.length);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nmodule.exports = {\n  isValidAddress\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/tezos_validator.js"],"names":["base58","require","cryptoUtils","prefix","Uint8Array","decodeRaw","buffer","payload","slice","checksum","newChecksum","hexStr2byteArray","sha256x2","byteArray2hexStr","isValidAddress","address","decode","length","e","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAA3B;;AAEA,MAAME,MAAM,GAAG,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,CAAf,CAAf;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,MAAIC,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAd;AACA,MAAIC,QAAQ,GAAGH,MAAM,CAACE,KAAP,CAAa,CAAC,CAAd,CAAf;AACA,MAAIE,WAAW,GAAGR,WAAW,CAACS,gBAAZ,CACdT,WAAW,CAACU,QAAZ,CAAqBV,WAAW,CAACW,gBAAZ,CAA6BN,OAA7B,CAArB,CADc,CAAlB;AAIA,MAAIE,QAAQ,CAAC,CAAD,CAAR,GAAcC,WAAW,CAAC,CAAD,CAAzB,GACAD,QAAQ,CAAC,CAAD,CAAR,GAAcC,WAAW,CAAC,CAAD,CADzB,GAEAD,QAAQ,CAAC,CAAD,CAAR,GAAcC,WAAW,CAAC,CAAD,CAFzB,GAGAD,QAAQ,CAAC,CAAD,CAAR,GAAcC,WAAW,CAAC,CAAD,CAH7B,EAII;AACJ,SAAOH,OAAP;AACH;;AAED,MAAMO,cAAc,GAAG,UAASC,OAAT,EAAkB;AACrC,MAAI;AACA,QAAIT,MAAM,GAAGN,MAAM,CAACgB,MAAP,CAAcD,OAAd,CAAb;AACA,QAAIR,OAAO,GAAGF,SAAS,CAACC,MAAD,CAAvB;AACA,QAAI,CAACC,OAAL,EACI,OAAO,KAAP;AACJA,IAAAA,OAAO,CAACC,KAAR,CAAcL,MAAM,CAACc,MAArB;AACA,WAAO,IAAP;AACH,GAPD,CAOE,OAAOC,CAAP,EAAU;AACR,WAAO,KAAP;AACH;AACJ,CAXD;;AAaAC,MAAM,CAACC,OAAP,GAAiB;AACbN,EAAAA;AADa,CAAjB","sourcesContent":["const base58 = require('./crypto/base58');\nconst cryptoUtils = require('./crypto/utils');\n\nconst prefix = new Uint8Array([6, 161, 159]);\n\nfunction decodeRaw(buffer) {\n    let payload = buffer.slice(0, -4);\n    let checksum = buffer.slice(-4);\n    let newChecksum = cryptoUtils.hexStr2byteArray(\n        cryptoUtils.sha256x2(cryptoUtils.byteArray2hexStr(payload))\n    );\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3])\n        return;\n    return payload;\n}\n\nconst isValidAddress = function(address) {\n    try {\n        let buffer = base58.decode(address);\n        let payload = decodeRaw(buffer);\n        if (!payload)\n            return false;\n        payload.slice(prefix.length);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nmodule.exports = {\n    isValidAddress\n};\n"]},"metadata":{},"sourceType":"script"}