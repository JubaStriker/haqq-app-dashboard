{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenNftInfo from \"./TokenNftInfo.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HashgraphProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoQuery} HashgraphProto.proto.ITokenGetNftInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosQuery} HashgraphProto.proto.ITokenGetNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosQuery} HashgraphProto.proto.ITokenGetAccountNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoResponse} HashgraphProto.proto.ITokenGetNftInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosResponse} HashgraphProto.proto.ITokenGetNftInfosResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosResponse} HashgraphProto.proto.ITokenGetAccountNftInfosResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TokenNftInfo[]>}\n */\n\nexport default class TokenNftInfoQuery extends Query {\n  /**\n   * @param {object} properties\n   * @param {NftId | string} [properties.nftId]\n   * @param {AccountId | string} [properties.accountId]\n   * @param {TokenId | string} [properties.tokenId]\n   * @param {Long | number} [properties.start]\n   * @param {Long | number} [properties.end]\n   */\n  constructor() {\n    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?NftId}\n     */\n\n    this._nftId = null;\n\n    if (properties.nftId != null) {\n      this.setNftId(properties.nftId);\n    }\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n\n    this._accountId = null;\n\n    if (properties.accountId != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setAccountId(properties.accountId);\n    }\n    /**\n     * @private\n     * @type {?TokenId}\n     */\n\n\n    this._tokenId = null;\n\n    if (properties.tokenId != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setTokenId(properties.tokenId);\n    }\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n\n    this._start = null;\n\n    if (properties.start != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setStart(properties.start);\n    }\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n\n    this._end = null;\n\n    if (properties.end != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setEnd(properties.end);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} query\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    if (query.tokenGetNftInfo != null) {\n      const info =\n      /** @type {HashgraphProto.proto.ITokenGetNftInfoQuery} */\n      query.tokenGetNftInfo;\n      return new TokenNftInfoQuery({\n        nftId: info.nftID != null ? NftId._fromProtobuf(info.nftID) : undefined\n      });\n    } else if (query.tokenGetAccountNftInfos != null) {\n      const info =\n      /** @type {HashgraphProto.proto.ITokenGetAccountNftInfosQuery} */\n      query.tokenGetAccountNftInfos;\n      return new TokenNftInfoQuery({\n        accountId: info.accountID != null ? AccountId._fromProtobuf(info.accountID) : undefined,\n        start: info.start != null ? info.start : undefined,\n        end: info.end != null ? info.end : undefined\n      });\n    } else {\n      const info =\n      /** @type {HashgraphProto.proto.ITokenGetNftInfosQuery} */\n      query.tokenGetNftInfos;\n      return new TokenNftInfoQuery({\n        tokenId: info.tokenID != null ? TokenId._fromProtobuf(info.tokenID) : undefined,\n        start: info.start != null ? info.start : undefined,\n        end: info.end != null ? info.end : undefined\n      });\n    }\n  }\n  /**\n   * @returns {?NftId}\n   */\n\n\n  get nftId() {\n    return this._nftId;\n  }\n  /**\n   * Set the token ID for which the info is being requested.\n   *\n   * @param {NftId | string} nftId\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  setNftId(nftId) {\n    this._nftId = typeof nftId === \"string\" ? NftId.fromString(nftId) : NftId._fromProtobuf(nftId._toProtobuf());\n    return this;\n  }\n  /**\n   * @deprecated with no replacement\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    console.warn(\"`TokenNftInfoQuery.accountId` is deprecated with no replacement\");\n    return this._accountId;\n  }\n  /**\n   * @deprecated with no replacement\n   * Set the token ID for which the info is being requested.\n   * @param {AccountId | string} accountId\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  setAccountId(accountId) {\n    console.warn(\"`TokenNftInfoQuery.setAccountId()` is deprecated with no replacement\");\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : AccountId._fromProtobuf(accountId._toProtobuf());\n    return this;\n  }\n  /**\n   * @deprecated with no replacement\n   * @returns {?TokenId}\n   */\n\n\n  get tokenId() {\n    console.warn(\"`TokenNftInfoQuery.tokenId` is deprecated with no replacement\");\n    return this._tokenId;\n  }\n  /**\n   * @deprecated with no replacement\n   * Set the token ID for which the info is being requested.\n   * @param {TokenId | string} tokenId\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  setTokenId(tokenId) {\n    console.warn(\"`TokenNftInfoQuery.setTokenId()` is deprecated with no replacement\");\n    this._tokenId = typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : TokenId._fromProtobuf(tokenId._toProtobuf());\n    return this;\n  }\n  /**\n   * @deprecated with no replacement\n   * @returns {?Long}\n   */\n\n\n  get start() {\n    console.warn(\"`TokenNftInfoQuery.start` is deprecated with no replacement\");\n    return this._start;\n  }\n  /**\n   * @deprecated with no replacement\n   * Set the token ID for which the info is being requested.\n   * @param {Long | number} start\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  setStart(start) {\n    console.warn(\"`TokenNftInfoQuery.setStart()` is deprecated with no replacement\");\n    this._start = typeof start === \"number\" ? Long.fromNumber(start) : start;\n    return this;\n  }\n  /**\n   * @deprecated with no replacement\n   * @returns {?Long}\n   */\n\n\n  get end() {\n    console.warn(\"`TokenNftInfoQuery.end` is deprecated with no replacement\");\n    return this._end;\n  }\n  /**\n   * @deprecated with no replacement\n   * Set the token ID for which the info is being requested.\n   * @param {Long | number} end\n   * @returns {TokenNftInfoQuery}\n   */\n\n\n  setEnd(end) {\n    console.warn(\"`TokenNftInfoQuery.setEnd()` is deprecated with no replacement\");\n    this._end = typeof end === \"number\" ? Long.fromNumber(end) : end;\n    return this;\n  }\n  /**\n   * @override\n   * @param {import(\"../client/Client.js\").default<Channel, *>} client\n   * @returns {Promise<Hbar>}\n   */\n\n\n  async getCost(client) {\n    let cost = await super.getCost(client);\n\n    if (cost.toTinybars().greaterThan(25)) {\n      return cost;\n    } else {\n      return Hbar.fromTinybars(25);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.token.getTokenNftInfo(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {HashgraphProto.proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const infos =\n    /** @type {HashgraphProto.proto.ITokenGetNftInfoResponse} */\n    response.tokenGetNftInfo;\n    return (\n      /** @type {HashgraphProto.proto.IResponseHeader} */\n      infos.header\n    );\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<TokenNftInfo[]>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const nfts = [\n    /** @type {HashgraphProto.proto.ITokenNftInfo} */\n\n    /** @type {HashgraphProto.proto.ITokenGetNftInfoResponse} */\n    response.tokenGetNftInfo.nft];\n    return Promise.resolve(nfts.map(nft => TokenNftInfo._fromProtobuf(\n    /** @type {HashgraphProto.proto.ITokenNftInfo} */\n    nft)));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQueryHeader} header\n   * @returns {HashgraphProto.proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      tokenGetNftInfo: {\n        header,\n        nftID: this._nftId != null ? this._nftId._toProtobuf() : null\n      }\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp = this._paymentTransactionId != null && this._paymentTransactionId.validStart != null ? this._paymentTransactionId.validStart : this._timestamp;\n    return `TokenNftInfoQuery:${timestamp.toString()}`;\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"tokenGetNftInfo\", TokenNftInfoQuery._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/token/TokenNftInfoQuery.js"],"names":["Query","QUERY_REGISTRY","NftId","AccountId","TokenId","TokenNftInfo","Hbar","Long","TokenNftInfoQuery","constructor","properties","_nftId","nftId","setNftId","_accountId","accountId","setAccountId","_tokenId","tokenId","setTokenId","_start","start","setStart","_end","end","setEnd","_fromProtobuf","query","tokenGetNftInfo","info","nftID","undefined","tokenGetAccountNftInfos","accountID","tokenGetNftInfos","tokenID","fromString","_toProtobuf","console","warn","fromNumber","getCost","client","cost","toTinybars","greaterThan","fromTinybars","_execute","channel","request","token","getTokenNftInfo","_mapResponseHeader","response","infos","header","_mapResponse","nodeAccountId","nfts","nft","Promise","resolve","map","_onMakeRequest","_getLogId","timestamp","_paymentTransactionId","validStart","_timestamp","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenNftInfo from \"./TokenNftInfo.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HashgraphProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoQuery} HashgraphProto.proto.ITokenGetNftInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosQuery} HashgraphProto.proto.ITokenGetNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosQuery} HashgraphProto.proto.ITokenGetAccountNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoResponse} HashgraphProto.proto.ITokenGetNftInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosResponse} HashgraphProto.proto.ITokenGetNftInfosResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosResponse} HashgraphProto.proto.ITokenGetAccountNftInfosResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TokenNftInfo[]>}\n */\nexport default class TokenNftInfoQuery extends Query {\n    /**\n     * @param {object} properties\n     * @param {NftId | string} [properties.nftId]\n     * @param {AccountId | string} [properties.accountId]\n     * @param {TokenId | string} [properties.tokenId]\n     * @param {Long | number} [properties.start]\n     * @param {Long | number} [properties.end]\n     */\n    constructor(properties = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?NftId}\n         */\n        this._nftId = null;\n        if (properties.nftId != null) {\n            this.setNftId(properties.nftId);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n        if (properties.accountId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setAccountId(properties.accountId);\n        }\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n        if (properties.tokenId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setTokenId(properties.tokenId);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._start = null;\n        if (properties.start != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setStart(properties.start);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._end = null;\n        if (properties.end != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setEnd(properties.end);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} query\n     * @returns {TokenNftInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        if (query.tokenGetNftInfo != null) {\n            const info =\n                /** @type {HashgraphProto.proto.ITokenGetNftInfoQuery} */ (\n                    query.tokenGetNftInfo\n                );\n\n            return new TokenNftInfoQuery({\n                nftId:\n                    info.nftID != null\n                        ? NftId._fromProtobuf(info.nftID)\n                        : undefined,\n            });\n        } else if (query.tokenGetAccountNftInfos != null) {\n            const info =\n                /** @type {HashgraphProto.proto.ITokenGetAccountNftInfosQuery} */ (\n                    query.tokenGetAccountNftInfos\n                );\n\n            return new TokenNftInfoQuery({\n                accountId:\n                    info.accountID != null\n                        ? AccountId._fromProtobuf(info.accountID)\n                        : undefined,\n                start: info.start != null ? info.start : undefined,\n                end: info.end != null ? info.end : undefined,\n            });\n        } else {\n            const info =\n                /** @type {HashgraphProto.proto.ITokenGetNftInfosQuery} */ (\n                    query.tokenGetNftInfos\n                );\n\n            return new TokenNftInfoQuery({\n                tokenId:\n                    info.tokenID != null\n                        ? TokenId._fromProtobuf(info.tokenID)\n                        : undefined,\n                start: info.start != null ? info.start : undefined,\n                end: info.end != null ? info.end : undefined,\n            });\n        }\n    }\n\n    /**\n     * @returns {?NftId}\n     */\n    get nftId() {\n        return this._nftId;\n    }\n\n    /**\n     * Set the token ID for which the info is being requested.\n     *\n     * @param {NftId | string} nftId\n     * @returns {TokenNftInfoQuery}\n     */\n    setNftId(nftId) {\n        this._nftId =\n            typeof nftId === \"string\"\n                ? NftId.fromString(nftId)\n                : NftId._fromProtobuf(nftId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        console.warn(\n            \"`TokenNftInfoQuery.accountId` is deprecated with no replacement\"\n        );\n        return this._accountId;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {AccountId | string} accountId\n     * @returns {TokenNftInfoQuery}\n     */\n    setAccountId(accountId) {\n        console.warn(\n            \"`TokenNftInfoQuery.setAccountId()` is deprecated with no replacement\"\n        );\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : AccountId._fromProtobuf(accountId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        console.warn(\n            \"`TokenNftInfoQuery.tokenId` is deprecated with no replacement\"\n        );\n        return this._tokenId;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {TokenId | string} tokenId\n     * @returns {TokenNftInfoQuery}\n     */\n    setTokenId(tokenId) {\n        console.warn(\n            \"`TokenNftInfoQuery.setTokenId()` is deprecated with no replacement\"\n        );\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : TokenId._fromProtobuf(tokenId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?Long}\n     */\n    get start() {\n        console.warn(\n            \"`TokenNftInfoQuery.start` is deprecated with no replacement\"\n        );\n        return this._start;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {Long | number} start\n     * @returns {TokenNftInfoQuery}\n     */\n    setStart(start) {\n        console.warn(\n            \"`TokenNftInfoQuery.setStart()` is deprecated with no replacement\"\n        );\n        this._start =\n            typeof start === \"number\" ? Long.fromNumber(start) : start;\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?Long}\n     */\n    get end() {\n        console.warn(\n            \"`TokenNftInfoQuery.end` is deprecated with no replacement\"\n        );\n        return this._end;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {Long | number} end\n     * @returns {TokenNftInfoQuery}\n     */\n    setEnd(end) {\n        console.warn(\n            \"`TokenNftInfoQuery.setEnd()` is deprecated with no replacement\"\n        );\n        this._end = typeof end === \"number\" ? Long.fromNumber(end) : end;\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        let cost = await super.getCost(client);\n\n        if (cost.toTinybars().greaterThan(25)) {\n            return cost;\n        } else {\n            return Hbar.fromTinybars(25);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.getTokenNftInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {HashgraphProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const infos =\n            /** @type {HashgraphProto.proto.ITokenGetNftInfoResponse} */ (\n                response.tokenGetNftInfo\n            );\n\n        return /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            infos.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<TokenNftInfo[]>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const nfts = [\n            /** @type {HashgraphProto.proto.ITokenNftInfo} */\n            (\n                /** @type {HashgraphProto.proto.ITokenGetNftInfoResponse} */ (\n                    response.tokenGetNftInfo\n                ).nft\n            ),\n        ];\n\n        return Promise.resolve(\n            nfts.map((nft) =>\n                TokenNftInfo._fromProtobuf(\n                    /** @type {HashgraphProto.proto.ITokenNftInfo} */ (nft)\n                )\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQueryHeader} header\n     * @returns {HashgraphProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            tokenGetNftInfo: {\n                header,\n                nftID: this._nftId != null ? this._nftId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TokenNftInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"tokenGetNftInfo\", TokenNftInfoQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}