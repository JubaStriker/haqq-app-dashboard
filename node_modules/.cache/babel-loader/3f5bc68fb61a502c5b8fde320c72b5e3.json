{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport NodeAccountIdSignatureMap from \"./NodeAccountIdSignatureMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\nimport AccountId from \"../account/AccountId.js\";\n/**\n * @augments {ObjectMap<AccountId, NodeAccountIdSignatureMap>}\n */\n\nexport default class SignatureMap extends ObjectMap {\n  constructor() {\n    super(s => AccountId.fromString(s));\n  }\n  /**\n   * @param {import(\"./Transaction.js\").default} transaction\n   * @returns {SignatureMap}\n   */\n\n\n  static _fromTransaction(transaction) {\n    const signatures = new SignatureMap();\n\n    for (let i = 0; i < transaction._nodeAccountIds.length; i++) {\n      const sigMap = transaction._signedTransactions.get(i).sigMap;\n\n      if (sigMap != null) {\n        signatures._set(transaction._nodeAccountIds.list[i], NodeAccountIdSignatureMap._fromTransactionSigMap(sigMap));\n      }\n    }\n\n    return signatures;\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/transaction/SignatureMap.js"],"names":["NodeAccountIdSignatureMap","ObjectMap","AccountId","SignatureMap","constructor","s","fromString","_fromTransaction","transaction","signatures","i","_nodeAccountIds","length","sigMap","_signedTransactions","get","_set","list","_fromTransactionSigMap"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,yBAAP,MAAsC,gCAAtC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAChDG,EAAAA,WAAW,GAAG;AACV,UAAOC,CAAD,IAAOH,SAAS,CAACI,UAAV,CAAqBD,CAArB,CAAb;AACH;AAED;AACJ;AACA;AACA;;;AAC2B,SAAhBE,gBAAgB,CAACC,WAAD,EAAc;AACjC,UAAMC,UAAU,GAAG,IAAIN,YAAJ,EAAnB;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,eAAZ,CAA4BC,MAAhD,EAAwDF,CAAC,EAAzD,EAA6D;AACzD,YAAMG,MAAM,GAAGL,WAAW,CAACM,mBAAZ,CAAgCC,GAAhC,CAAoCL,CAApC,EAAuCG,MAAtD;;AAEA,UAAIA,MAAM,IAAI,IAAd,EAAoB;AAChBJ,QAAAA,UAAU,CAACO,IAAX,CACIR,WAAW,CAACG,eAAZ,CAA4BM,IAA5B,CAAiCP,CAAjC,CADJ,EAEIV,yBAAyB,CAACkB,sBAA1B,CAAiDL,MAAjD,CAFJ;AAIH;AACJ;;AAED,WAAOJ,UAAP;AACH;;AAxB+C","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport NodeAccountIdSignatureMap from \"./NodeAccountIdSignatureMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @augments {ObjectMap<AccountId, NodeAccountIdSignatureMap>}\n */\nexport default class SignatureMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {SignatureMap}\n     */\n    static _fromTransaction(transaction) {\n        const signatures = new SignatureMap();\n\n        for (let i = 0; i < transaction._nodeAccountIds.length; i++) {\n            const sigMap = transaction._signedTransactions.get(i).sigMap;\n\n            if (sigMap != null) {\n                signatures._set(\n                    transaction._nodeAccountIds.list[i],\n                    NodeAccountIdSignatureMap._fromTransactionSigMap(sigMap)\n                );\n            }\n        }\n\n        return signatures;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}