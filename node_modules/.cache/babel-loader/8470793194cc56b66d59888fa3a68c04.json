{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Transaction from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\nimport * as util from \"../util.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * @deprecated - No longer supported via Hedera Protobufs\n * Change properties for the given account.\n */\n\nexport default class AccountAllowanceAdjustTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {HbarAllowance[]} [props.hbarAllowances]\n   * @param {TokenAllowance[]} [props.tokenAllowances]\n   * @param {TokenNftAllowance[]} [props.nftAllowances]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {HbarAllowance[]}\n     */\n\n    this._hbarAllowances = props.hbarAllowances != null ? props.hbarAllowances : [];\n    /**\n     * @private\n     * @type {TokenAllowance[]}\n     */\n\n    this._tokenAllowances = props.tokenAllowances != null ? props.tokenAllowances : [];\n    /**\n     * @private\n     * @type {TokenNftAllowance[]}\n     */\n\n    this._nftAllowances = props.nftAllowances != null ? props.nftAllowances : [];\n  }\n  /**\n   * @returns {HbarAllowance[]}\n   */\n\n\n  get hbarAllowances() {\n    return this._hbarAllowances;\n  }\n  /**\n   * @deprecated\n   * @param {AccountId | string} spenderAccountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  addHbarAllowance(spenderAccountId, amount) {\n    const value = amount instanceof Hbar ? amount : new Hbar(amount);\n    return this._adjustHbarAllowance(null, spenderAccountId, util.requireNotNegative(value));\n  }\n  /**\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Hbar} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  _adjustHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._hbarAllowances.push(new HbarAllowance({\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n      amount: amount\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  grantHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n    const value = amount instanceof Hbar ? amount : new Hbar(amount);\n    return this._adjustHbarAllowance(ownerAccountId, spenderAccountId, util.requireNotNegative(value));\n  }\n  /**\n   * @deprecated\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  revokeHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n    const value = amount instanceof Hbar ? amount : new Hbar(amount);\n    return this._adjustHbarAllowance(ownerAccountId, spenderAccountId, util.requireNotNegative(value).negated());\n  }\n  /**\n   * @returns {TokenAllowance[]}\n   */\n\n\n  get tokenAllowances() {\n    return this._tokenAllowances;\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  addTokenAllowance(tokenId, spenderAccountId, amount) {\n    return this._adjustTokenAllowance(tokenId, null, spenderAccountId, util.requireNotNegative(Long.fromValue(amount)));\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  _adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._tokenAllowances.push(new TokenAllowance({\n      tokenId: typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n      amount: typeof amount === \"number\" ? Long.fromNumber(amount) : amount\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  grantTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n    return this._adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, util.requireNotNegative(Long.fromValue(amount)));\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  revokeTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n    return this._adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, util.requireNotNegative(Long.fromValue(amount)));\n  }\n  /**\n   * @deprecated\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  addTokenNftAllowance(nftId, spenderAccountId) {\n    const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n    return this._adjustTokenNftAllowance(id, null, spenderAccountId);\n  }\n  /**\n   * @param {NftId} nftId\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  _adjustTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n    this._requireNotFrozen();\n\n    const spender = typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId;\n    const owner = typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId;\n    let found = false;\n\n    for (const allowance of this._nftAllowances) {\n      if (allowance.tokenId.compare(nftId.tokenId) === 0 && allowance.spenderAccountId != null && allowance.spenderAccountId.compare(spender) === 0) {\n        if (allowance.serialNumbers != null) {\n          allowance.serialNumbers.push(nftId.serial);\n        }\n\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      this._nftAllowances.push(new TokenNftAllowance({\n        tokenId: nftId.tokenId,\n        spenderAccountId: spender,\n        serialNumbers: [nftId.serial],\n        ownerAccountId: owner,\n        allSerials: false\n      }));\n    }\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  grantTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n    const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n    util.requireNotNegative(id.serial);\n    return this._adjustTokenNftAllowance(id, ownerAccountId, spenderAccountId);\n  }\n  /**\n   * @deprecated\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  revokeTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n    const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n    util.requireNotNegative(id.serial);\n    return this._adjustTokenNftAllowance(new NftId(id.tokenId, id.serial.negate()), ownerAccountId, spenderAccountId);\n  }\n  /**\n   * @deprecated - use `grantTokenNftAllowanceAllSerials()` instead\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  addAllTokenNftAllowance(tokenId, spenderAccountId) {\n    return this._adjustTokenNftAllowanceAllSerials(tokenId, null, spenderAccountId, true);\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  grantTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId) {\n    return this._adjustTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId, true);\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  revokeTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId) {\n    return this._adjustTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId, false);\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {boolean} allSerials\n   * @returns {AccountAllowanceAdjustTransaction}\n   */\n\n\n  _adjustTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId, allSerials) {\n    this._requireNotFrozen();\n\n    this._nftAllowances.push(new TokenNftAllowance({\n      tokenId: typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n      ownerAccountId: ownerAccountId != null ? typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId : null,\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      serialNumbers: null,\n      allSerials\n    }));\n\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    this._hbarAllowances.map(allowance => allowance._validateChecksums(client));\n\n    this._tokenAllowances.map(allowance => allowance._validateChecksums(client));\n\n    this._nftAllowances.map(allowance => allowance._validateChecksums(client));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _execute(channel, request) {\n    return Promise.reject(new Error(\"This feature has been deprecated for this class.\"));\n  } // eslint-disable-next-line jsdoc/require-returns-check\n\n  /**\n   * @deprecated\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    throw new Error(\"This feature has been deprecated for this class.\");\n  } // eslint-disable-next-line jsdoc/require-returns-check\n\n  /**\n   * @override\n   * @protected\n   * @returns {object}\n   */\n\n\n  _makeTransactionData() {\n    throw new Error(\"This feature has been deprecated.\");\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `AccountAllowanceAdjustTransaction:${timestamp.toString()}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/AccountAllowanceAdjustTransaction.js"],"names":["Transaction","AccountId","TokenId","NftId","Long","Hbar","HbarAllowance","TokenAllowance","TokenNftAllowance","util","AccountAllowanceAdjustTransaction","constructor","props","_hbarAllowances","hbarAllowances","_tokenAllowances","tokenAllowances","_nftAllowances","nftAllowances","addHbarAllowance","spenderAccountId","amount","value","_adjustHbarAllowance","requireNotNegative","ownerAccountId","_requireNotFrozen","push","fromString","grantHbarAllowance","revokeHbarAllowance","negated","addTokenAllowance","tokenId","_adjustTokenAllowance","fromValue","fromNumber","grantTokenAllowance","revokeTokenAllowance","addTokenNftAllowance","nftId","id","_adjustTokenNftAllowance","spender","owner","found","allowance","compare","serialNumbers","serial","allSerials","grantTokenNftAllowance","revokeTokenNftAllowance","negate","addAllTokenNftAllowance","_adjustTokenNftAllowanceAllSerials","grantTokenNftAllowanceAllSerials","revokeTokenNftAllowanceAllSerials","_validateChecksums","client","map","_execute","channel","request","Promise","reject","Error","_getTransactionDataCase","_makeTransactionData","_getLogId","timestamp","_transactionIds","current","validStart","toString"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Transaction from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\nimport * as util from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * @deprecated - No longer supported via Hedera Protobufs\n * Change properties for the given account.\n */\nexport default class AccountAllowanceAdjustTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarAllowances]\n     * @param {TokenAllowance[]} [props.tokenAllowances]\n     * @param {TokenNftAllowance[]} [props.nftAllowances]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {HbarAllowance[]}\n         */\n        this._hbarAllowances =\n            props.hbarAllowances != null ? props.hbarAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenAllowance[]}\n         */\n        this._tokenAllowances =\n            props.tokenAllowances != null ? props.tokenAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftAllowances =\n            props.nftAllowances != null ? props.nftAllowances : [];\n    }\n\n    /**\n     * @returns {HbarAllowance[]}\n     */\n    get hbarAllowances() {\n        return this._hbarAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addHbarAllowance(spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            null,\n            spenderAccountId,\n            util.requireNotNegative(value)\n        );\n    }\n\n    /**\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarAllowances.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId,\n                amount: amount,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value)\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value).negated()\n        );\n    }\n\n    /**\n     * @returns {TokenAllowance[]}\n     */\n    get tokenAllowances() {\n        return this._tokenAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenAllowance(tokenId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            null,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenAllowances.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId,\n                amount:\n                    typeof amount === \"number\"\n                        ? Long.fromNumber(amount)\n                        : amount,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount))\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenNftAllowance(nftId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n        return this._adjustTokenNftAllowance(id, null, spenderAccountId);\n    }\n\n    /**\n     * @param {NftId} nftId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        this._requireNotFrozen();\n\n        const spender =\n            typeof spenderAccountId === \"string\"\n                ? AccountId.fromString(spenderAccountId)\n                : spenderAccountId;\n        const owner =\n            typeof ownerAccountId === \"string\"\n                ? AccountId.fromString(ownerAccountId)\n                : ownerAccountId;\n        let found = false;\n\n        for (const allowance of this._nftAllowances) {\n            if (\n                allowance.tokenId.compare(nftId.tokenId) === 0 &&\n                allowance.spenderAccountId != null &&\n                allowance.spenderAccountId.compare(spender) === 0\n            ) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(nftId.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftAllowances.push(\n                new TokenNftAllowance({\n                    tokenId: nftId.tokenId,\n                    spenderAccountId: spender,\n                    serialNumbers: [nftId.serial],\n                    ownerAccountId: owner,\n                    allSerials: false,\n                })\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n\n        return this._adjustTokenNftAllowance(\n            id,\n            ownerAccountId,\n            spenderAccountId\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n        return this._adjustTokenNftAllowance(\n            new NftId(id.tokenId, id.serial.negate()),\n            ownerAccountId,\n            spenderAccountId\n        );\n    }\n\n    /**\n     * @deprecated - use `grantTokenNftAllowanceAllSerials()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addAllTokenNftAllowance(tokenId, spenderAccountId) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            null,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            false\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {boolean} allSerials\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n        allSerials\n    ) {\n        this._requireNotFrozen();\n\n        this._nftAllowances.push(\n            new TokenNftAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                ownerAccountId:\n                    ownerAccountId != null\n                        ? typeof ownerAccountId === \"string\"\n                            ? AccountId.fromString(ownerAccountId)\n                            : ownerAccountId\n                        : null,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                serialNumbers: null,\n                allSerials,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._hbarAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n        this._tokenAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n        this._nftAllowances.map((allowance) =>\n            allowance._validateChecksums(client)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _execute(channel, request) {\n        return Promise.reject(\n            new Error(\"This feature has been deprecated for this class.\")\n        );\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @deprecated\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        throw new Error(\"This feature has been deprecated for this class.\");\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @override\n     * @protected\n     * @returns {object}\n     */\n    _makeTransactionData() {\n        throw new Error(\"This feature has been deprecated.\");\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceAdjustTransaction:${timestamp.toString()}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}