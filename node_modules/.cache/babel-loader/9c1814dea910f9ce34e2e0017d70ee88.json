{"ast":null,"code":"import * as rlp from \"@ethersproject/rlp\";\nimport * as hex from \"./encoding/hex.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport CACHE from \"./Cache.js\";\n/**\n * @typedef {object} EthereumTransactionDataLegacyJSON\n * @property {string} nonce\n * @property {string} gasPrice\n * @property {string} gasLimit\n * @property {string} to\n * @property {string} value\n * @property {string} callData\n * @property {string} v\n * @property {string} r\n * @property {string} s\n */\n\nexport default class EthereumTransactionDataLegacy extends EthereumTransactionData {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Uint8Array} props.nonce\n   * @param {Uint8Array} props.gasPrice\n   * @param {Uint8Array} props.gasLimit\n   * @param {Uint8Array} props.to\n   * @param {Uint8Array} props.value\n   * @param {Uint8Array} props.callData\n   * @param {Uint8Array} props.v\n   * @param {Uint8Array} props.r\n   * @param {Uint8Array} props.s\n   */\n  constructor(props) {\n    super(props);\n    this.nonce = props.nonce;\n    this.gasPrice = props.gasPrice;\n    this.gasLimit = props.gasLimit;\n    this.to = props.to;\n    this.value = props.value;\n    this.v = props.v;\n    this.r = props.r;\n    this.s = props.s;\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {EthereumTransactionData}\n   */\n\n\n  static fromBytes(bytes) {\n    if (bytes.length === 0) {\n      throw new Error(\"empty bytes\");\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n    const decoded =\n    /** @type {string[]} */\n    rlp.decode(bytes);\n\n    if (decoded.length != 9) {\n      throw new Error(\"invalid ethereum transaction data\");\n    }\n\n    return new EthereumTransactionDataLegacy({\n      nonce: hex.decode(\n      /** @type {string} */\n      decoded[0]),\n      gasPrice: hex.decode(\n      /** @type {string} */\n      decoded[1]),\n      gasLimit: hex.decode(\n      /** @type {string} */\n      decoded[2]),\n      to: hex.decode(\n      /** @type {string} */\n      decoded[3]),\n      value: hex.decode(\n      /** @type {string} */\n      decoded[4]),\n      callData: hex.decode(\n      /** @type {string} */\n      decoded[5]),\n      v: hex.decode(\n      /** @type {string} */\n      decoded[6]),\n      r: hex.decode(\n      /** @type {string} */\n      decoded[7]),\n      s: hex.decode(\n      /** @type {string} */\n      decoded[8])\n    });\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return hex.decode(rlp.encode([this.nonce, this.gasPrice, this.gasLimit, this.to, this.value, this.callData, this.v, this.r, this.s]));\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2);\n  }\n  /**\n   * @returns {EthereumTransactionDataLegacyJSON}\n   */\n\n\n  toJSON() {\n    return {\n      nonce: hex.encode(this.nonce),\n      gasPrice: hex.encode(this.gasPrice),\n      gasLimit: hex.encode(this.gasLimit),\n      to: hex.encode(this.to),\n      value: hex.encode(this.value),\n      callData: hex.encode(this.callData),\n      v: hex.encode(this.v),\n      r: hex.encode(this.r),\n      s: hex.encode(this.s)\n    };\n  }\n\n}\nCACHE.setEthereumTransactionDataLegacyFromBytes(bytes => EthereumTransactionDataLegacy.fromBytes(bytes));","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/EthereumTransactionDataLegacy.js"],"names":["rlp","hex","EthereumTransactionData","CACHE","EthereumTransactionDataLegacy","constructor","props","nonce","gasPrice","gasLimit","to","value","v","r","s","fromBytes","bytes","length","Error","decoded","decode","callData","toBytes","encode","toString","JSON","stringify","toJSON","setEthereumTransactionDataLegacyFromBytes"],"mappings":"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","sourcesContent":["import * as rlp from \"@ethersproject/rlp\";\nimport * as hex from \"./encoding/hex.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport CACHE from \"./Cache.js\";\n\n/**\n * @typedef {object} EthereumTransactionDataLegacyJSON\n * @property {string} nonce\n * @property {string} gasPrice\n * @property {string} gasLimit\n * @property {string} to\n * @property {string} value\n * @property {string} callData\n * @property {string} v\n * @property {string} r\n * @property {string} s\n */\n\nexport default class EthereumTransactionDataLegacy extends EthereumTransactionData {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Uint8Array} props.nonce\n     * @param {Uint8Array} props.gasPrice\n     * @param {Uint8Array} props.gasLimit\n     * @param {Uint8Array} props.to\n     * @param {Uint8Array} props.value\n     * @param {Uint8Array} props.callData\n     * @param {Uint8Array} props.v\n     * @param {Uint8Array} props.r\n     * @param {Uint8Array} props.s\n     */\n    constructor(props) {\n        super(props);\n\n        this.nonce = props.nonce;\n        this.gasPrice = props.gasPrice;\n        this.gasLimit = props.gasLimit;\n        this.to = props.to;\n        this.value = props.value;\n        this.v = props.v;\n        this.r = props.r;\n        this.s = props.s;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {EthereumTransactionData}\n     */\n    static fromBytes(bytes) {\n        if (bytes.length === 0) {\n            throw new Error(\"empty bytes\");\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const decoded = /** @type {string[]} */ (rlp.decode(bytes));\n\n        if (decoded.length != 9) {\n            throw new Error(\"invalid ethereum transaction data\");\n        }\n\n        return new EthereumTransactionDataLegacy({\n            nonce: hex.decode(/** @type {string} */ (decoded[0])),\n            gasPrice: hex.decode(/** @type {string} */ (decoded[1])),\n            gasLimit: hex.decode(/** @type {string} */ (decoded[2])),\n            to: hex.decode(/** @type {string} */ (decoded[3])),\n            value: hex.decode(/** @type {string} */ (decoded[4])),\n            callData: hex.decode(/** @type {string} */ (decoded[5])),\n            v: hex.decode(/** @type {string} */ (decoded[6])),\n            r: hex.decode(/** @type {string} */ (decoded[7])),\n            s: hex.decode(/** @type {string} */ (decoded[8])),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return hex.decode(\n            rlp.encode([\n                this.nonce,\n                this.gasPrice,\n                this.gasLimit,\n                this.to,\n                this.value,\n                this.callData,\n                this.v,\n                this.r,\n                this.s,\n            ])\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON(), null, 2);\n    }\n\n    /**\n     * @returns {EthereumTransactionDataLegacyJSON}\n     */\n    toJSON() {\n        return {\n            nonce: hex.encode(this.nonce),\n            gasPrice: hex.encode(this.gasPrice),\n            gasLimit: hex.encode(this.gasLimit),\n            to: hex.encode(this.to),\n            value: hex.encode(this.value),\n            callData: hex.encode(this.callData),\n            v: hex.encode(this.v),\n            r: hex.encode(this.r),\n            s: hex.encode(this.s),\n        };\n    }\n}\n\nCACHE.setEthereumTransactionDataLegacyFromBytes((bytes) =>\n    EthereumTransactionDataLegacy.fromBytes(bytes)\n);\n"]},"metadata":{},"sourceType":"module"}