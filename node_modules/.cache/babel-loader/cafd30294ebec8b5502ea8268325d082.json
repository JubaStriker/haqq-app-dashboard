{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoApproveAllowanceTransactionBody} HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\n\nexport default class AccountAllowanceApproveTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {HbarAllowance[]} [props.hbarApprovals]\n   * @param {TokenAllowance[]} [props.tokenApprovals]\n   * @param {TokenNftAllowance[]} [props.nftApprovals]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {HbarAllowance[]}\n     */\n\n    this._hbarApprovals = props.hbarApprovals != null ? props.hbarApprovals : [];\n    /**\n     * @private\n     * @type {TokenAllowance[]}\n     */\n\n    this._tokenApprovals = props.tokenApprovals != null ? props.tokenApprovals : [];\n    /**\n     * @private\n     * @type {TokenNftAllowance[]}\n     */\n\n    this._nftApprovals = props.nftApprovals != null ? props.nftApprovals : [];\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const allowanceApproval =\n    /** @type {HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody} */\n    body.cryptoApproveAllowance;\n    return Transaction._fromProtobufTransactions(new AccountAllowanceApproveTransaction({\n      hbarApprovals: (allowanceApproval.cryptoAllowances != null ? allowanceApproval.cryptoAllowances : []).map(approval => HbarAllowance._fromProtobuf(approval)),\n      tokenApprovals: (allowanceApproval.tokenAllowances != null ? allowanceApproval.tokenAllowances : []).map(approval => TokenAllowance._fromProtobuf(approval)),\n      nftApprovals: (allowanceApproval.nftAllowances != null ? allowanceApproval.nftAllowances : []).map(approval => TokenNftAllowance._fromProtobuf(approval))\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {HbarAllowance[]}\n   */\n\n\n  get hbarApprovals() {\n    return this._hbarApprovals;\n  }\n  /**\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  approveHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._hbarApprovals.push(new HbarAllowance({\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n      amount: amount instanceof Hbar ? amount : new Hbar(amount)\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {AccountId | string} spenderAccountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  addHbarAllowance(spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._hbarApprovals.push(new HbarAllowance({\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      amount: amount instanceof Hbar ? amount : new Hbar(amount),\n      ownerAccountId: null\n    }));\n\n    return this;\n  }\n  /**\n   * @returns {TokenAllowance[]}\n   */\n\n\n  get tokenApprovals() {\n    return this._tokenApprovals;\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  approveTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._tokenApprovals.push(new TokenAllowance({\n      tokenId: typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n      amount: typeof amount === \"number\" ? Long.fromNumber(amount) : amount\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} spenderAccountId\n   * @param {Long | number} amount\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  addTokenAllowance(tokenId, spenderAccountId, amount) {\n    this._requireNotFrozen();\n\n    this._tokenApprovals.push(new TokenAllowance({\n      tokenId: typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      amount: typeof amount === \"number\" ? Long.fromNumber(amount) : amount,\n      ownerAccountId: null\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  addTokenNftAllowance(nftId, spenderAccountId) {\n    return this._approveTokenNftAllowance(nftId, null, spenderAccountId);\n  }\n  /**\n   * @returns {TokenNftAllowance[]}\n   */\n\n\n  get tokenNftApprovals() {\n    return this._nftApprovals;\n  }\n  /**\n   * @param {NftId | string} nftId\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  _approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n    this._requireNotFrozen();\n\n    const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n    const spender = typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId;\n    let found = false;\n\n    for (const allowance of this._nftApprovals) {\n      if (allowance.tokenId.compare(id.tokenId) === 0 && allowance.spenderAccountId != null && allowance.spenderAccountId.compare(spender) === 0) {\n        if (allowance.serialNumbers != null) {\n          allowance.serialNumbers.push(id.serial);\n        }\n\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      this._nftApprovals.push(new TokenNftAllowance({\n        tokenId: id.tokenId,\n        spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n        ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n        serialNumbers: [id.serial],\n        allSerials: false\n      }));\n    }\n\n    return this;\n  }\n  /**\n   * @param {NftId | string} nftId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n    return this._approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId);\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string | null} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @param {boolean} allSerials\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  _approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, allSerials) {\n    this._requireNotFrozen();\n\n    this._nftApprovals.push(new TokenNftAllowance({\n      tokenId: typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n      spenderAccountId: typeof spenderAccountId === \"string\" ? AccountId.fromString(spenderAccountId) : spenderAccountId,\n      ownerAccountId: typeof ownerAccountId === \"string\" ? AccountId.fromString(ownerAccountId) : ownerAccountId,\n      serialNumbers: null,\n      allSerials\n    }));\n\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  addAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId) {\n    return this._approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, true);\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} ownerAccountId\n   * @param {AccountId | string} spenderAccountId\n   * @returns {AccountAllowanceApproveTransaction}\n   */\n\n\n  approveTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId) {\n    return this._approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, true);\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    this._hbarApprovals.map(approval => approval._validateChecksums(client));\n\n    this._tokenApprovals.map(approval => approval._validateChecksums(client));\n\n    this._nftApprovals.map(approval => approval._validateChecksums(client));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.approveAllowances(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoApproveAllowance\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      cryptoAllowances: this._hbarApprovals.map(approval => approval._toProtobuf()),\n      tokenAllowances: this._tokenApprovals.map(approval => approval._toProtobuf()),\n      nftAllowances: this._nftApprovals.map(approval => approval._toProtobuf())\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"../Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `AccountAllowanceApproveTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoApproveAllowance\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountAllowanceApproveTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/AccountAllowanceApproveTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","AccountId","TokenId","NftId","Long","Hbar","HbarAllowance","TokenAllowance","TokenNftAllowance","AccountAllowanceApproveTransaction","constructor","props","_hbarApprovals","hbarApprovals","_tokenApprovals","tokenApprovals","_nftApprovals","nftApprovals","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","allowanceApproval","cryptoApproveAllowance","_fromProtobufTransactions","cryptoAllowances","map","approval","tokenAllowances","nftAllowances","approveHbarAllowance","ownerAccountId","spenderAccountId","amount","_requireNotFrozen","push","fromString","addHbarAllowance","approveTokenAllowance","tokenId","fromNumber","addTokenAllowance","addTokenNftAllowance","nftId","_approveTokenNftAllowance","tokenNftApprovals","id","spender","found","allowance","compare","serialNumbers","serial","allSerials","approveTokenNftAllowance","_approveAllTokenNftAllowance","addAllTokenNftAllowance","approveTokenNftAllowanceAllSerials","_validateChecksums","client","_execute","channel","request","crypto","approveAllowances","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,WAAP,IACIC,oBADJ,QAEO,+BAFP;AAGA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,kCAAN,SAAiDV,WAAjD,CAA6D;AACxE;AACJ;AACA;AACA;AACA;AACA;AACIW,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACpB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,cAAL,GACID,KAAK,CAACE,aAAN,IAAuB,IAAvB,GAA8BF,KAAK,CAACE,aAApC,GAAoD,EADxD;AAGA;AACR;AACA;AACA;;AACQ,SAAKC,eAAL,GACIH,KAAK,CAACI,cAAN,IAAwB,IAAxB,GAA+BJ,KAAK,CAACI,cAArC,GAAsD,EAD1D;AAGA;AACR;AACA;AACA;;AACQ,SAAKC,aAAL,GACIL,KAAK,CAACM,YAAN,IAAsB,IAAtB,GAA6BN,KAAK,CAACM,YAAnC,GAAkD,EADtD;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAChBC,YADgB,EAEhBC,kBAFgB,EAGhBC,cAHgB,EAIhBC,OAJgB,EAKhBC,MALgB,EAMlB;AACE,UAAMC,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACA,UAAME,iBAAiB;AACnB;AACID,IAAAA,IAAI,CAACE,sBAFb;AAKA,WAAO3B,WAAW,CAAC4B,yBAAZ,CACH,IAAIlB,kCAAJ,CAAuC;AACnCI,MAAAA,aAAa,EAAE,CAACY,iBAAiB,CAACG,gBAAlB,IAAsC,IAAtC,GACVH,iBAAiB,CAACG,gBADR,GAEV,EAFS,EAGbC,GAHa,CAGRC,QAAD,IAAcxB,aAAa,CAACY,aAAd,CAA4BY,QAA5B,CAHL,CADoB;AAKnCf,MAAAA,cAAc,EAAE,CAACU,iBAAiB,CAACM,eAAlB,IAAqC,IAArC,GACXN,iBAAiB,CAACM,eADP,GAEX,EAFU,EAGdF,GAHc,CAGTC,QAAD,IAAcvB,cAAc,CAACW,aAAf,CAA6BY,QAA7B,CAHJ,CALmB;AASnCb,MAAAA,YAAY,EAAE,CAACQ,iBAAiB,CAACO,aAAlB,IAAmC,IAAnC,GACTP,iBAAiB,CAACO,aADT,GAET,EAFQ,EAGZH,GAHY,CAGPC,QAAD,IAActB,iBAAiB,CAACU,aAAlB,CAAgCY,QAAhC,CAHN;AATqB,KAAvC,CADG,EAeHX,YAfG,EAgBHC,kBAhBG,EAiBHC,cAjBG,EAkBHC,OAlBG,EAmBHC,MAnBG,CAAP;AAqBH;AAED;AACJ;AACA;;;AACqB,MAAbV,aAAa,GAAG;AAChB,WAAO,KAAKD,cAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIqB,EAAAA,oBAAoB,CAACC,cAAD,EAAiBC,gBAAjB,EAAmCC,MAAnC,EAA2C;AAC3D,SAAKC,iBAAL;;AAEA,SAAKzB,cAAL,CAAoB0B,IAApB,CACI,IAAIhC,aAAJ,CAAkB;AACd6B,MAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBAJI;AAKdD,MAAAA,cAAc,EACV,OAAOA,cAAP,KAA0B,QAA1B,GACMjC,SAAS,CAACsC,UAAV,CAAqBL,cAArB,CADN,GAEMA,cARI;AASdE,MAAAA,MAAM,EAAEA,MAAM,YAAY/B,IAAlB,GAAyB+B,MAAzB,GAAkC,IAAI/B,IAAJ,CAAS+B,MAAT;AAT5B,KAAlB,CADJ;;AAcA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,gBAAgB,CAACL,gBAAD,EAAmBC,MAAnB,EAA2B;AACvC,SAAKC,iBAAL;;AAEA,SAAKzB,cAAL,CAAoB0B,IAApB,CACI,IAAIhC,aAAJ,CAAkB;AACd6B,MAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBAJI;AAKdC,MAAAA,MAAM,EAAEA,MAAM,YAAY/B,IAAlB,GAAyB+B,MAAzB,GAAkC,IAAI/B,IAAJ,CAAS+B,MAAT,CAL5B;AAMdF,MAAAA,cAAc,EAAE;AANF,KAAlB,CADJ;;AAWA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACsB,MAAdnB,cAAc,GAAG;AACjB,WAAO,KAAKD,eAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI2B,EAAAA,qBAAqB,CAACC,OAAD,EAAUR,cAAV,EAA0BC,gBAA1B,EAA4CC,MAA5C,EAAoD;AACrE,SAAKC,iBAAL;;AAEA,SAAKvB,eAAL,CAAqBwB,IAArB,CACI,IAAI/B,cAAJ,CAAmB;AACfmC,MAAAA,OAAO,EACH,OAAOA,OAAP,KAAmB,QAAnB,GACMxC,OAAO,CAACqC,UAAR,CAAmBG,OAAnB,CADN,GAEMA,OAJK;AAKfP,MAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBARK;AASfD,MAAAA,cAAc,EACV,OAAOA,cAAP,KAA0B,QAA1B,GACMjC,SAAS,CAACsC,UAAV,CAAqBL,cAArB,CADN,GAEMA,cAZK;AAafE,MAAAA,MAAM,EACF,OAAOA,MAAP,KAAkB,QAAlB,GACMhC,IAAI,CAACuC,UAAL,CAAgBP,MAAhB,CADN,GAEMA;AAhBK,KAAnB,CADJ;;AAqBA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,iBAAiB,CAACF,OAAD,EAAUP,gBAAV,EAA4BC,MAA5B,EAAoC;AACjD,SAAKC,iBAAL;;AAEA,SAAKvB,eAAL,CAAqBwB,IAArB,CACI,IAAI/B,cAAJ,CAAmB;AACfmC,MAAAA,OAAO,EACH,OAAOA,OAAP,KAAmB,QAAnB,GACMxC,OAAO,CAACqC,UAAR,CAAmBG,OAAnB,CADN,GAEMA,OAJK;AAKfP,MAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBARK;AASfC,MAAAA,MAAM,EACF,OAAOA,MAAP,KAAkB,QAAlB,GACMhC,IAAI,CAACuC,UAAL,CAAgBP,MAAhB,CADN,GAEMA,MAZK;AAafF,MAAAA,cAAc,EAAE;AAbD,KAAnB,CADJ;;AAkBA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIW,EAAAA,oBAAoB,CAACC,KAAD,EAAQX,gBAAR,EAA0B;AAC1C,WAAO,KAAKY,yBAAL,CAA+BD,KAA/B,EAAsC,IAAtC,EAA4CX,gBAA5C,CAAP;AACH;AAED;AACJ;AACA;;;AACyB,MAAjBa,iBAAiB,GAAG;AACpB,WAAO,KAAKhC,aAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI+B,EAAAA,yBAAyB,CAACD,KAAD,EAAQZ,cAAR,EAAwBC,gBAAxB,EAA0C;AAC/D,SAAKE,iBAAL;;AAEA,UAAMY,EAAE,GAAG,OAAOH,KAAP,KAAiB,QAAjB,GAA4B3C,KAAK,CAACoC,UAAN,CAAiBO,KAAjB,CAA5B,GAAsDA,KAAjE;AACA,UAAMI,OAAO,GACT,OAAOf,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBAHV;AAIA,QAAIgB,KAAK,GAAG,KAAZ;;AAEA,SAAK,MAAMC,SAAX,IAAwB,KAAKpC,aAA7B,EAA4C;AACxC,UACIoC,SAAS,CAACV,OAAV,CAAkBW,OAAlB,CAA0BJ,EAAE,CAACP,OAA7B,MAA0C,CAA1C,IACAU,SAAS,CAACjB,gBAAV,IAA8B,IAD9B,IAEAiB,SAAS,CAACjB,gBAAV,CAA2BkB,OAA3B,CAAmCH,OAAnC,MAAgD,CAHpD,EAIE;AACE,YAAIE,SAAS,CAACE,aAAV,IAA2B,IAA/B,EAAqC;AACjCF,UAAAA,SAAS,CAACE,aAAV,CAAwBhB,IAAxB,CAA6BW,EAAE,CAACM,MAAhC;AACH;;AACDJ,QAAAA,KAAK,GAAG,IAAR;AACA;AACH;AACJ;;AAED,QAAI,CAACA,KAAL,EAAY;AACR,WAAKnC,aAAL,CAAmBsB,IAAnB,CACI,IAAI9B,iBAAJ,CAAsB;AAClBkC,QAAAA,OAAO,EAAEO,EAAE,CAACP,OADM;AAElBP,QAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBALQ;AAMlBD,QAAAA,cAAc,EACV,OAAOA,cAAP,KAA0B,QAA1B,GACMjC,SAAS,CAACsC,UAAV,CAAqBL,cAArB,CADN,GAEMA,cATQ;AAUlBoB,QAAAA,aAAa,EAAE,CAACL,EAAE,CAACM,MAAJ,CAVG;AAWlBC,QAAAA,UAAU,EAAE;AAXM,OAAtB,CADJ;AAeH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,wBAAwB,CAACX,KAAD,EAAQZ,cAAR,EAAwBC,gBAAxB,EAA0C;AAC9D,WAAO,KAAKY,yBAAL,CACHD,KADG,EAEHZ,cAFG,EAGHC,gBAHG,CAAP;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIuB,EAAAA,4BAA4B,CACxBhB,OADwB,EAExBR,cAFwB,EAGxBC,gBAHwB,EAIxBqB,UAJwB,EAK1B;AACE,SAAKnB,iBAAL;;AAEA,SAAKrB,aAAL,CAAmBsB,IAAnB,CACI,IAAI9B,iBAAJ,CAAsB;AAClBkC,MAAAA,OAAO,EACH,OAAOA,OAAP,KAAmB,QAAnB,GACMxC,OAAO,CAACqC,UAAR,CAAmBG,OAAnB,CADN,GAEMA,OAJQ;AAKlBP,MAAAA,gBAAgB,EACZ,OAAOA,gBAAP,KAA4B,QAA5B,GACMlC,SAAS,CAACsC,UAAV,CAAqBJ,gBAArB,CADN,GAEMA,gBARQ;AASlBD,MAAAA,cAAc,EACV,OAAOA,cAAP,KAA0B,QAA1B,GACMjC,SAAS,CAACsC,UAAV,CAAqBL,cAArB,CADN,GAEMA,cAZQ;AAalBoB,MAAAA,aAAa,EAAE,IAbG;AAclBE,MAAAA;AAdkB,KAAtB,CADJ;;AAmBA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,uBAAuB,CAACjB,OAAD,EAAUR,cAAV,EAA0BC,gBAA1B,EAA4C;AAC/D,WAAO,KAAKuB,4BAAL,CACHhB,OADG,EAEHR,cAFG,EAGHC,gBAHG,EAIH,IAJG,CAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIyB,EAAAA,kCAAkC,CAC9BlB,OAD8B,EAE9BR,cAF8B,EAG9BC,gBAH8B,EAIhC;AACE,WAAO,KAAKuB,4BAAL,CACHhB,OADG,EAEHR,cAFG,EAGHC,gBAHG,EAIH,IAJG,CAAP;AAMH;AAED;AACJ;AACA;;;AACI0B,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,SAAKlD,cAAL,CAAoBiB,GAApB,CAAyBC,QAAD,IACpBA,QAAQ,CAAC+B,kBAAT,CAA4BC,MAA5B,CADJ;;AAGA,SAAKhD,eAAL,CAAqBe,GAArB,CAA0BC,QAAD,IACrBA,QAAQ,CAAC+B,kBAAT,CAA4BC,MAA5B,CADJ;;AAGA,SAAK9C,aAAL,CAAmBa,GAAnB,CAAwBC,QAAD,IACnBA,QAAQ,CAAC+B,kBAAT,CAA4BC,MAA5B,CADJ;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACvB,WAAOD,OAAO,CAACE,MAAR,CAAeC,iBAAf,CAAiCF,OAAjC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,uBAAuB,GAAG;AACtB,WAAO,wBAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,oBAAoB,GAAG;AACnB,WAAO;AACHzC,MAAAA,gBAAgB,EAAE,KAAKhB,cAAL,CAAoBiB,GAApB,CAAyBC,QAAD,IACtCA,QAAQ,CAACwC,WAAT,EADc,CADf;AAIHvC,MAAAA,eAAe,EAAE,KAAKjB,eAAL,CAAqBe,GAArB,CAA0BC,QAAD,IACtCA,QAAQ,CAACwC,WAAT,EADa,CAJd;AAOHtC,MAAAA,aAAa,EAAE,KAAKhB,aAAL,CAAmBa,GAAnB,CAAwBC,QAAD,IAClCA,QAAQ,CAACwC,WAAT,EADW;AAPZ,KAAP;AAWH;AAED;AACJ;AACA;;;AACIC,EAAAA,SAAS,GAAG;AACR,UAAMC,SAAS;AAAG;AACd,SAAKC,eAAL,CAAqBC,OAArB,CAA6BC,UADjC;AAGA,WAAQ,sCAAqCH,SAAS,CAACI,QAAV,EAAqB,EAAlE;AACH;;AArauE;AAwa5E5E,oBAAoB,CAAC6E,GAArB,CACI,wBADJ,EAEI;AACApE,kCAAkC,CAACS,aAHvC","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoApproveAllowanceTransactionBody} HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountAllowanceApproveTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarApprovals]\n     * @param {TokenAllowance[]} [props.tokenApprovals]\n     * @param {TokenNftAllowance[]} [props.nftApprovals]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {HbarAllowance[]}\n         */\n        this._hbarApprovals =\n            props.hbarApprovals != null ? props.hbarApprovals : [];\n\n        /**\n         * @private\n         * @type {TokenAllowance[]}\n         */\n        this._tokenApprovals =\n            props.tokenApprovals != null ? props.tokenApprovals : [];\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftApprovals =\n            props.nftApprovals != null ? props.nftApprovals : [];\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const allowanceApproval =\n            /** @type {HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody} */ (\n                body.cryptoApproveAllowance\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountAllowanceApproveTransaction({\n                hbarApprovals: (allowanceApproval.cryptoAllowances != null\n                    ? allowanceApproval.cryptoAllowances\n                    : []\n                ).map((approval) => HbarAllowance._fromProtobuf(approval)),\n                tokenApprovals: (allowanceApproval.tokenAllowances != null\n                    ? allowanceApproval.tokenAllowances\n                    : []\n                ).map((approval) => TokenAllowance._fromProtobuf(approval)),\n                nftApprovals: (allowanceApproval.nftAllowances != null\n                    ? allowanceApproval.nftAllowances\n                    : []\n                ).map((approval) => TokenNftAllowance._fromProtobuf(approval)),\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {HbarAllowance[]}\n     */\n    get hbarApprovals() {\n        return this._hbarApprovals;\n    }\n\n    /**\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarApprovals.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId,\n                amount: amount instanceof Hbar ? amount : new Hbar(amount),\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addHbarAllowance(spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarApprovals.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                amount: amount instanceof Hbar ? amount : new Hbar(amount),\n                ownerAccountId: null,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {TokenAllowance[]}\n     */\n    get tokenApprovals() {\n        return this._tokenApprovals;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenApprovals.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId,\n                amount:\n                    typeof amount === \"number\"\n                        ? Long.fromNumber(amount)\n                        : amount,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addTokenAllowance(tokenId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenApprovals.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                amount:\n                    typeof amount === \"number\"\n                        ? Long.fromNumber(amount)\n                        : amount,\n                ownerAccountId: null,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addTokenNftAllowance(nftId, spenderAccountId) {\n        return this._approveTokenNftAllowance(nftId, null, spenderAccountId);\n    }\n\n    /**\n     * @returns {TokenNftAllowance[]}\n     */\n    get tokenNftApprovals() {\n        return this._nftApprovals;\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    _approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        this._requireNotFrozen();\n\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n        const spender =\n            typeof spenderAccountId === \"string\"\n                ? AccountId.fromString(spenderAccountId)\n                : spenderAccountId;\n        let found = false;\n\n        for (const allowance of this._nftApprovals) {\n            if (\n                allowance.tokenId.compare(id.tokenId) === 0 &&\n                allowance.spenderAccountId != null &&\n                allowance.spenderAccountId.compare(spender) === 0\n            ) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(id.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftApprovals.push(\n                new TokenNftAllowance({\n                    tokenId: id.tokenId,\n                    spenderAccountId:\n                        typeof spenderAccountId === \"string\"\n                            ? AccountId.fromString(spenderAccountId)\n                            : spenderAccountId,\n                    ownerAccountId:\n                        typeof ownerAccountId === \"string\"\n                            ? AccountId.fromString(ownerAccountId)\n                            : ownerAccountId,\n                    serialNumbers: [id.serial],\n                    allSerials: false,\n                })\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        return this._approveTokenNftAllowance(\n            nftId,\n            ownerAccountId,\n            spenderAccountId\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {boolean} allSerials\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    _approveAllTokenNftAllowance(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n        allSerials\n    ) {\n        this._requireNotFrozen();\n\n        this._nftApprovals.push(\n            new TokenNftAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId,\n                serialNumbers: null,\n                allSerials,\n            })\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId) {\n        return this._approveAllTokenNftAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId\n    ) {\n        return this._approveAllTokenNftAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true\n        );\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._hbarApprovals.map((approval) =>\n            approval._validateChecksums(client)\n        );\n        this._tokenApprovals.map((approval) =>\n            approval._validateChecksums(client)\n        );\n        this._nftApprovals.map((approval) =>\n            approval._validateChecksums(client)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.approveAllowances(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoApproveAllowance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.ICryptoApproveAllowanceTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            cryptoAllowances: this._hbarApprovals.map((approval) =>\n                approval._toProtobuf()\n            ),\n            tokenAllowances: this._tokenApprovals.map((approval) =>\n                approval._toProtobuf()\n            ),\n            nftAllowances: this._nftApprovals.map((approval) =>\n                approval._toProtobuf()\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceApproveTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoApproveAllowance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountAllowanceApproveTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}