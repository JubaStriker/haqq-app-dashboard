{"ast":null,"code":"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nconst INITIAL_TRANSACTION_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst useTransactionStore = create(set => ({\n  transactionState: INITIAL_TRANSACTION_STATE,\n  getTransactionState: async () => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.transactionState,\n        get: { ...INITIAL_TRANSACTION_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const data = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      console.log(data);\n    } catch (e) {\n      throw e;\n    }\n  }\n}));\nexport default useTransactionStore;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/transaction/index.js"],"names":["create","axios","produce","INTERNAL_SERVER_ERROR","INITIAL_TRANSACTION_STATE","get","loading","success","ok","data","failure","error","message","post","useTransactionStore","set","transactionState","getTransactionState","state","walletState","process","env","REACT_APP_API_SHOPLOOKS_SERVER_URL","shop","console","log","e"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,MAAMC,yBAAyB,GAAG;AAC9BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,KADG;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAFN;AAMHC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,OAAO,EAAE;AAFF;AANN,GADyB;AAY9BC,EAAAA,IAAI,EAAE;AACJP,IAAAA,OAAO,EAAE,KADL;AAEJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,KADG;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAFL;AAMJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,OAAO,EAAE;AAFF;AANL;AAZwB,CAAlC;AAyBE,MAAME,mBAAmB,GAAGd,MAAM,CAAEe,GAAD,KAAU;AAC3CC,EAAAA,gBAAgB,EAAEZ,yBADyB;AAE3Ca,EAAAA,mBAAmB,EAAE,YAAY;AAC7BF,IAAAA,GAAG,CACCb,OAAO,CAAEgB,KAAD,KAAY,EAClB,GAAGA,KADe;AAElBC,MAAAA,WAAW,EAAE,EACX,GAAGD,KAAK,CAACF,gBADE;AAEXX,QAAAA,GAAG,EAAE,EACH,GAAGD,yBAAyB,CAACC,GAD1B;AAEHC,UAAAA,OAAO,EAAE;AAFN;AAFM;AAFK,KAAZ,CAAD,CADR,CAAH;;AAaE,QAAG;AACD,YAAMG,IAAI,GAAG,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEe,OAAO,CAACC,GAAR,CAAYC,kCAAmC,sBAAqBC,IAAK,EAAtF,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AAED,KAJD,CAIE,OAAMiB,CAAN,EAAQ;AACR,YAAMA,CAAN;AACD;AACN;AAvB0C,CAAV,CAAD,CAAlC;AA0BA,eAAeZ,mBAAf","sourcesContent":["import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_TRANSACTION_STATE = {\n    get: {\n      loading: false,\n      success: {\n        ok: false,\n        data: [],\n      },\n      failure: {\n        error: false,\n        message: \"\",\n      },\n    },\n    post: {\n      loading: false,\n      success: {\n        ok: false,\n        data: null,\n      },\n      failure: {\n        error: false,\n        message: \"\",\n      },\n    },\n  };\n\n  const useTransactionStore = create((set) => ({\n    transactionState: INITIAL_TRANSACTION_STATE,\n    getTransactionState: async () => {\n        set(\n            produce((state) => ({\n              ...state,\n              walletState: {\n                ...state.transactionState,\n                get: {\n                  ...INITIAL_TRANSACTION_STATE.get,\n                  loading: true,\n                },\n              },\n            }))\n          );\n\n          try{\n            const data = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n            console.log(data);\n\n          } catch(e){\n            throw e\n          }\n    }\n  }))\n\n  export default useTransactionStore;"]},"metadata":{},"sourceType":"module"}