{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\nimport TokenDecimalMap from \"./TokenDecimalMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n/**\n * @typedef {object} TokenBalanceJson\n * @property {string} tokenId\n * @property {string} balance\n * @property {number} decimals\n */\n\n/**\n * @typedef {object} AccountBalanceJson\n * @property {string} hbars\n * @property {TokenBalanceJson[]} tokens\n */\n\nexport default class AccountBalance {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Hbar} props.hbars\n   * @param {?TokenBalanceMap} props.tokens\n   * @param {?TokenDecimalMap} props.tokenDecimals\n   */\n  constructor(props) {\n    /**\n     * The account ID for which this balancermation applies.\n     *\n     * @readonly\n     */\n    this.hbars = props.hbars;\n    /**\n     * @deprecated - Use the mirror node API https://docs.hedera.com/guides/docs/mirror-node-api/rest-api#api-v1-accounts instead\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.tokens = props.tokens;\n    /**\n     * @deprecated - Use the mirror node API https://docs.hedera.com/guides/docs/mirror-node-api/rest-api#api-v1-accounts instead\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.tokenDecimals = props.tokenDecimals;\n    Object.freeze(this);\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {AccountBalance}\n   */\n\n\n  static fromBytes(bytes) {\n    return AccountBalance._fromProtobuf(HashgraphProto.proto.CryptoGetAccountBalanceResponse.decode(bytes));\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ICryptoGetAccountBalanceResponse} accountBalance\n   * @returns {AccountBalance}\n   */\n\n\n  static _fromProtobuf(accountBalance) {\n    const tokenBalances = new TokenBalanceMap();\n    const tokenDecimals = new TokenDecimalMap();\n\n    if (accountBalance.tokenBalances != null) {\n      for (const balance of accountBalance.tokenBalances) {\n        const tokenId = TokenId._fromProtobuf(\n        /** @type {HashgraphProto.proto.ITokenID} */\n        balance.tokenId);\n\n        tokenDecimals._set(tokenId, balance.decimals != null ? balance.decimals : 0);\n\n        tokenBalances._set(tokenId, Long.fromValue(\n        /** @type {Long} */\n        balance.balance));\n      }\n    }\n\n    return new AccountBalance({\n      hbars: Hbar.fromTinybars(\n      /** @type {Long} */\n      accountBalance.balance),\n      tokens: tokenBalances,\n      tokenDecimals\n    });\n  }\n  /**\n   * @returns {HashgraphProto.proto.ICryptoGetAccountBalanceResponse}\n   */\n\n\n  _toProtobuf() {\n    /** @type {HashgraphProto.proto.ITokenBalance[]} */\n    const list = []; // eslint-disable-next-line deprecation/deprecation\n\n    for (const [key, value] of this.tokens != null ? this.tokens : []) {\n      list.push({\n        tokenId: key._toProtobuf(),\n        balance: value,\n        decimals: // eslint-disable-next-line deprecation/deprecation\n        this.tokenDecimals != null ? // eslint-disable-next-line deprecation/deprecation\n        this.tokenDecimals.get(key) : null\n      });\n    }\n\n    return {\n      balance: this.hbars.toTinybars(),\n      tokenBalances: list\n    };\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.CryptoGetAccountBalanceResponse.encode(this._toProtobuf()).finish();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @returns {AccountBalanceJson}\n   */\n\n\n  toJSON() {\n    const tokens = []; // eslint-disable-next-line deprecation/deprecation\n\n    for (const [key, value] of this.tokens != null ? this.tokens : []) {\n      const decimals = // eslint-disable-next-line deprecation/deprecation\n      this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;\n      tokens.push({\n        tokenId: key.toString(),\n        balance: value.toString(),\n        decimals: decimals != null ? decimals : 0\n      });\n    }\n\n    return {\n      hbars: this.hbars.toString(),\n      tokens\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/AccountBalance.js"],"names":["Long","Hbar","TokenId","TokenBalanceMap","TokenDecimalMap","HashgraphProto","AccountBalance","constructor","props","hbars","tokens","tokenDecimals","Object","freeze","fromBytes","bytes","_fromProtobuf","proto","CryptoGetAccountBalanceResponse","decode","accountBalance","tokenBalances","balance","tokenId","_set","decimals","fromValue","fromTinybars","_toProtobuf","list","key","value","push","get","toTinybars","toBytes","encode","finish","toString","JSON","stringify","toJSON"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\nimport TokenDecimalMap from \"./TokenDecimalMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {object} TokenBalanceJson\n * @property {string} tokenId\n * @property {string} balance\n * @property {number} decimals\n */\n\n/**\n * @typedef {object} AccountBalanceJson\n * @property {string} hbars\n * @property {TokenBalanceJson[]} tokens\n */\n\nexport default class AccountBalance {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Hbar} props.hbars\n     * @param {?TokenBalanceMap} props.tokens\n     * @param {?TokenDecimalMap} props.tokenDecimals\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this balancermation applies.\n         *\n         * @readonly\n         */\n        this.hbars = props.hbars;\n\n        /**\n         * @deprecated - Use the mirror node API https://docs.hedera.com/guides/docs/mirror-node-api/rest-api#api-v1-accounts instead\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.tokens = props.tokens;\n\n        /**\n         * @deprecated - Use the mirror node API https://docs.hedera.com/guides/docs/mirror-node-api/rest-api#api-v1-accounts instead\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.tokenDecimals = props.tokenDecimals;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountBalance}\n     */\n    static fromBytes(bytes) {\n        return AccountBalance._fromProtobuf(\n            HashgraphProto.proto.CryptoGetAccountBalanceResponse.decode(bytes)\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ICryptoGetAccountBalanceResponse} accountBalance\n     * @returns {AccountBalance}\n     */\n    static _fromProtobuf(accountBalance) {\n        const tokenBalances = new TokenBalanceMap();\n        const tokenDecimals = new TokenDecimalMap();\n\n        if (accountBalance.tokenBalances != null) {\n            for (const balance of accountBalance.tokenBalances) {\n                const tokenId = TokenId._fromProtobuf(\n                    /** @type {HashgraphProto.proto.ITokenID} */ (\n                        balance.tokenId\n                    )\n                );\n\n                tokenDecimals._set(\n                    tokenId,\n                    balance.decimals != null ? balance.decimals : 0\n                );\n                tokenBalances._set(\n                    tokenId,\n                    Long.fromValue(/** @type {Long} */ (balance.balance))\n                );\n            }\n        }\n\n        return new AccountBalance({\n            hbars: Hbar.fromTinybars(\n                /** @type {Long} */ (accountBalance.balance)\n            ),\n            tokens: tokenBalances,\n            tokenDecimals,\n        });\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.ICryptoGetAccountBalanceResponse}\n     */\n    _toProtobuf() {\n        /** @type {HashgraphProto.proto.ITokenBalance[]} */\n        const list = [];\n\n        // eslint-disable-next-line deprecation/deprecation\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            list.push({\n                tokenId: key._toProtobuf(),\n                balance: value,\n                decimals:\n                    // eslint-disable-next-line deprecation/deprecation\n                    this.tokenDecimals != null\n                        ? // eslint-disable-next-line deprecation/deprecation\n                          this.tokenDecimals.get(key)\n                        : null,\n            });\n        }\n\n        return {\n            balance: this.hbars.toTinybars(),\n            tokenBalances: list,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.CryptoGetAccountBalanceResponse.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {AccountBalanceJson}\n     */\n    toJSON() {\n        const tokens = [];\n        // eslint-disable-next-line deprecation/deprecation\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            const decimals =\n                // eslint-disable-next-line deprecation/deprecation\n                this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;\n\n            tokens.push({\n                tokenId: key.toString(),\n                balance: value.toString(),\n                decimals: decimals != null ? decimals : 0,\n            });\n        }\n\n        return {\n            hbars: this.hbars.toString(),\n            tokens,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}