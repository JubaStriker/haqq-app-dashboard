{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar isEqual = require('lodash.isequal');\n\nfunction hexToBytes(hex) {\n  var bytes = [];\n\n  for (var c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n\n  return bytes;\n}\n\nmodule.exports = {\n  isValidAddress: function (address) {\n    if (address.length !== 76) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } // Otherwise check each case\n\n\n    return this.verifyChecksum(address);\n  },\n  verifyChecksum: function (address) {\n    var checksumBytes = address.slice(0, 32 * 2);\n    var check = address.slice(32 * 2, 38 * 2);\n    var blakeHash = cryptoUtils.blake2b(checksumBytes, 32).slice(0, 6 * 2);\n    return !!isEqual(blakeHash, check);\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/siacoin_validator.js"],"names":["cryptoUtils","require","isEqual","hexToBytes","hex","bytes","c","length","push","parseInt","substr","module","exports","isValidAddress","address","verifyChecksum","checksumBytes","slice","check","blakeHash","blake2b"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AAEA,SAASE,UAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,KAAK,CAACG,IAAN,CAAWC,QAAQ,CAACL,GAAG,CAACM,MAAJ,CAAWJ,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAnB;AACD;;AACD,SAAOD,KAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,UAASC,OAAT,EAAkB;AAChC,QAAIA,OAAO,CAACP,MAAR,KAAmB,EAAvB,EAA2B;AACzB;AACA,aAAO,KAAP;AACD,KAJ+B,CAMhC;;;AACA,WAAO,KAAKQ,cAAL,CAAoBD,OAApB,CAAP;AACD,GATc;AAUfC,EAAAA,cAAc,EAAE,UAASD,OAAT,EAAkB;AAChC,QAAIE,aAAa,GAAGF,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,KAAG,CAApB,CAApB;AACA,QAAIC,KAAK,GAAGJ,OAAO,CAACG,KAAR,CAAc,KAAG,CAAjB,EAAoB,KAAG,CAAvB,CAAZ;AACA,QAAIE,SAAS,GAAGnB,WAAW,CAACoB,OAAZ,CAAoBJ,aAApB,EAAmC,EAAnC,EAAuCC,KAAvC,CAA6C,CAA7C,EAAgD,IAAE,CAAlD,CAAhB;AACA,WAAO,CAAC,CAACf,OAAO,CAACiB,SAAD,EAAYD,KAAZ,CAAhB;AACD;AAfc,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils')\nvar isEqual = require('lodash.isequal')\n\nfunction hexToBytes(hex) {\n  var bytes = []\n  for (var c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16))\n  }\n  return bytes\n}\n\nmodule.exports = {\n  isValidAddress: function(address) {\n    if (address.length !== 76) {\n      // Check if it has the basic requirements of an address\n      return false\n    }\n\n    // Otherwise check each case\n    return this.verifyChecksum(address)\n  },\n  verifyChecksum: function(address) {\n    var checksumBytes = address.slice(0, 32*2)\n    var check = address.slice(32*2, 38*2)\n    var blakeHash = cryptoUtils.blake2b(checksumBytes, 32).slice(0, 6*2)\n    return !!isEqual(blakeHash, check)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}