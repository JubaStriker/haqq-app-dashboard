{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Timestamp from \"../Timestamp.js\";\nimport TopicMessageChunk from \"./TopicMessageChunk.js\";\nimport Long from \"long\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\nexport default class TopicMessage {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Timestamp} props.consensusTimestamp\n   * @param {Uint8Array} props.contents\n   * @param {Uint8Array} props.runningHash\n   * @param {Long} props.sequenceNumber\n   * @param {?TransactionId} props.initialTransactionId\n   * @param {TopicMessageChunk[]} props.chunks\n   */\n  constructor(props) {\n    /** @readonly */\n    this.consensusTimestamp = props.consensusTimestamp;\n    /** @readonly */\n\n    this.contents = props.contents;\n    /** @readonly */\n\n    this.runningHash = props.runningHash;\n    /** @readonly */\n\n    this.sequenceNumber = props.sequenceNumber;\n    /** @readonly */\n\n    this.chunks = props.chunks;\n    /** @readonly */\n\n    this.initialTransactionId = props.initialTransactionId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse} response\n   * @returns {TopicMessage}\n   */\n\n\n  static _ofSingle(response) {\n    return new TopicMessage({\n      consensusTimestamp: Timestamp._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITimestamp} */\n      response.consensusTimestamp),\n      contents: response.message != null ? response.message : new Uint8Array(),\n      runningHash: response.runningHash != null ? response.runningHash : new Uint8Array(),\n      sequenceNumber: response.sequenceNumber != null ? response.sequenceNumber instanceof Long ? response.sequenceNumber : Long.fromNumber(response.sequenceNumber) : Long.ZERO,\n      initialTransactionId: response.chunkInfo != null && response.chunkInfo.initialTransactionID != null ? TransactionId._fromProtobuf(response.chunkInfo.initialTransactionID) : null,\n      chunks: [TopicMessageChunk._fromProtobuf(response)]\n    });\n  }\n  /**\n   * @internal\n   * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse[]} responses\n   * @returns {TopicMessage}\n   */\n\n\n  static _ofMany(responses) {\n    const length = responses.length;\n    const last =\n    /** @type {com.hedera.mirror.api.proto.IConsensusTopicResponse} */\n    responses[length - 1];\n\n    const consensusTimestamp = Timestamp._fromProtobuf(\n    /** @type {HashgraphProto.proto.ITimestamp} */\n    last.consensusTimestamp);\n\n    const runningHash =\n    /** @type {Uint8Array} */\n    last.runningHash;\n    /**\n     * @type {Long}\n     */\n\n    const sequenceNumber = last.sequenceNumber != null ? last.sequenceNumber instanceof Long ? last.sequenceNumber : Long.fromValue(last.sequenceNumber) : Long.ZERO;\n    responses.sort((a, b) => (a != null ? a.chunkInfo != null ? a.chunkInfo.number != null ? a.chunkInfo.number : 0 : 0 : 0) < (b != null ? b.chunkInfo != null ? b.chunkInfo.number != null ? b.chunkInfo.number : 0 : 0 : 0) ? -1 : 1);\n    /**\n     * @type {TopicMessageChunk[]}\n     */\n\n    const chunks = responses.map(\n    /**\n     * @type {com.hedera.mirror.api.proto.IConsensusTopicResponse}\n     */\n    m => TopicMessageChunk._fromProtobuf(m));\n    const size = chunks.map(chunk => chunk.contents.length).reduce((sum, current) => sum + current, 0);\n    const contents = new Uint8Array(size);\n    let offset = 0;\n    responses.forEach(value => {\n      contents.set(\n      /** @type {Uint8Array} */\n      value.message, offset);\n      offset +=\n      /** @type {Uint8Array} */\n      value.message.length;\n    });\n    let initialTransactionId = null;\n\n    if (responses.length > 0 && responses[0].chunkInfo != null && responses[0].chunkInfo.initialTransactionID != null) {\n      initialTransactionId = TransactionId._fromProtobuf(responses[0].chunkInfo.initialTransactionID);\n    }\n\n    return new TopicMessage({\n      consensusTimestamp,\n      contents,\n      runningHash,\n      sequenceNumber,\n      chunks,\n      initialTransactionId\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/topic/TopicMessage.js"],"names":["Timestamp","TopicMessageChunk","Long","TransactionId","TopicMessage","constructor","props","consensusTimestamp","contents","runningHash","sequenceNumber","chunks","initialTransactionId","Object","freeze","_ofSingle","response","_fromProtobuf","message","Uint8Array","fromNumber","ZERO","chunkInfo","initialTransactionID","_ofMany","responses","length","last","fromValue","sort","a","b","number","map","m","size","chunk","reduce","sum","current","offset","forEach","value","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Timestamp from \"../Timestamp.js\";\nimport TopicMessageChunk from \"./TopicMessageChunk.js\";\nimport Long from \"long\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HashgraphProto.proto.ITimestamp\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\nexport default class TopicMessage {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?TransactionId} props.initialTransactionId\n     * @param {TopicMessageChunk[]} props.chunks\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n        /** @readonly */\n        this.chunks = props.chunks;\n        /** @readonly */\n        this.initialTransactionId = props.initialTransactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse} response\n     * @returns {TopicMessage}\n     */\n    static _ofSingle(response) {\n        return new TopicMessage({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */\n                (response.consensusTimestamp)\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromNumber(response.sequenceNumber)\n                    : Long.ZERO,\n            initialTransactionId:\n                response.chunkInfo != null &&\n                response.chunkInfo.initialTransactionID != null\n                    ? TransactionId._fromProtobuf(\n                          response.chunkInfo.initialTransactionID\n                      )\n                    : null,\n            chunks: [TopicMessageChunk._fromProtobuf(response)],\n        });\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse[]} responses\n     * @returns {TopicMessage}\n     */\n    static _ofMany(responses) {\n        const length = responses.length;\n\n        const last =\n            /** @type {com.hedera.mirror.api.proto.IConsensusTopicResponse} */ (\n                responses[length - 1]\n            );\n\n        const consensusTimestamp = Timestamp._fromProtobuf(\n            /** @type {HashgraphProto.proto.ITimestamp} */\n            (last.consensusTimestamp)\n        );\n\n        const runningHash = /** @type {Uint8Array} */ (last.runningHash);\n\n        /**\n         * @type {Long}\n         */\n        const sequenceNumber =\n            last.sequenceNumber != null\n                ? last.sequenceNumber instanceof Long\n                    ? last.sequenceNumber\n                    : Long.fromValue(last.sequenceNumber)\n                : Long.ZERO;\n\n        responses.sort((a, b) =>\n            (a != null\n                ? a.chunkInfo != null\n                    ? a.chunkInfo.number != null\n                        ? a.chunkInfo.number\n                        : 0\n                    : 0\n                : 0) <\n            (b != null\n                ? b.chunkInfo != null\n                    ? b.chunkInfo.number != null\n                        ? b.chunkInfo.number\n                        : 0\n                    : 0\n                : 0)\n                ? -1\n                : 1\n        );\n\n        /**\n         * @type {TopicMessageChunk[]}\n         */\n        const chunks = responses.map(\n            /**\n             * @type {com.hedera.mirror.api.proto.IConsensusTopicResponse}\n             */ (m) => TopicMessageChunk._fromProtobuf(m)\n        );\n\n        const size = chunks\n            .map((chunk) => chunk.contents.length)\n            .reduce((sum, current) => sum + current, 0);\n\n        const contents = new Uint8Array(size);\n        let offset = 0;\n\n        responses.forEach((value) => {\n            contents.set(/** @type {Uint8Array} */ (value.message), offset);\n            offset += /** @type {Uint8Array} */ (value.message).length;\n        });\n\n        let initialTransactionId = null;\n        if (\n            responses.length > 0 &&\n            responses[0].chunkInfo != null &&\n            responses[0].chunkInfo.initialTransactionID != null\n        ) {\n            initialTransactionId = TransactionId._fromProtobuf(\n                responses[0].chunkInfo.initialTransactionID\n            );\n        }\n\n        return new TopicMessage({\n            consensusTimestamp,\n            contents,\n            runningHash,\n            sequenceNumber,\n            chunks,\n            initialTransactionId,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}