{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nfunction decodeBase58Address(base58Sting) {\n  if (typeof base58Sting !== 'string') {\n    return false;\n  }\n\n  if (base58Sting.length <= 4) {\n    return false;\n  }\n\n  try {\n    var address = cryptoUtils.base58(base58Sting);\n  } catch (e) {\n    return false;\n  }\n  /*if (base58Sting.length <= 4) {\n      return false;\n  }*/\n\n\n  var len = address.length;\n  var offset = len - 4;\n  var checkSum = address.slice(offset);\n  address = address.slice(0, offset);\n  var hash0 = cryptoUtils.sha256(cryptoUtils.byteArray2hexStr(address));\n  var hash1 = cryptoUtils.hexStr2byteArray(cryptoUtils.sha256(hash0));\n  var checkSum1 = hash1.slice(0, 4);\n\n  if (checkSum[0] === checkSum1[0] && checkSum[1] === checkSum1[1] && checkSum[2] === checkSum1[2] && checkSum[3] === checkSum1[3]) {\n    return address;\n  }\n\n  return false;\n}\n\nfunction getEnv(currency, networkType) {\n  var evn = networkType || 'prod';\n  if (evn !== 'prod' && evn !== 'testnet') evn = 'prod';\n  return currency.addressTypes[evn][0];\n}\n\nmodule.exports = {\n  /**\n   * tron address validation\n   */\n  isValidAddress: function (mainAddress, currency, opts) {\n    var networkType = opts ? opts.networkType : '';\n    var address = decodeBase58Address(mainAddress);\n\n    if (!address) {\n      return false;\n    }\n\n    if (address.length !== 21) {\n      return false;\n    }\n\n    return getEnv(currency, networkType) === address[0];\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/tron_validator.js"],"names":["cryptoUtils","require","decodeBase58Address","base58Sting","length","address","base58","e","len","offset","checkSum","slice","hash0","sha256","byteArray2hexStr","hash1","hexStr2byteArray","checkSum1","getEnv","currency","networkType","evn","addressTypes","module","exports","isValidAddress","mainAddress","opts"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,SAASC,mBAAT,CAA6BC,WAA7B,EAA0C;AACtC,MAAI,OAAQA,WAAR,KAAyB,QAA7B,EAAuC;AACnC,WAAO,KAAP;AACH;;AACD,MAAIA,WAAW,CAACC,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,WAAO,KAAP;AACH;;AAED,MAAI;AACA,QAAIC,OAAO,GAAGL,WAAW,CAACM,MAAZ,CAAmBH,WAAnB,CAAd;AACH,GAFD,CAEE,OAAOI,CAAP,EAAU;AACR,WAAO,KAAP;AACH;AAED;AACJ;AACA;;;AACI,MAAIC,GAAG,GAAGH,OAAO,CAACD,MAAlB;AACA,MAAIK,MAAM,GAAGD,GAAG,GAAG,CAAnB;AACA,MAAIE,QAAQ,GAAGL,OAAO,CAACM,KAAR,CAAcF,MAAd,CAAf;AACAJ,EAAAA,OAAO,GAAGA,OAAO,CAACM,KAAR,CAAc,CAAd,EAAiBF,MAAjB,CAAV;AACA,MAAIG,KAAK,GAAGZ,WAAW,CAACa,MAAZ,CAAmBb,WAAW,CAACc,gBAAZ,CAA6BT,OAA7B,CAAnB,CAAZ;AACA,MAAIU,KAAK,GAAGf,WAAW,CAACgB,gBAAZ,CAA6BhB,WAAW,CAACa,MAAZ,CAAmBD,KAAnB,CAA7B,CAAZ;AACA,MAAIK,SAAS,GAAGF,KAAK,CAACJ,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAhB;;AACA,MAAID,QAAQ,CAAC,CAAD,CAAR,KAAgBO,SAAS,CAAC,CAAD,CAAzB,IAAgCP,QAAQ,CAAC,CAAD,CAAR,KAAgBO,SAAS,CAAC,CAAD,CAAzD,IAAgEP,QAAQ,CAAC,CAAD,CAAR,KAC5DO,SAAS,CAAC,CAAD,CADb,IACoBP,QAAQ,CAAC,CAAD,CAAR,KAAgBO,SAAS,CAAC,CAAD,CADjD,EAEE;AACE,WAAOZ,OAAP;AACH;;AAED,SAAO,KAAP;AACH;;AAED,SAASa,MAAT,CAAgBC,QAAhB,EAA0BC,WAA1B,EAAuC;AACnC,MAAIC,GAAG,GAAGD,WAAW,IAAI,MAAzB;AAEA,MAAIC,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,SAA9B,EAAyCA,GAAG,GAAG,MAAN;AAEzC,SAAOF,QAAQ,CAACG,YAAT,CAAsBD,GAAtB,EAA2B,CAA3B,CAAP;AACH;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACIC,EAAAA,cAAc,EAAE,UAAUC,WAAV,EAAuBP,QAAvB,EAAiCQ,IAAjC,EAAuC;AACnD,QAAIP,WAAW,GAAGO,IAAI,GAAGA,IAAI,CAACP,WAAR,GAAsB,EAA5C;AACA,QAAIf,OAAO,GAAGH,mBAAmB,CAACwB,WAAD,CAAjC;;AAEA,QAAI,CAACrB,OAAL,EAAc;AACV,aAAO,KAAP;AACH;;AAED,QAAIA,OAAO,CAACD,MAAR,KAAmB,EAAvB,EAA2B;AACvB,aAAO,KAAP;AACH;;AAED,WAAOc,MAAM,CAACC,QAAD,EAAWC,WAAX,CAAN,KAAkCf,OAAO,CAAC,CAAD,CAAhD;AACH;AAjBY,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils');\n\nfunction decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) !== 'string') {\n        return false;\n    }\n    if (base58Sting.length <= 4) {\n        return false;\n    }\n\n    try {\n        var address = cryptoUtils.base58(base58Sting);\n    } catch (e) {\n        return false\n    }\n\n    /*if (base58Sting.length <= 4) {\n        return false;\n    }*/\n    var len = address.length;\n    var offset = len - 4;\n    var checkSum = address.slice(offset);\n    address = address.slice(0, offset);\n    var hash0 = cryptoUtils.sha256(cryptoUtils.byteArray2hexStr(address));\n    var hash1 = cryptoUtils.hexStr2byteArray(cryptoUtils.sha256(hash0));\n    var checkSum1 = hash1.slice(0, 4);\n    if (checkSum[0] === checkSum1[0] && checkSum[1] === checkSum1[1] && checkSum[2]\n        === checkSum1[2] && checkSum[3] === checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return false;\n}\n\nfunction getEnv(currency, networkType) {\n    var evn = networkType || 'prod';\n\n    if (evn !== 'prod' && evn !== 'testnet') evn = 'prod';\n\n    return currency.addressTypes[evn][0]\n}\n\nmodule.exports = {\n    /**\n     * tron address validation\n     */\n    isValidAddress: function (mainAddress, currency, opts) {\n        var networkType = opts ? opts.networkType : '';\n        var address = decodeBase58Address(mainAddress);\n\n        if (!address) {\n            return false;\n        }\n\n        if (address.length !== 21) {\n            return false;\n        }\n\n        return getEnv(currency, networkType) === address[0];\n    }\n};\n"]},"metadata":{},"sourceType":"script"}