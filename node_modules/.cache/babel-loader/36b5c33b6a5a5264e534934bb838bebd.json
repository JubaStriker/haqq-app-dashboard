{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\n/**\n * A custom list type which round robins, supports locking, and as additional\n * QoL improvements.\n *\n * @template {any} T\n */\nexport default class List {\n  constructor() {\n    /** @type {T[]} */\n    this.list = [];\n    this.locked = false;\n    this.index = 0;\n  }\n  /**\n   * Overwrite the entire list.\n   *\n   * @throws if the list is locked\n   * @param {T[]} list\n   * @returns {this}\n   */\n\n\n  setList(list) {\n    if (this.locked) {\n      throw new Error(\"list is locked\");\n    }\n\n    this.list = list;\n    this.index = 0;\n    return this;\n  }\n  /**\n   * Push items to the end of the list.\n   *\n   * @throws if the list is locked\n   * @param {T[]} items\n   * @returns {this}\n   */\n\n\n  push() {\n    if (this.locked) {\n      throw new Error(\"list is locked\");\n    }\n\n    this.list.push(...arguments);\n    return this;\n  }\n  /**\n   * Locks the list.\n   *\n   * @returns {this}\n   */\n\n\n  setLocked() {\n    this.locked = true;\n    return this;\n  }\n  /**\n   * Clear the list\n   *\n   * @throws if the list is locked\n   */\n\n\n  clear() {\n    if (this.locked) {\n      throw new Error(\"list is locked\");\n    }\n\n    this.list = [];\n    this.index = 0;\n  }\n  /**\n   * The get value at a particular index.\n   *\n   * @param {number} index\n   * @returns {T}\n   */\n\n\n  get(index) {\n    return this.list[index];\n  }\n  /**\n   * Set value at index\n   *\n   * @throws if the list is locked\n   * @param {number} index\n   * @param {T} item\n   * @returns {this}\n   */\n\n\n  set(index, item) {\n    if (this.locked) {\n      throw new Error(\"list is locked\");\n    } // QoL: If the index is at the end simply push the element to the end\n\n\n    if (index === this.length) {\n      this.list.push(item);\n    } else {\n      this.list[index] = item;\n    }\n\n    return this;\n  }\n  /**\n   * Set value at index if it's not already set\n   *\n   * @throws if the list is locked\n   * @param {number} index\n   * @param {() => T} lambda\n   * @returns {this}\n   */\n\n\n  setIfAbsent(index, lambda) {\n    if (index == this.length || this.list[index] == null) {\n      this.set(index, lambda());\n    }\n\n    return this;\n  }\n  /**\n   * Get the current value, and advance the index\n   *\n   * @returns {T}\n   */\n\n\n  get next() {\n    return this.get(this.advance());\n  }\n  /**\n   * Get the current value.\n   *\n   * @returns {T}\n   */\n\n\n  get current() {\n    return this.get(this.index);\n  }\n  /**\n   * Advance the index to the next element in a round robin fashion\n   *\n   * @returns {number}\n   */\n\n\n  advance() {\n    const index = this.index;\n    this.index = (this.index + 1) % this.list.length;\n    return index;\n  }\n  /**\n   * Is the list empty\n   *\n   * @returns {boolean}\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * Get the length of the list\n   *\n   * @returns {number}\n   */\n\n\n  get length() {\n    return this.list.length;\n  }\n  /**\n   * Shallow clone this list.\n   * Perhaps we should explicitly call this `shallowClone()` since it doesn't\n   * clone the list inside?\n   *\n   * @returns {List<T>}\n   */\n\n\n  clone() {\n    /** @type {List<T>} */\n    const list = new List();\n    list.list = this.list;\n    list.locked = this.locked;\n    return list;\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/transaction/List.js"],"names":["List","constructor","list","locked","index","setList","Error","push","setLocked","clear","get","set","item","length","setIfAbsent","lambda","next","advance","current","isEmpty","clone"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\n/**\n * A custom list type which round robins, supports locking, and as additional\n * QoL improvements.\n *\n * @template {any} T\n */\nexport default class List {\n    constructor() {\n        /** @type {T[]} */\n        this.list = [];\n        this.locked = false;\n        this.index = 0;\n    }\n\n    /**\n     * Overwrite the entire list.\n     *\n     * @throws if the list is locked\n     * @param {T[]} list\n     * @returns {this}\n     */\n    setList(list) {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        this.list = list;\n        this.index = 0;\n\n        return this;\n    }\n\n    /**\n     * Push items to the end of the list.\n     *\n     * @throws if the list is locked\n     * @param {T[]} items\n     * @returns {this}\n     */\n    push(...items) {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        this.list.push(...items);\n        return this;\n    }\n\n    /**\n     * Locks the list.\n     *\n     * @returns {this}\n     */\n    setLocked() {\n        this.locked = true;\n        return this;\n    }\n\n    /**\n     * Clear the list\n     *\n     * @throws if the list is locked\n     */\n    clear() {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        this.list = [];\n        this.index = 0;\n    }\n\n    /**\n     * The get value at a particular index.\n     *\n     * @param {number} index\n     * @returns {T}\n     */\n    get(index) {\n        return this.list[index];\n    }\n\n    /**\n     * Set value at index\n     *\n     * @throws if the list is locked\n     * @param {number} index\n     * @param {T} item\n     * @returns {this}\n     */\n    set(index, item) {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        // QoL: If the index is at the end simply push the element to the end\n        if (index === this.length) {\n            this.list.push(item);\n        } else {\n            this.list[index] = item;\n        }\n\n        return this;\n    }\n\n    /**\n     * Set value at index if it's not already set\n     *\n     * @throws if the list is locked\n     * @param {number} index\n     * @param {() => T} lambda\n     * @returns {this}\n     */\n    setIfAbsent(index, lambda) {\n        if (index == this.length || this.list[index] == null) {\n            this.set(index, lambda());\n        }\n\n        return this;\n    }\n\n    /**\n     * Get the current value, and advance the index\n     *\n     * @returns {T}\n     */\n    get next() {\n        return this.get(this.advance());\n    }\n\n    /**\n     * Get the current value.\n     *\n     * @returns {T}\n     */\n    get current() {\n        return this.get(this.index);\n    }\n\n    /**\n     * Advance the index to the next element in a round robin fashion\n     *\n     * @returns {number}\n     */\n    advance() {\n        const index = this.index;\n        this.index = (this.index + 1) % this.list.length;\n        return index;\n    }\n\n    /**\n     * Is the list empty\n     *\n     * @returns {boolean}\n     */\n    get isEmpty() {\n        return this.length === 0;\n    }\n\n    /**\n     * Get the length of the list\n     *\n     * @returns {number}\n     */\n    get length() {\n        return this.list.length;\n    }\n\n    /**\n     * Shallow clone this list.\n     * Perhaps we should explicitly call this `shallowClone()` since it doesn't\n     * clone the list inside?\n     *\n     * @returns {List<T>}\n     */\n    clone() {\n        /** @type {List<T>} */\n        const list = new List();\n        list.list = this.list;\n        list.locked = this.locked;\n        return list;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}