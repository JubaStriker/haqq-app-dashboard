{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar regexp = new RegExp('^[0-9]{1,20}L$');\nmodule.exports = {\n  isValidAddress: function (address) {\n    if (!regexp.test(address)) {\n      return false;\n    }\n\n    return this.verifyAddress(address);\n  },\n  verifyAddress: function (address) {\n    var BUFFER_SIZE = 8;\n    var bigNumber = address.substring(0, address.length - 1);\n    var addressBuffer = cryptoUtils.bigNumberToBuffer(bigNumber);\n    return Buffer.from(addressBuffer).slice(0, BUFFER_SIZE).equals(addressBuffer);\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/lisk_validator.js"],"names":["cryptoUtils","require","regexp","RegExp","module","exports","isValidAddress","address","test","verifyAddress","BUFFER_SIZE","bigNumber","substring","length","addressBuffer","bigNumberToBuffer","Buffer","from","slice","equals"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,gBAAX,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAASC,OAAT,EAAkB;AAC9B,QAAI,CAACL,MAAM,CAACM,IAAP,CAAYD,OAAZ,CAAL,EAA2B;AACvB,aAAO,KAAP;AACH;;AACD,WAAO,KAAKE,aAAL,CAAmBF,OAAnB,CAAP;AACH,GANY;AAQbE,EAAAA,aAAa,EAAE,UAASF,OAAT,EAAkB;AAC7B,QAAIG,WAAW,GAAG,CAAlB;AACA,QAAIC,SAAS,GAAGJ,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBL,OAAO,CAACM,MAAR,GAAiB,CAAtC,CAAhB;AACA,QAAIC,aAAa,GAAGd,WAAW,CAACe,iBAAZ,CAA8BJ,SAA9B,CAApB;AACA,WAAOK,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,KAA3B,CAAiC,CAAjC,EAAoCR,WAApC,EAAiDS,MAAjD,CAAwDL,aAAxD,CAAP;AACH;AAbY,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils');\n\nvar regexp = new RegExp('^[0-9]{1,20}L$');\n\nmodule.exports = {\n    isValidAddress: function(address) {\n        if (!regexp.test(address)) {\n            return false;\n        }\n        return this.verifyAddress(address)\n    },\n\n    verifyAddress: function(address) {\n        var BUFFER_SIZE = 8;\n        var bigNumber = address.substring(0, address.length - 1);\n        var addressBuffer = cryptoUtils.bigNumberToBuffer(bigNumber);\n        return Buffer.from(addressBuffer).slice(0, BUFFER_SIZE).equals(addressBuffer);\n    }\n};"]},"metadata":{},"sourceType":"script"}