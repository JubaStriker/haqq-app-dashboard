{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport FileId from \"./FileId.js\";\nimport FileInfo from \"./FileInfo.js\";\nimport Hbar from \"../Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoQuery} HashgraphProto.proto.IFileGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoResponse} HashgraphProto.proto.IFileGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.FileGetInfoResponse.IFileInfo} HashgraphProto.proto.IFileInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<FileInfo>}\n */\n\nexport default class FileInfoQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {FileId | string} [props.fileId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?FileId}\n     * @private\n     */\n\n    this._fileId = null;\n\n    if (props.fileId != null) {\n      this.setFileId(props.fileId);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} query\n   * @returns {FileInfoQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const info =\n    /** @type {HashgraphProto.proto.IFileGetInfoQuery} */\n    query.fileGetInfo;\n    return new FileInfoQuery({\n      fileId: info.fileID != null ? FileId._fromProtobuf(info.fileID) : undefined\n    });\n  }\n  /**\n   * @returns {?FileId}\n   */\n\n\n  get fileId() {\n    return this._fileId;\n  }\n  /**\n   * Set the file ID for which the info is being requested.\n   *\n   * @param {FileId | string} fileId\n   * @returns {FileInfoQuery}\n   */\n\n\n  setFileId(fileId) {\n    this._fileId = typeof fileId === \"string\" ? FileId.fromString(fileId) : fileId.clone();\n    return this;\n  }\n  /**\n   * @override\n   * @param {import(\"../client/Client.js\").default<Channel, *>} client\n   * @returns {Promise<Hbar>}\n   */\n\n\n  async getCost(client) {\n    let cost = await super.getCost(client);\n\n    if (cost.toTinybars().greaterThan(25)) {\n      return cost;\n    } else {\n      return Hbar.fromTinybars(25);\n    }\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._fileId != null) {\n      this._fileId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.file.getFileInfo(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {HashgraphProto.proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const fileGetInfo =\n    /** @type {HashgraphProto.proto.IFileGetInfoResponse} */\n    response.fileGetInfo;\n    return (\n      /** @type {HashgraphProto.proto.IResponseHeader} */\n      fileGetInfo.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<FileInfo>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const info =\n    /** @type {HashgraphProto.proto.IFileGetInfoResponse} */\n    response.fileGetInfo;\n    return Promise.resolve(FileInfo._fromProtobuf(\n    /** @type {HashgraphProto.proto.IFileInfo} */\n    info.fileInfo));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQueryHeader} header\n   * @returns {HashgraphProto.proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      fileGetInfo: {\n        header,\n        fileID: this._fileId != null ? this._fileId._toProtobuf() : null\n      }\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp = this._paymentTransactionId != null && this._paymentTransactionId.validStart != null ? this._paymentTransactionId.validStart : this._timestamp;\n    return `FileInfoQuery:${timestamp.toString()}`;\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"fileGetInfo\", FileInfoQuery._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/file/FileInfoQuery.js"],"names":["Query","QUERY_REGISTRY","FileId","FileInfo","Hbar","FileInfoQuery","constructor","props","_fileId","fileId","setFileId","_fromProtobuf","query","info","fileGetInfo","fileID","undefined","fromString","clone","getCost","client","cost","toTinybars","greaterThan","fromTinybars","_validateChecksums","validateChecksum","_execute","channel","request","file","getFileInfo","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","fileInfo","_onMakeRequest","_toProtobuf","_getLogId","timestamp","_paymentTransactionId","validStart","_timestamp","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport FileId from \"./FileId.js\";\nimport FileInfo from \"./FileInfo.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoQuery} HashgraphProto.proto.IFileGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoResponse} HashgraphProto.proto.IFileGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.FileGetInfoResponse.IFileInfo} HashgraphProto.proto.IFileInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<FileInfo>}\n */\nexport default class FileInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?FileId}\n         * @private\n         */\n        this._fileId = null;\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} query\n     * @returns {FileInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HashgraphProto.proto.IFileGetInfoQuery} */ (\n            query.fileGetInfo\n        );\n\n        return new FileInfoQuery({\n            fileId:\n                info.fileID != null\n                    ? FileId._fromProtobuf(info.fileID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the file ID for which the info is being requested.\n     *\n     * @param {FileId | string} fileId\n     * @returns {FileInfoQuery}\n     */\n    setFileId(fileId) {\n        this._fileId =\n            typeof fileId === \"string\"\n                ? FileId.fromString(fileId)\n                : fileId.clone();\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        let cost = await super.getCost(client);\n\n        if (cost.toTinybars().greaterThan(25)) {\n            return cost;\n        } else {\n            return Hbar.fromTinybars(25);\n        }\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._fileId != null) {\n            this._fileId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.getFileInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {HashgraphProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const fileGetInfo =\n            /** @type {HashgraphProto.proto.IFileGetInfoResponse} */ (\n                response.fileGetInfo\n            );\n        return /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            fileGetInfo.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<FileInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {HashgraphProto.proto.IFileGetInfoResponse} */ (\n            response.fileGetInfo\n        );\n\n        return Promise.resolve(\n            FileInfo._fromProtobuf(\n                /** @type {HashgraphProto.proto.IFileInfo} */ (info.fileInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQueryHeader} header\n     * @returns {HashgraphProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            fileGetInfo: {\n                header,\n                fileID:\n                    this._fileId != null ? this._fileId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `FileInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"fileGetInfo\", FileInfoQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}