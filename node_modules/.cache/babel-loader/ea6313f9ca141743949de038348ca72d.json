{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as util from \"../util.js\";\nimport Long from \"long\";\n/**\n * @typedef {import(\"./ContractStateChange.js\").default} ContractStateChange\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IContractFunctionResult} HashgraphProto.proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HashgraphProto.proto.IContractID\n */\n\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\n\nexport default class ContractFunctionResult {\n  /**\n   * Constructor isn't part of the stable API\n   *\n   * @param {object} result\n   * @param {boolean} result._createResult\n   * @param {?ContractId} result.contractId\n   * @param {?string} result.errorMessage\n   * @param {Uint8Array} result.bloom\n   * @param {Long} result.gasUsed\n   * @param {ContractLogInfo[]} result.logs\n   * @param {ContractId[]} result.createdContractIds\n   * @param {Uint8Array | null} result.evmAddress\n   * @param {Uint8Array} result.bytes\n   * @param {Long} result.gas\n   * @param {Long} result.amount\n   * @param {Uint8Array} result.functionParameters\n   * @param {?AccountId} result.senderAccountId\n   * @param {ContractStateChange[]} result.stateChanges\n   */\n  constructor(result) {\n    /**\n     * Determines if this result came from `record.contractCreateResult` if true\n     * or `record.contractCallResult` if false\n     */\n    this._createResult = result._createResult;\n    /**\n     * The smart contract instance whose function was called.\n     */\n\n    this.contractId = result.contractId;\n    this.bytes = result.bytes;\n    /**\n     * Message In case there was an error during smart contract execution.\n     */\n\n    this.errorMessage = result.errorMessage;\n    /**\n     * Bloom filter for record\n     */\n\n    this.bloom = result.bloom;\n    /**\n     * Units of gas used  to execute contract.\n     */\n\n    this.gasUsed = result.gasUsed;\n    /**\n     * The log info for events returned by the function.\n     */\n\n    this.logs = result.logs;\n    /**\n     * @deprecated the list of smart contracts that were created by the function call.\n     *\n     * The created ids will now _also_ be externalized through internal transaction\n     * records, where each record has its alias field populated with the new contract's\n     * EVM address. (This is needed for contracts created with CREATE2, since\n     * there is no longer a simple relationship between the new contract's 0.0.X id\n     * and its Solidity address.)\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.createdContractIds = result.createdContractIds;\n    this.evmAddress = result.evmAddress;\n    /**\n     * @deprecated - Use mirror node for contract traceability instead\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.stateChanges = result.stateChanges;\n    /**\n     * The amount of gas available for the call, aka the gasLimit.\n     */\n\n    this.gas = result.gas;\n    /**\n     * Number of tinybars sent (the function must be payable if this is nonzero).\n     */\n\n    this.amount = result.amount;\n    /**\n     * The parameters passed into the contract call.\n     */\n\n    this.functionParameters = result.functionParameters;\n    /**\n     * The account that is the \"sender.\" If not present it is the accountId from the transactionId.\n     *\n     * This field should only be populated when the paired TransactionBody in the record stream is not a\n     * ContractCreateTransactionBody or a ContractCallTransactionBody.\n     */\n\n    this.senderAccountId = result.senderAccountId;\n  }\n  /**\n   * @param {HashgraphProto.proto.IContractFunctionResult} result\n   * @param {boolean} _createResult\n   * @returns {ContractFunctionResult}\n   */\n\n\n  static _fromProtobuf(result, _createResult) {\n    const contractId =\n    /** @type {HashgraphProto.proto.IContractID | null} */\n    result.contractID;\n    const gasUsed =\n    /** @type {Long} */\n    result.gasUsed;\n    const gas =\n    /** @type {Long} */\n    result.gas ? result.gas : -1;\n    const amount =\n    /** @type {Long} */\n    result.amount ? result.amount : -1;\n    return new ContractFunctionResult({\n      _createResult,\n      bytes:\n      /** @type {Uint8Array} */\n      result.contractCallResult,\n      contractId: contractId != null ? ContractId._fromProtobuf(contractId) : null,\n      errorMessage: result.errorMessage != null ? result.errorMessage : null,\n      bloom:\n      /** @type {Uint8Array} */\n      result.bloom,\n      gasUsed: gasUsed instanceof Long ? gasUsed : Long.fromValue(gasUsed),\n      logs: (result.logInfo != null ? result.logInfo : []).map(info => ContractLogInfo._fromProtobuf(info)),\n      createdContractIds: (result.createdContractIDs != null ? result.createdContractIDs : []).map(contractId => ContractId._fromProtobuf(contractId)),\n      evmAddress: result.evmAddress != null && result.evmAddress.value != null ? result.evmAddress.value : null,\n      stateChanges: [],\n      gas: gas instanceof Long ? gas : Long.fromValue(gas),\n      amount: amount instanceof Long ? amount : Long.fromValue(amount),\n      functionParameters:\n      /** @type {Uint8Array} */\n      result.functionParameters,\n      senderAccountId: result.senderId != null ? AccountId._fromProtobuf(result.senderId) : null\n    });\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  asBytes() {\n    return this.bytes;\n  }\n  /**\n   * @param {number} [index]\n   * @returns {string}\n   */\n\n\n  getString(index) {\n    return utf8.decode(this.getBytes(index));\n  }\n  /**\n   * @private\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  getBytes(index) {\n    // Len should never be larger than Number.MAX\n    // index * 32 is the position of the lenth\n    // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n    // Arrays in solidity cannot be longer than 1024:\n    // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n    const offset = this.getInt32(index);\n    const len = util.safeView(this.bytes).getInt32(offset + 28);\n    return this.bytes.subarray(offset + 32, offset + 32 + len);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  getBytes32(index) {\n    return this.bytes.subarray((index != null ? index : 0) * 32, (index != null ? index : 0) * 32 + 32);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {boolean}\n   */\n\n\n  getBool(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getInt8(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31];\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getUint8(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31];\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getInt32(index) {\n    // .getInt32() interprets as big-endian\n    // Using DataView instead of Uint32Array because the latter interprets\n    // using platform endianness which is little-endian on x86\n    const position = (index != null ? index : 0) * 32 + 28;\n    return util.safeView(this.bytes).getInt32(position);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getUint32(index) {\n    // .getUint32() interprets as big-endian\n    // Using DataView instead of Uint32Array because the latter interprets\n    // using platform endianness which is little-endian on x86\n    const position = (index != null ? index : 0) * 32 + 28;\n    return util.safeView(this.bytes).getUint32(position);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt40(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(27, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint40(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(27, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt48(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(26, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint48(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(26, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt56(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(25, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint56(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(25, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt64(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(24, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint64(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(24, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt72(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(23, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint72(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(23, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt80(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(22, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint80(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(22, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt88(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(21, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint88(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(21, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt96(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(20, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint96(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(20, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt104(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(19, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint104(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(19, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt112(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(18, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint112(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(18, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt120(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(17, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint120(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(17, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt128(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(16, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint128(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(16, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt136(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(15, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint136(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(15, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt144(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(14, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint144(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(14, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt152(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(13, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint152(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(13, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt160(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(12, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint160(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(12, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt168(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(11, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint168(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(11, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt176(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(10, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint176(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(10, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt184(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(9, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint184(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(9, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt192(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(8, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint192(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(8, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt200(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(7, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint200(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(7, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt208(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(6, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint208(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(6, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt216(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(5, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint216(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(5, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt224(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(4, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint224(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(4, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt232(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(3, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint232(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(3, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt240(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(2, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint240(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(2, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt248(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(1, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint248(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(1, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt256(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint256(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {string}\n   */\n\n\n  getAddress(index) {\n    return hex.encode(this.bytes.subarray((index != null ? index : 0) * 32 + 12, (index != null ? index : 0) * 32 + 32));\n  }\n  /**\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  _getBytes32(index) {\n    return this.bytes.subarray((index != null ? index : 0) * 32, (index != null ? index : 0) * 32 + 32);\n  }\n  /**\n   * @returns {HashgraphProto.proto.IContractFunctionResult}\n   */\n\n\n  _toProtobuf() {\n    return {\n      contractID: this.contractId != null ? this.contractId._toProtobuf() : null,\n      contractCallResult: this.bytes,\n      errorMessage: this.errorMessage,\n      bloom: this.bloom,\n      gasUsed: this.gasUsed,\n      logInfo: this.logs.map(log => log._toProtobuf()),\n      // eslint-disable-next-line deprecation/deprecation\n      createdContractIDs: this.createdContractIds.map(id => id._toProtobuf()),\n      evmAddress: this.evmAddress != null ? {\n        value: this.evmAddress\n      } : null,\n      gas: this.gas,\n      amount: this.amount,\n      functionParameters: this.functionParameters,\n      senderId: this.senderAccountId != null ? this.senderAccountId._toProtobuf() : null\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/contract/ContractFunctionResult.js"],"names":["ContractLogInfo","ContractId","AccountId","BigNumber","hex","utf8","util","Long","ContractFunctionResult","constructor","result","_createResult","contractId","bytes","errorMessage","bloom","gasUsed","logs","createdContractIds","evmAddress","stateChanges","gas","amount","functionParameters","senderAccountId","_fromProtobuf","contractID","contractCallResult","fromValue","logInfo","map","info","createdContractIDs","value","senderId","asBytes","getString","index","decode","getBytes","offset","getInt32","len","safeView","subarray","getBytes32","getBool","getInt8","getUint8","position","getUint32","getInt40","encode","_getBytes32","getUint40","getInt48","getUint48","getInt56","getUint56","getInt64","getUint64","getInt72","getUint72","getInt80","getUint80","getInt88","getUint88","getInt96","getUint96","getInt104","getUint104","getInt112","getUint112","getInt120","getUint120","getInt128","getUint128","getInt136","getUint136","getInt144","getUint144","getInt152","getUint152","getInt160","getUint160","getInt168","getUint168","getInt176","getUint176","getInt184","getUint184","getInt192","getUint192","getInt200","getUint200","getInt208","getUint208","getInt216","getUint216","getInt224","getUint224","getInt232","getUint232","getInt240","getUint240","getInt248","getUint248","getInt256","getUint256","getAddress","_toProtobuf","log","id"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as util from \"../util.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"./ContractStateChange.js\").default} ContractStateChange\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IContractFunctionResult} HashgraphProto.proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HashgraphProto.proto.IContractID\n */\n\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\nexport default class ContractFunctionResult {\n    /**\n     * Constructor isn't part of the stable API\n     *\n     * @param {object} result\n     * @param {boolean} result._createResult\n     * @param {?ContractId} result.contractId\n     * @param {?string} result.errorMessage\n     * @param {Uint8Array} result.bloom\n     * @param {Long} result.gasUsed\n     * @param {ContractLogInfo[]} result.logs\n     * @param {ContractId[]} result.createdContractIds\n     * @param {Uint8Array | null} result.evmAddress\n     * @param {Uint8Array} result.bytes\n     * @param {Long} result.gas\n     * @param {Long} result.amount\n     * @param {Uint8Array} result.functionParameters\n     * @param {?AccountId} result.senderAccountId\n     * @param {ContractStateChange[]} result.stateChanges\n     */\n    constructor(result) {\n        /**\n         * Determines if this result came from `record.contractCreateResult` if true\n         * or `record.contractCallResult` if false\n         */\n        this._createResult = result._createResult;\n\n        /**\n         * The smart contract instance whose function was called.\n         */\n        this.contractId = result.contractId;\n\n        this.bytes = result.bytes;\n\n        /**\n         * Message In case there was an error during smart contract execution.\n         */\n        this.errorMessage = result.errorMessage;\n\n        /**\n         * Bloom filter for record\n         */\n        this.bloom = result.bloom;\n\n        /**\n         * Units of gas used  to execute contract.\n         */\n        this.gasUsed = result.gasUsed;\n\n        /**\n         * The log info for events returned by the function.\n         */\n        this.logs = result.logs;\n\n        /**\n         * @deprecated the list of smart contracts that were created by the function call.\n         *\n         * The created ids will now _also_ be externalized through internal transaction\n         * records, where each record has its alias field populated with the new contract's\n         * EVM address. (This is needed for contracts created with CREATE2, since\n         * there is no longer a simple relationship between the new contract's 0.0.X id\n         * and its Solidity address.)\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.createdContractIds = result.createdContractIds;\n\n        this.evmAddress = result.evmAddress;\n\n        /**\n         * @deprecated - Use mirror node for contract traceability instead\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.stateChanges = result.stateChanges;\n\n        /**\n         * The amount of gas available for the call, aka the gasLimit.\n         */\n        this.gas = result.gas;\n\n        /**\n         * Number of tinybars sent (the function must be payable if this is nonzero).\n         */\n        this.amount = result.amount;\n\n        /**\n         * The parameters passed into the contract call.\n         */\n        this.functionParameters = result.functionParameters;\n\n        /**\n         * The account that is the \"sender.\" If not present it is the accountId from the transactionId.\n         *\n         * This field should only be populated when the paired TransactionBody in the record stream is not a\n         * ContractCreateTransactionBody or a ContractCallTransactionBody.\n         */\n        this.senderAccountId = result.senderAccountId;\n    }\n\n    /**\n     * @param {HashgraphProto.proto.IContractFunctionResult} result\n     * @param {boolean} _createResult\n     * @returns {ContractFunctionResult}\n     */\n    static _fromProtobuf(result, _createResult) {\n        const contractId =\n            /** @type {HashgraphProto.proto.IContractID | null} */ (\n                result.contractID\n            );\n        const gasUsed = /** @type {Long} */ (result.gasUsed);\n        const gas = /** @type {Long} */ (result.gas ? result.gas : -1);\n        const amount = /** @type {Long} */ (result.amount ? result.amount : -1);\n\n        return new ContractFunctionResult({\n            _createResult,\n            bytes: /** @type {Uint8Array} */ (result.contractCallResult),\n            contractId:\n                contractId != null\n                    ? ContractId._fromProtobuf(contractId)\n                    : null,\n            errorMessage:\n                result.errorMessage != null ? result.errorMessage : null,\n            bloom: /** @type {Uint8Array} */ (result.bloom),\n            gasUsed:\n                gasUsed instanceof Long ? gasUsed : Long.fromValue(gasUsed),\n            logs: (result.logInfo != null ? result.logInfo : []).map((info) =>\n                ContractLogInfo._fromProtobuf(info)\n            ),\n            createdContractIds: (result.createdContractIDs != null\n                ? result.createdContractIDs\n                : []\n            ).map((contractId) => ContractId._fromProtobuf(contractId)),\n            evmAddress:\n                result.evmAddress != null && result.evmAddress.value != null\n                    ? result.evmAddress.value\n                    : null,\n            stateChanges: [],\n            gas: gas instanceof Long ? gas : Long.fromValue(gas),\n            amount: amount instanceof Long ? amount : Long.fromValue(amount),\n            functionParameters: /** @type {Uint8Array} */ (\n                result.functionParameters\n            ),\n            senderAccountId:\n                result.senderId != null\n                    ? AccountId._fromProtobuf(result.senderId)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    asBytes() {\n        return this.bytes;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getString(index) {\n        return utf8.decode(this.getBytes(index));\n    }\n\n    /**\n     * @private\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes(index) {\n        // Len should never be larger than Number.MAX\n        // index * 32 is the position of the lenth\n        // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n        // Arrays in solidity cannot be longer than 1024:\n        // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n        const offset = this.getInt32(index);\n        const len = util.safeView(this.bytes).getInt32(offset + 28);\n\n        return this.bytes.subarray(offset + 32, offset + 32 + len);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {boolean}\n     */\n    getBool(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt32(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getInt32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint32(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getUint32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt40(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(27, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint40(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(27, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt48(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(26, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint48(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(26, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt56(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(25, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint56(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(25, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt64(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(24, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint64(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(24, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt72(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(23, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint72(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(23, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt80(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(22, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint80(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(22, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt88(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(21, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint88(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(21, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt96(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(20, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint96(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(20, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt104(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(19, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint104(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(19, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt112(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(18, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint112(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(18, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt120(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(17, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint120(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(17, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt128(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(16, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint128(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(16, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt136(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(15, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint136(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(15, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt144(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(14, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint144(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(14, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt152(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(13, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint152(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(13, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt160(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(12, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint160(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(12, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt168(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(11, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint168(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(11, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt176(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(10, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint176(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(10, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt184(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(9, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint184(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(9, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt192(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(8, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint192(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(8, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt200(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(7, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint200(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(7, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt208(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(6, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint208(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(6, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt216(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(5, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint216(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(5, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt224(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(4, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint224(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(4, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt232(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(3, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint232(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(3, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt240(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(2, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint240(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(2, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt248(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(1, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint248(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(1, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt256(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index != null ? index : 0)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint256(index) {\n        return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getAddress(index) {\n        return hex.encode(\n            this.bytes.subarray(\n                (index != null ? index : 0) * 32 + 12,\n                (index != null ? index : 0) * 32 + 32\n            )\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    _getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.IContractFunctionResult}\n     */\n    _toProtobuf() {\n        return {\n            contractID:\n                this.contractId != null ? this.contractId._toProtobuf() : null,\n            contractCallResult: this.bytes,\n            errorMessage: this.errorMessage,\n            bloom: this.bloom,\n            gasUsed: this.gasUsed,\n            logInfo: this.logs.map((log) => log._toProtobuf()),\n            // eslint-disable-next-line deprecation/deprecation\n            createdContractIDs: this.createdContractIds.map((id) =>\n                id._toProtobuf()\n            ),\n            evmAddress:\n                this.evmAddress != null\n                    ? {\n                          value: this.evmAddress,\n                      }\n                    : null,\n            gas: this.gas,\n            amount: this.amount,\n            functionParameters: this.functionParameters,\n            senderId:\n                this.senderAccountId != null\n                    ? this.senderAccountId._toProtobuf()\n                    : null,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}