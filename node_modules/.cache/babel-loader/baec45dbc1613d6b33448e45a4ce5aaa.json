{"ast":null,"code":"/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\n(function (global) {\n  \"use strict\"; // Top level module for the global, static logger instance.\n\n  var Logger = {}; // For those that are at home that are keeping score.\n\n  Logger.VERSION = \"1.6.1\"; // Function which handles all incoming log messages.\n\n  var logHandler; // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\n\n  var contextualLoggersByNameMap = {}; // Polyfill for ES5's Function.bind.\n\n  var bind = function (scope, func) {\n    return function () {\n      return func.apply(scope, arguments);\n    };\n  }; // Super exciting object merger-matron 9000 adding another 100 bytes to your download.\n\n\n  var merge = function () {\n    var args = arguments,\n        target = args[0],\n        key,\n        i;\n\n    for (i = 1; i < args.length; i++) {\n      for (key in args[i]) {\n        if (!(key in target) && args[i].hasOwnProperty(key)) {\n          target[key] = args[i][key];\n        }\n      }\n    }\n\n    return target;\n  }; // Helper to define a logging level object; helps with optimisation.\n\n\n  var defineLogLevel = function (value, name) {\n    return {\n      value: value,\n      name: name\n    };\n  }; // Predefined logging levels.\n\n\n  Logger.TRACE = defineLogLevel(1, 'TRACE');\n  Logger.DEBUG = defineLogLevel(2, 'DEBUG');\n  Logger.INFO = defineLogLevel(3, 'INFO');\n  Logger.TIME = defineLogLevel(4, 'TIME');\n  Logger.WARN = defineLogLevel(5, 'WARN');\n  Logger.ERROR = defineLogLevel(8, 'ERROR');\n  Logger.OFF = defineLogLevel(99, 'OFF'); // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\n  // of each other.\n\n  var ContextualLogger = function (defaultContext) {\n    this.context = defaultContext;\n    this.setLevel(defaultContext.filterLevel);\n    this.log = this.info; // Convenience alias.\n  };\n\n  ContextualLogger.prototype = {\n    // Changes the current logging level for the logging instance.\n    setLevel: function (newLevel) {\n      // Ensure the supplied Level object looks valid.\n      if (newLevel && \"value\" in newLevel) {\n        this.context.filterLevel = newLevel;\n      }\n    },\n    // Gets the current logging level for the logging instance\n    getLevel: function () {\n      return this.context.filterLevel;\n    },\n    // Is the logger configured to output messages at the supplied level?\n    enabledFor: function (lvl) {\n      var filterLevel = this.context.filterLevel;\n      return lvl.value >= filterLevel.value;\n    },\n    trace: function () {\n      this.invoke(Logger.TRACE, arguments);\n    },\n    debug: function () {\n      this.invoke(Logger.DEBUG, arguments);\n    },\n    info: function () {\n      this.invoke(Logger.INFO, arguments);\n    },\n    warn: function () {\n      this.invoke(Logger.WARN, arguments);\n    },\n    error: function () {\n      this.invoke(Logger.ERROR, arguments);\n    },\n    time: function (label) {\n      if (typeof label === 'string' && label.length > 0) {\n        this.invoke(Logger.TIME, [label, 'start']);\n      }\n    },\n    timeEnd: function (label) {\n      if (typeof label === 'string' && label.length > 0) {\n        this.invoke(Logger.TIME, [label, 'end']);\n      }\n    },\n    // Invokes the logger callback if it's not being filtered.\n    invoke: function (level, msgArgs) {\n      if (logHandler && this.enabledFor(level)) {\n        logHandler(msgArgs, merge({\n          level: level\n        }, this.context));\n      }\n    }\n  }; // Protected instance which all calls to the to level `Logger` module will be routed through.\n\n  var globalLogger = new ContextualLogger({\n    filterLevel: Logger.OFF\n  }); // Configure the global Logger instance.\n\n  (function () {\n    // Shortcut for optimisers.\n    var L = Logger;\n    L.enabledFor = bind(globalLogger, globalLogger.enabledFor);\n    L.trace = bind(globalLogger, globalLogger.trace);\n    L.debug = bind(globalLogger, globalLogger.debug);\n    L.time = bind(globalLogger, globalLogger.time);\n    L.timeEnd = bind(globalLogger, globalLogger.timeEnd);\n    L.info = bind(globalLogger, globalLogger.info);\n    L.warn = bind(globalLogger, globalLogger.warn);\n    L.error = bind(globalLogger, globalLogger.error); // Don't forget the convenience alias!\n\n    L.log = L.info;\n  })(); // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\n  // object with the supplied log messages and the second being a context object which contains a hash of stateful\n  // parameters which the logging function can consume.\n\n\n  Logger.setHandler = function (func) {\n    logHandler = func;\n  }; // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\n  // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\n\n\n  Logger.setLevel = function (level) {\n    // Set the globalLogger's level.\n    globalLogger.setLevel(level); // Apply this level to all registered contextual loggers.\n\n    for (var key in contextualLoggersByNameMap) {\n      if (contextualLoggersByNameMap.hasOwnProperty(key)) {\n        contextualLoggersByNameMap[key].setLevel(level);\n      }\n    }\n  }; // Gets the global logging filter level\n\n\n  Logger.getLevel = function () {\n    return globalLogger.getLevel();\n  }; // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\n  // default context and log handler.\n\n\n  Logger.get = function (name) {\n    // All logger instances are cached so they can be configured ahead of use.\n    return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({\n      name: name\n    }, globalLogger.context)));\n  }; // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\n  // write to the window's console object (if present); the optional options object can be used to customise the\n  // formatter used to format each log message.\n\n\n  Logger.createDefaultHandler = function (options) {\n    options = options || {};\n\n    options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\n      // Prepend the logger's name to the log message for easy identification.\n      if (context.name) {\n        messages.unshift(\"[\" + context.name + \"]\");\n      }\n    }; // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\n    // that don't offer a native console method.\n\n\n    var timerStartTimeByLabelMap = {}; // Support for IE8+ (and other, slightly more sane environments)\n\n    var invokeConsoleMethod = function (hdlr, messages) {\n      Function.prototype.apply.call(hdlr, console, messages);\n    }; // Check for the presence of a logger.\n\n\n    if (typeof console === \"undefined\") {\n      return function () {\n        /* no console */\n      };\n    }\n\n    return function (messages, context) {\n      // Convert arguments object to Array.\n      messages = Array.prototype.slice.call(messages);\n      var hdlr = console.log;\n      var timerLabel;\n\n      if (context.level === Logger.TIME) {\n        timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\n\n        if (messages[1] === 'start') {\n          if (console.time) {\n            console.time(timerLabel);\n          } else {\n            timerStartTimeByLabelMap[timerLabel] = new Date().getTime();\n          }\n        } else {\n          if (console.timeEnd) {\n            console.timeEnd(timerLabel);\n          } else {\n            invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);\n          }\n        }\n      } else {\n        // Delegate through to custom warn/error loggers if present on the console.\n        if (context.level === Logger.WARN && console.warn) {\n          hdlr = console.warn;\n        } else if (context.level === Logger.ERROR && console.error) {\n          hdlr = console.error;\n        } else if (context.level === Logger.INFO && console.info) {\n          hdlr = console.info;\n        } else if (context.level === Logger.DEBUG && console.debug) {\n          hdlr = console.debug;\n        } else if (context.level === Logger.TRACE && console.trace) {\n          hdlr = console.trace;\n        }\n\n        options.formatter(messages, context);\n        invokeConsoleMethod(hdlr, messages);\n      }\n    };\n  }; // Configure and example a Default implementation which writes to the `window.console` (if present).  The\n  // `options` hash can be used to configure the default logLevel and provide a custom message formatter.\n\n\n  Logger.useDefaults = function (options) {\n    Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);\n    Logger.setHandler(Logger.createDefaultHandler(options));\n  }; // Createa an alias to useDefaults to avoid reaking a react-hooks rule.\n\n\n  Logger.setDefaults = Logger.useDefaults; // Export to popular environments boilerplate.\n\n  if (typeof define === 'function' && define.amd) {\n    define(Logger);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Logger;\n  } else {\n    Logger._prevLogger = global.Logger;\n\n    Logger.noConflict = function () {\n      global.Logger = Logger._prevLogger;\n      return Logger;\n    };\n\n    global.Logger = Logger;\n  }\n})(this);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/js-logger/src/logger.js"],"names":["global","Logger","VERSION","logHandler","contextualLoggersByNameMap","bind","scope","func","apply","arguments","merge","args","target","key","i","length","hasOwnProperty","defineLogLevel","value","name","TRACE","DEBUG","INFO","TIME","WARN","ERROR","OFF","ContextualLogger","defaultContext","context","setLevel","filterLevel","log","info","prototype","newLevel","getLevel","enabledFor","lvl","trace","invoke","debug","warn","error","time","label","timeEnd","level","msgArgs","globalLogger","L","setHandler","get","createDefaultHandler","options","formatter","defaultMessageFormatter","messages","unshift","timerStartTimeByLabelMap","invokeConsoleMethod","hdlr","Function","call","console","Array","slice","timerLabel","Date","getTime","useDefaults","defaultLevel","setDefaults","define","amd","module","exports","_prevLogger","noConflict"],"mappings":"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","sourcesContent":["/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.6.1\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Createa an alias to useDefaults to avoid reaking a react-hooks rule.\r\n\tLogger.setDefaults = Logger.useDefaults;\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n"]},"metadata":{},"sourceType":"script"}