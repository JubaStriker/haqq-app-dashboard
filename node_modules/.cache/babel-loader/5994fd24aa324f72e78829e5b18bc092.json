{"ast":null,"code":"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nconst INITIAL_TRANSACTION_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst useTransactionStore = create(set => ({\n  transactionState: INITIAL_TRANSACTION_STATE,\n  getTransactionState: async shop => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.transactionState,\n        get: { ...INITIAL_TRANSACTION_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      console.log('Shop Address');\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      const walletAddress = data.walletAddress;\n      const url = `${process.env.REACT_APP_HEDERA_ACCOUNT_VERIFY}/api/v1/transactions?account.id=${walletAddress}`;\n      const result = await fetch(url);\n      const response = await result.json(); // console.log(response);\n\n      set(produce(state => ({ ...state,\n        transactionState: { ...state.transactionState,\n          get: { ...INITIAL_TRANSACTION_STATE.get,\n            success: {\n              ok: true,\n              data: response\n            }\n          }\n        }\n      })));\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  }\n}));\nexport default useTransactionStore;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/transaction/index.js"],"names":["create","axios","produce","INTERNAL_SERVER_ERROR","INITIAL_TRANSACTION_STATE","get","loading","success","ok","data","failure","error","message","post","useTransactionStore","set","transactionState","getTransactionState","shop","state","walletState","console","log","process","env","REACT_APP_API_SHOPLOOKS_SERVER_URL","walletAddress","url","REACT_APP_HEDERA_ACCOUNT_VERIFY","result","fetch","response","json","e"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,MAAMC,yBAAyB,GAAG;AAChCC,EAAAA,GAAG,EAAE;AACHC,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,KADG;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAFN;AAMHC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,OAAO,EAAE;AAFF;AANN,GAD2B;AAYhCC,EAAAA,IAAI,EAAE;AACJP,IAAAA,OAAO,EAAE,KADL;AAEJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,KADG;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAFL;AAMJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,OAAO,EAAE;AAFF;AANL;AAZ0B,CAAlC;AAyBA,MAAME,mBAAmB,GAAGd,MAAM,CAAEe,GAAD,KAAU;AAC3CC,EAAAA,gBAAgB,EAAEZ,yBADyB;AAE3Ca,EAAAA,mBAAmB,EAAE,MAAOC,IAAP,IAAgB;AACnCH,IAAAA,GAAG,CACDb,OAAO,CAAEiB,KAAD,KAAY,EAClB,GAAGA,KADe;AAElBC,MAAAA,WAAW,EAAE,EACX,GAAGD,KAAK,CAACH,gBADE;AAEXX,QAAAA,GAAG,EAAE,EACH,GAAGD,yBAAyB,CAACC,GAD1B;AAEHC,UAAAA,OAAO,EAAE;AAFN;AAFM;AAFK,KAAZ,CAAD,CADN,CAAH;;AAaA,QAAI;AACFe,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,YAAM;AAACb,QAAAA;AAAD,UAAS,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEkB,OAAO,CAACC,GAAR,CAAYC,kCAAmC,sBAAqBP,IAAK,EAAtF,CAArB;AACA,YAAMQ,aAAa,GAAGjB,IAAI,CAACiB,aAA3B;AAEA,YAAMC,GAAG,GAAI,GAAEJ,OAAO,CAACC,GAAR,CAAYI,+BAAgC,mCAAkCF,aAAc,EAA3G;AACA,YAAMG,MAAM,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA1B;AACA,YAAMI,QAAQ,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAvB,CAPE,CAQF;;AAEAjB,MAAAA,GAAG,CACDb,OAAO,CAAEiB,KAAD,KAAY,EAClB,GAAGA,KADe;AAElBH,QAAAA,gBAAgB,EAAE,EAChB,GAAGG,KAAK,CAACH,gBADO;AAEhBX,UAAAA,GAAG,EAAE,EACH,GAAGD,yBAAyB,CAACC,GAD1B;AAEHE,YAAAA,OAAO,EAAE;AACPC,cAAAA,EAAE,EAAE,IADG;AAEPC,cAAAA,IAAI,EAAEsB;AAFC;AAFN;AAFW;AAFA,OAAZ,CAAD,CADN,CAAH;AAeA,aAAOA,QAAP;AACD,KA1BD,CA0BE,OAAOE,CAAP,EAAU;AACV,YAAMA,CAAN;AACD;AACF;AA7C0C,CAAV,CAAD,CAAlC;AAgDA,eAAenB,mBAAf","sourcesContent":["import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_TRANSACTION_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useTransactionStore = create((set) => ({\n  transactionState: INITIAL_TRANSACTION_STATE,\n  getTransactionState: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.transactionState,\n          get: {\n            ...INITIAL_TRANSACTION_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      console.log('Shop Address');\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      const walletAddress = data.walletAddress;\n\n      const url = `${process.env.REACT_APP_HEDERA_ACCOUNT_VERIFY}/api/v1/transactions?account.id=${walletAddress}`\n      const result = await fetch(url)\n      const response = await result.json();\n      // console.log(response);\n\n      set(\n        produce((state) => ({\n          ...state,\n          transactionState: {\n            ...state.transactionState,\n            get: {\n              ...INITIAL_TRANSACTION_STATE.get,\n              success: {\n                ok: true,\n                data: response,\n              },\n            },\n          },\n        }))\n      );\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  },\n}));\n\nexport default useTransactionStore;\n"]},"metadata":{},"sourceType":"module"}