{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Hbar from \"./Hbar.js\";\nimport EthereumTransaction from \"./EthereumTransaction.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport FileCreateTransaction from \"./file/FileCreateTransaction.js\";\nimport FileAppendTransaction from \"./file/FileAppendTransaction.js\";\nimport * as hex from \"./encoding/hex.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./file/FileId.js\").default} FileId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./Timestamp.js\").default} Timestamp\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * Create a new Hedera™ transaction wrapped ethereum transaction.\n */\n\nexport default class EthereumFlow {\n  /**\n   * @param {object} [props]\n   * @param {Uint8Array} [props.ethereumData]\n   * @param {FileId} [props.callData]\n   * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @private\n     * @type {?EthereumTransactionData}\n     */\n    this._ethereumData = null;\n    /**\n     * @private\n     * @type {?FileId}\n     */\n\n    this._callDataFileId = null;\n    /**\n     * @private\n     * @type {?Hbar}\n     */\n\n    this._maxGasAllowance = null;\n\n    if (props.ethereumData != null) {\n      this.setEthereumData(props.ethereumData);\n    }\n\n    if (props.maxGasAllowance != null) {\n      this.setMaxGasAllowanceHbar(props.maxGasAllowance);\n    }\n  }\n  /**\n   * @returns {?EthereumTransactionData}\n   */\n\n\n  get ethereumData() {\n    return this._ethereumData;\n  }\n  /**\n   * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete\n   * unless the callData field is set.\n   *\n   * @param {EthereumTransactionData | Uint8Array} ethereumData\n   * @returns {this}\n   */\n\n\n  setEthereumData(ethereumData) {\n    this._ethereumData = ethereumData instanceof Uint8Array ? EthereumTransactionData.fromBytes(ethereumData) : ethereumData;\n    return this;\n  }\n  /**\n   * @returns {?Hbar}\n   */\n\n\n  get maxGasAllowance() {\n    return this._maxGasAllowance;\n  }\n  /**\n   * @deprecated - use masGasAllowanceHbar instead.\n   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n   * @returns {this}\n   */\n\n\n  setMaxGasAllowance(maxGasAllowance) {\n    return this.setMaxGasAllowanceHbar(maxGasAllowance);\n  }\n  /**\n   * The maximum amount, in tinybars, that the payer of the hedera transaction\n   * is willing to pay to complete the transaction.\n   *\n   * Ordinarily the account with the ECDSA alias corresponding to the public\n   * key that is extracted from the ethereum_data signature is responsible for\n   * fees that result from the execution of the transaction. If that amount of\n   * authorized fees is not sufficient then the payer of the transaction can be\n   * charged, up to but not exceeding this amount. If the ethereum_data\n   * transaction authorized an amount that was insufficient then the payer will\n   * only be charged the amount needed to make up the difference. If the gas\n   * price in the transaction was set to zero then the payer will be assessed\n   * the entire fee.\n   *\n   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n   * @returns {this}\n   */\n\n\n  setMaxGasAllowanceHbar(maxGasAllowance) {\n    this._maxGasAllowance = maxGasAllowance instanceof Hbar ? maxGasAllowance : new Hbar(maxGasAllowance);\n    return this;\n  }\n  /**\n   * @template {Channel} ChannelT\n   * @template MirrorChannelT\n   * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n   * @returns {Promise<TransactionResponse>}\n   */\n\n\n  async execute(client) {\n    if (this._ethereumData == null) {\n      throw new Error(\"cannot submit ethereum transaction with no ethereum data\");\n    }\n\n    const ethereumTransaction = new EthereumTransaction();\n\n    const ethereumTransactionDataBytes = this._ethereumData.toBytes();\n\n    if (this._maxGasAllowance != null) {\n      ethereumTransaction.setMaxGasAllowanceHbar(this._maxGasAllowance);\n    }\n\n    if (this._callDataFileId != null) {\n      if (this._ethereumData.callData.length === 0) {\n        throw new Error(\"call data file ID provided, but ethereum data already contains call data\");\n      }\n\n      ethereumTransaction.setEthereumData(this._ethereumData.toBytes()).setCallDataFileId(this._callDataFileId);\n    } else if (ethereumTransactionDataBytes.length <= 5120) {\n      ethereumTransaction.setEthereumData(ethereumTransactionDataBytes);\n    } else {\n      const fileId = await createFile(this._ethereumData.callData, client);\n      this._ethereumData.callData = new Uint8Array();\n      ethereumTransaction.setEthereumData(this._ethereumData.toBytes()).setCallDataFileId(fileId);\n    }\n\n    return ethereumTransaction.execute(client);\n  }\n\n}\n/**\n * @template {Channel} ChannelT\n * @template MirrorChannelT\n * @param {Uint8Array} callData\n * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n * @returns {Promise<FileId>}\n */\n\nasync function createFile(callData, client) {\n  const hexedCallData = hex.encode(callData);\n  const fileId =\n  /** @type {FileId} */\n  (await (await new FileCreateTransaction().setContents(hexedCallData.substring(0, 4096)).setKeys(client.operatorPublicKey ? [client.operatorPublicKey] : []).execute(client)).getReceipt(client)).fileId;\n\n  if (callData.length > 4096) {\n    await (await new FileAppendTransaction().setFileId(fileId).setContents(hexedCallData.substring(4096, hexedCallData.length)).setChunkSize(4096).execute(client)).getReceipt(client);\n  }\n\n  return fileId;\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/EthereumFlow.js"],"names":["Hbar","EthereumTransaction","EthereumTransactionData","FileCreateTransaction","FileAppendTransaction","hex","EthereumFlow","constructor","props","_ethereumData","_callDataFileId","_maxGasAllowance","ethereumData","setEthereumData","maxGasAllowance","setMaxGasAllowanceHbar","Uint8Array","fromBytes","setMaxGasAllowance","execute","client","Error","ethereumTransaction","ethereumTransactionDataBytes","toBytes","callData","length","setCallDataFileId","fileId","createFile","hexedCallData","encode","setContents","substring","setKeys","operatorPublicKey","getReceipt","setFileId","setChunkSize"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Hbar from \"./Hbar.js\";\nimport EthereumTransaction from \"./EthereumTransaction.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport FileCreateTransaction from \"./file/FileCreateTransaction.js\";\nimport FileAppendTransaction from \"./file/FileAppendTransaction.js\";\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./file/FileId.js\").default} FileId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./Timestamp.js\").default} Timestamp\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * Create a new Hedera™ transaction wrapped ethereum transaction.\n */\nexport default class EthereumFlow {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.ethereumData]\n     * @param {FileId} [props.callData]\n     * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]\n     */\n    constructor(props = {}) {\n        /**\n         * @private\n         * @type {?EthereumTransactionData}\n         */\n        this._ethereumData = null;\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._callDataFileId = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._maxGasAllowance = null;\n\n        if (props.ethereumData != null) {\n            this.setEthereumData(props.ethereumData);\n        }\n\n        if (props.maxGasAllowance != null) {\n            this.setMaxGasAllowanceHbar(props.maxGasAllowance);\n        }\n    }\n\n    /**\n     * @returns {?EthereumTransactionData}\n     */\n    get ethereumData() {\n        return this._ethereumData;\n    }\n\n    /**\n     * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete\n     * unless the callData field is set.\n     *\n     * @param {EthereumTransactionData | Uint8Array} ethereumData\n     * @returns {this}\n     */\n    setEthereumData(ethereumData) {\n        this._ethereumData =\n            ethereumData instanceof Uint8Array\n                ? EthereumTransactionData.fromBytes(ethereumData)\n                : ethereumData;\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get maxGasAllowance() {\n        return this._maxGasAllowance;\n    }\n\n    /**\n     * @deprecated - use masGasAllowanceHbar instead.\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowance(maxGasAllowance) {\n        return this.setMaxGasAllowanceHbar(maxGasAllowance);\n    }\n\n    /**\n     * The maximum amount, in tinybars, that the payer of the hedera transaction\n     * is willing to pay to complete the transaction.\n     *\n     * Ordinarily the account with the ECDSA alias corresponding to the public\n     * key that is extracted from the ethereum_data signature is responsible for\n     * fees that result from the execution of the transaction. If that amount of\n     * authorized fees is not sufficient then the payer of the transaction can be\n     * charged, up to but not exceeding this amount. If the ethereum_data\n     * transaction authorized an amount that was insufficient then the payer will\n     * only be charged the amount needed to make up the difference. If the gas\n     * price in the transaction was set to zero then the payer will be assessed\n     * the entire fee.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowanceHbar(maxGasAllowance) {\n        this._maxGasAllowance =\n            maxGasAllowance instanceof Hbar\n                ? maxGasAllowance\n                : new Hbar(maxGasAllowance);\n        return this;\n    }\n\n    /**\n     * @template {Channel} ChannelT\n     * @template MirrorChannelT\n     * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client) {\n        if (this._ethereumData == null) {\n            throw new Error(\n                \"cannot submit ethereum transaction with no ethereum data\"\n            );\n        }\n\n        const ethereumTransaction = new EthereumTransaction();\n        const ethereumTransactionDataBytes = this._ethereumData.toBytes();\n\n        if (this._maxGasAllowance != null) {\n            ethereumTransaction.setMaxGasAllowanceHbar(this._maxGasAllowance);\n        }\n\n        if (this._callDataFileId != null) {\n            if (this._ethereumData.callData.length === 0) {\n                throw new Error(\n                    \"call data file ID provided, but ethereum data already contains call data\"\n                );\n            }\n\n            ethereumTransaction\n                .setEthereumData(this._ethereumData.toBytes())\n                .setCallDataFileId(this._callDataFileId);\n        } else if (ethereumTransactionDataBytes.length <= 5120) {\n            ethereumTransaction.setEthereumData(ethereumTransactionDataBytes);\n        } else {\n            const fileId = await createFile(\n                this._ethereumData.callData,\n                client\n            );\n\n            this._ethereumData.callData = new Uint8Array();\n\n            ethereumTransaction\n                .setEthereumData(this._ethereumData.toBytes())\n                .setCallDataFileId(fileId);\n        }\n\n        return ethereumTransaction.execute(client);\n    }\n}\n\n/**\n * @template {Channel} ChannelT\n * @template MirrorChannelT\n * @param {Uint8Array} callData\n * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n * @returns {Promise<FileId>}\n */\nasync function createFile(callData, client) {\n    const hexedCallData = hex.encode(callData);\n\n    const fileId = /** @type {FileId} */ (\n        (\n            await (\n                await new FileCreateTransaction()\n                    .setContents(hexedCallData.substring(0, 4096))\n                    .setKeys(\n                        client.operatorPublicKey\n                            ? [client.operatorPublicKey]\n                            : []\n                    )\n                    .execute(client)\n            ).getReceipt(client)\n        ).fileId\n    );\n\n    if (callData.length > 4096) {\n        await (\n            await new FileAppendTransaction()\n                .setFileId(fileId)\n                .setContents(\n                    hexedCallData.substring(4096, hexedCallData.length)\n                )\n                .setChunkSize(4096)\n                .execute(client)\n        ).getReceipt(client);\n    }\n\n    return fileId;\n}\n"]},"metadata":{},"sourceType":"module"}