{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport * as entity_id from \"../EntityIdHelper.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport Long from \"long\";\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency file on Hedera.\n */\n\nexport default class FileId {\n  /**\n   * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n   * @param {(number | Long)=} realm\n   * @param {(number | Long)=} num\n   */\n  constructor(props, realm, num) {\n    const result = entity_id.constructor(props, realm, num);\n    this.shard = result.shard;\n    this.realm = result.realm;\n    this.num = result.num;\n    /**\n     * @type {string | null}\n     */\n\n    this._checksum = null;\n  }\n  /**\n   * @param {string} text\n   * @returns {FileId}\n   */\n\n\n  static fromString(text) {\n    const result = entity_id.fromString(text);\n    const id = new FileId(result);\n    id._checksum = result.checksum;\n    return id;\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IFileID} id\n   * @returns {FileId}\n   */\n\n\n  static _fromProtobuf(id) {\n    const fileId = new FileId(id.shardNum != null ? Long.fromString(id.shardNum.toString()) : 0, id.realmNum != null ? Long.fromString(id.realmNum.toString()) : 0, id.fileNum != null ? Long.fromString(id.fileNum.toString()) : 0);\n    return fileId;\n  }\n  /**\n   * @returns {string | null}\n   */\n\n\n  get checksum() {\n    return this._checksum;\n  }\n  /**\n   * @deprecated - Use `validateChecksum` instead\n   * @param {Client} client\n   */\n\n\n  validate(client) {\n    console.warn(\"Deprecated: Use `validateChecksum` instead\");\n    this.validateChecksum(client);\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  validateChecksum(client) {\n    entity_id.validateChecksum(this.shard, this.realm, this.num, this._checksum, client);\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {FileId}\n   */\n\n\n  static fromBytes(bytes) {\n    return FileId._fromProtobuf(HashgraphProto.proto.FileID.decode(bytes));\n  }\n  /**\n   * @param {string} address\n   * @returns {FileId}\n   */\n\n\n  static fromSolidityAddress(address) {\n    const [shard, realm, file] = entity_id.fromSolidityAddress(address);\n    return new FileId(shard, realm, file);\n  }\n  /**\n   * @returns {string} solidity address\n   */\n\n\n  toSolidityAddress() {\n    return entity_id.toSolidityAddress([this.shard, this.realm, this.num]);\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.IFileID}\n   */\n\n\n  _toProtobuf() {\n    return {\n      fileNum: this.num,\n      shardNum: this.shard,\n      realmNum: this.realm\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n  }\n  /**\n   * @param {Client} client\n   * @returns {string}\n   */\n\n\n  toStringWithChecksum(client) {\n    return entity_id.toStringWithChecksum(this.toString(), client);\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.FileID.encode(this._toProtobuf()).finish();\n  }\n  /**\n   * @returns {FileId}\n   */\n\n\n  clone() {\n    const id = new FileId(this);\n    id._checksum = this._checksum;\n    return id;\n  }\n  /**\n   * @param {FileId} other\n   * @returns {number}\n   */\n\n\n  compare(other) {\n    return entity_id.compare([this.shard, this.realm, this.num], [other.shard, other.realm, other.num]);\n  }\n\n}\n/**\n * The public node address book for the current network.\n */\n\nFileId.ADDRESS_BOOK = new FileId(102);\n/**\n * The current fee schedule for the network.\n */\n\nFileId.FEE_SCHEDULE = new FileId(111);\n/**\n * The current exchange rate of HBAR to USD.\n */\n\nFileId.EXCHANGE_RATES = new FileId(112);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/file/FileId.js"],"names":["entity_id","HashgraphProto","Long","FileId","constructor","props","realm","num","result","shard","_checksum","fromString","text","id","checksum","_fromProtobuf","fileId","shardNum","toString","realmNum","fileNum","validate","client","console","warn","validateChecksum","fromBytes","bytes","proto","FileID","decode","fromSolidityAddress","address","file","toSolidityAddress","_toProtobuf","toStringWithChecksum","toBytes","encode","finish","clone","compare","other","ADDRESS_BOOK","FEE_SCHEDULE","EXCHANGE_RATES"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,SAAZ,MAA2B,sBAA3B;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,MAAN,CAAa;AACxB;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoB;AAC3B,UAAMC,MAAM,GAAGR,SAAS,CAACI,WAAV,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,GAApC,CAAf;AAEA,SAAKE,KAAL,GAAaD,MAAM,CAACC,KAApB;AACA,SAAKH,KAAL,GAAaE,MAAM,CAACF,KAApB;AACA,SAAKC,GAAL,GAAWC,MAAM,CAACD,GAAlB;AAEA;AACR;AACA;;AACQ,SAAKG,SAAL,GAAiB,IAAjB;AACH;AAED;AACJ;AACA;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,UAAMJ,MAAM,GAAGR,SAAS,CAACW,UAAV,CAAqBC,IAArB,CAAf;AACA,UAAMC,EAAE,GAAG,IAAIV,MAAJ,CAAWK,MAAX,CAAX;AACAK,IAAAA,EAAE,CAACH,SAAH,GAAeF,MAAM,CAACM,QAAtB;AACA,WAAOD,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbE,aAAa,CAACF,EAAD,EAAK;AACrB,UAAMG,MAAM,GAAG,IAAIb,MAAJ,CACXU,EAAE,CAACI,QAAH,IAAe,IAAf,GAAsBf,IAAI,CAACS,UAAL,CAAgBE,EAAE,CAACI,QAAH,CAAYC,QAAZ,EAAhB,CAAtB,GAAgE,CADrD,EAEXL,EAAE,CAACM,QAAH,IAAe,IAAf,GAAsBjB,IAAI,CAACS,UAAL,CAAgBE,EAAE,CAACM,QAAH,CAAYD,QAAZ,EAAhB,CAAtB,GAAgE,CAFrD,EAGXL,EAAE,CAACO,OAAH,IAAc,IAAd,GAAqBlB,IAAI,CAACS,UAAL,CAAgBE,EAAE,CAACO,OAAH,CAAWF,QAAX,EAAhB,CAArB,GAA8D,CAHnD,CAAf;AAMA,WAAOF,MAAP;AACH;AAED;AACJ;AACA;;;AACgB,MAARF,QAAQ,GAAG;AACX,WAAO,KAAKJ,SAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIW,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACbC,IAAAA,OAAO,CAACC,IAAR,CAAa,4CAAb;AACA,SAAKC,gBAAL,CAAsBH,MAAtB;AACH;AAED;AACJ;AACA;;;AACIG,EAAAA,gBAAgB,CAACH,MAAD,EAAS;AACrBtB,IAAAA,SAAS,CAACyB,gBAAV,CACI,KAAKhB,KADT,EAEI,KAAKH,KAFT,EAGI,KAAKC,GAHT,EAII,KAAKG,SAJT,EAKIY,MALJ;AAOH;AAED;AACJ;AACA;AACA;;;AACoB,SAATI,SAAS,CAACC,KAAD,EAAQ;AACpB,WAAOxB,MAAM,CAACY,aAAP,CAAqBd,cAAc,CAAC2B,KAAf,CAAqBC,MAArB,CAA4BC,MAA5B,CAAmCH,KAAnC,CAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AAC8B,SAAnBI,mBAAmB,CAACC,OAAD,EAAU;AAChC,UAAM,CAACvB,KAAD,EAAQH,KAAR,EAAe2B,IAAf,IAAuBjC,SAAS,CAAC+B,mBAAV,CAA8BC,OAA9B,CAA7B;AACA,WAAO,IAAI7B,MAAJ,CAAWM,KAAX,EAAkBH,KAAlB,EAAyB2B,IAAzB,CAAP;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,iBAAiB,GAAG;AAChB,WAAOlC,SAAS,CAACkC,iBAAV,CAA4B,CAAC,KAAKzB,KAAN,EAAa,KAAKH,KAAlB,EAAyB,KAAKC,GAA9B,CAA5B,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACI4B,EAAAA,WAAW,GAAG;AACV,WAAO;AACHf,MAAAA,OAAO,EAAE,KAAKb,GADX;AAEHU,MAAAA,QAAQ,EAAE,KAAKR,KAFZ;AAGHU,MAAAA,QAAQ,EAAE,KAAKb;AAHZ,KAAP;AAKH;AAED;AACJ;AACA;;;AACIY,EAAAA,QAAQ,GAAG;AACP,WAAQ,GAAE,KAAKT,KAAL,CAAWS,QAAX,EAAsB,IAAG,KAAKZ,KAAL,CAAWY,QAAX,EAAsB,IAAG,KAAKX,GAAL,CAASW,QAAT,EAAoB,EAAhF;AACH;AAED;AACJ;AACA;AACA;;;AACIkB,EAAAA,oBAAoB,CAACd,MAAD,EAAS;AACzB,WAAOtB,SAAS,CAACoC,oBAAV,CAA+B,KAAKlB,QAAL,EAA/B,EAAgDI,MAAhD,CAAP;AACH;AAED;AACJ;AACA;;;AACIe,EAAAA,OAAO,GAAG;AACN,WAAOpC,cAAc,CAAC2B,KAAf,CAAqBC,MAArB,CAA4BS,MAA5B,CAAmC,KAAKH,WAAL,EAAnC,EAAuDI,MAAvD,EAAP;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,UAAM3B,EAAE,GAAG,IAAIV,MAAJ,CAAW,IAAX,CAAX;AACAU,IAAAA,EAAE,CAACH,SAAH,GAAe,KAAKA,SAApB;AACA,WAAOG,EAAP;AACH;AAED;AACJ;AACA;AACA;;;AACI4B,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAO1C,SAAS,CAACyC,OAAV,CACH,CAAC,KAAKhC,KAAN,EAAa,KAAKH,KAAlB,EAAyB,KAAKC,GAA9B,CADG,EAEH,CAACmC,KAAK,CAACjC,KAAP,EAAciC,KAAK,CAACpC,KAApB,EAA2BoC,KAAK,CAACnC,GAAjC,CAFG,CAAP;AAIH;;AAtJuB;AAyJ5B;AACA;AACA;;AACAJ,MAAM,CAACwC,YAAP,GAAsB,IAAIxC,MAAJ,CAAW,GAAX,CAAtB;AAEA;AACA;AACA;;AACAA,MAAM,CAACyC,YAAP,GAAsB,IAAIzC,MAAJ,CAAW,GAAX,CAAtB;AAEA;AACA;AACA;;AACAA,MAAM,CAAC0C,cAAP,GAAwB,IAAI1C,MAAJ,CAAW,GAAX,CAAxB","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as entity_id from \"../EntityIdHelper.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency file on Hedera.\n */\nexport default class FileId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const result = entity_id.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {FileId}\n     */\n    static fromString(text) {\n        const result = entity_id.fromString(text);\n        const id = new FileId(result);\n        id._checksum = result.checksum;\n        return id;\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IFileID} id\n     * @returns {FileId}\n     */\n    static _fromProtobuf(id) {\n        const fileId = new FileId(\n            id.shardNum != null ? Long.fromString(id.shardNum.toString()) : 0,\n            id.realmNum != null ? Long.fromString(id.realmNum.toString()) : 0,\n            id.fileNum != null ? Long.fromString(id.fileNum.toString()) : 0\n        );\n\n        return fileId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        entity_id.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileId}\n     */\n    static fromBytes(bytes) {\n        return FileId._fromProtobuf(HashgraphProto.proto.FileID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @returns {FileId}\n     */\n    static fromSolidityAddress(address) {\n        const [shard, realm, file] = entity_id.fromSolidityAddress(address);\n        return new FileId(shard, realm, file);\n    }\n\n    /**\n     * @returns {string} solidity address\n     */\n    toSolidityAddress() {\n        return entity_id.toSolidityAddress([this.shard, this.realm, this.num]);\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IFileID}\n     */\n    _toProtobuf() {\n        return {\n            fileNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return entity_id.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.FileID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {FileId}\n     */\n    clone() {\n        const id = new FileId(this);\n        id._checksum = this._checksum;\n        return id;\n    }\n\n    /**\n     * @param {FileId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return entity_id.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num]\n        );\n    }\n}\n\n/**\n * The public node address book for the current network.\n */\nFileId.ADDRESS_BOOK = new FileId(102);\n\n/**\n * The current fee schedule for the network.\n */\nFileId.FEE_SCHEDULE = new FileId(111);\n\n/**\n * The current exchange rate of HBAR to USD.\n */\nFileId.EXCHANGE_RATES = new FileId(112);\n"]},"metadata":{},"sourceType":"module"}