{"ast":null,"code":"import { Event } from \"ts-typed-events\";\nimport { WebSocketRelay } from \"./types/relay\";\nimport { MessageUtil, MessageHandler, RelayMessageType } from \"./message\";\nimport { HashConnectConnectionState } from \"./types/hashconnect\";\nimport { HashConnectProvider } from \"./provider/provider\";\nimport { HashConnectSigner } from \"./provider/signer\";\nglobal.Buffer = global.Buffer || require('buffer').Buffer;\n/**\n * Main interface with hashpack\n */\n\nexport class HashConnect {\n  constructor(debug) {\n    this.encryptionKeys = {}; //enc keys with topic id as the key\n\n    this.debug = false;\n    this.status = HashConnectConnectionState.Disconnected; //do we even need this?\n\n    this.hcData = {\n      topic: \"\",\n      pairingString: \"\",\n      encryptionKey: \"\",\n      pairingData: []\n    };\n    this.relay = new WebSocketRelay(this);\n    this.foundExtensionEvent = new Event();\n    this.foundIframeEvent = new Event();\n    this.pairingEvent = new Event();\n    this.transactionEvent = new Event();\n    this.acknowledgeMessageEvent = new Event();\n    this.additionalAccountRequestEvent = new Event();\n    this.connectionStatusChangeEvent = new Event();\n    this.authRequestEvent = new Event();\n    this.signRequestEvent = new Event();\n    this.messages = new MessageUtil();\n    this.messageParser = new MessageHandler();\n    if (debug) this.debug = debug;\n    this.setupEvents();\n  }\n\n  async init(metadata, network) {\n    let singleAccount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return new Promise(async resolve => {\n      let initData = {\n        topic: \"\",\n        pairingString: \"\",\n        encryptionKey: \"\",\n        savedPairings: []\n      };\n      this.metadata = metadata;\n      if (this.debug) console.log(\"hashconnect - Initializing\");\n\n      if (typeof window !== \"undefined\") {\n        this.metadata.url = window.location.origin;\n      } else if (!metadata.url) {\n        throw new Error(\"metadata.url must be defined if not running hashconnect within a browser\");\n      }\n\n      await this.relay.init();\n      if (this.debug) console.log(\"hashconnect - Initialized\");\n\n      if (!this.loadLocalData()) {\n        if (this.debug) console.log(\"hashconnect - No local data found, initializing\"); //first init, store the private key in localstorage\n\n        this.hcData.encryptionKey = await this.generateEncryptionKeys();\n        this.metadata.encryptionKey = this.hcData.encryptionKey; // this.metadata.publicKey = this.hcData.encryptionKey; //todo: remove as depracted\n\n        initData.encryptionKey = this.hcData.encryptionKey; //then connect, storing the new topic in localstorage\n\n        const topic = await this.connect();\n        if (this.debug) console.log(\"hashconnect - Received state\", topic);\n        this.hcData.topic = topic;\n        initData.topic = topic; //generate a pairing string, which you can display and generate a QR code from\n\n        this.hcData.pairingString = this.generatePairingString(topic, network, !singleAccount);\n        initData.pairingString = this.hcData.pairingString;\n        this.saveDataInLocalstorage();\n        this.status = HashConnectConnectionState.Connected;\n        this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Connected);\n      } else {\n        if (this.debug) console.log(\"hashconnect - Found saved local data\", this.hcData);\n        this.metadata.encryptionKey = this.hcData.encryptionKey;\n        this.status = HashConnectConnectionState.Connecting;\n        this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Connecting);\n        initData.pairingString = this.hcData.pairingString;\n        initData.topic = this.hcData.topic;\n        initData.encryptionKey = this.hcData.encryptionKey;\n        initData.savedPairings = this.hcData.pairingData;\n        this.connect(initData.topic, this.metadata, initData.encryptionKey);\n        this.status = HashConnectConnectionState.Connected;\n        this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Connected);\n\n        for (let pairing of this.hcData.pairingData) {\n          await this.connect(pairing.topic, pairing.metadata, pairing.encryptionKey);\n        }\n\n        if (this.hcData.pairingData.length > 0) {\n          this.status = HashConnectConnectionState.Paired;\n          this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Paired);\n        }\n      }\n\n      if (this.debug) console.log(\"hashconnect - init data\", initData);\n      this.findLocalWallets();\n      resolve(initData);\n    });\n  }\n\n  async connect(topic, metadataToConnect, encryptionKey) {\n    if (!topic) {\n      topic = this.messages.createRandomTopicId();\n      this.encryptionKeys[topic] = this.hcData.encryptionKey;\n      if (this.debug) console.log(\"hashconnect - Created new topic id - \" + topic);\n    }\n\n    if (metadataToConnect) {\n      this.encryptionKeys[topic] = encryptionKey;\n    }\n\n    await this.relay.subscribe(topic);\n    return topic;\n  }\n\n  async disconnect(topic) {\n    if (topic != this.hcData.topic) //only unsub from topic if not dapp\n      await this.relay.unsubscribe(topic);\n    let index = this.hcData.pairingData.findIndex(pairing => pairing.topic == topic);\n    this.hcData.pairingData.splice(index, 1);\n\n    if (this.hcData.pairingData.length == 0) {\n      this.status = HashConnectConnectionState.Connected;\n      this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Connected);\n    }\n\n    this.saveDataInLocalstorage();\n  }\n  /**\n   * Set up event connections\n   */\n\n\n  setupEvents() {\n    // This will listen for a payload emission from the relay\n    if (this.debug) console.log(\"hashconnect - Setting up events\");\n    this.relay.payload.on(async payload => {\n      if (!payload) return; //this is redundant until protobuffs are re-implemented\n\n      const message = await this.messages.decode(payload, this);\n      await this.messageParser.onPayload(message, this);\n    });\n    this.pairingEvent.on(pairingEvent => {\n      this.hcData.pairingData.push(pairingEvent.pairingData);\n      this.saveDataInLocalstorage();\n    });\n    this.foundIframeEvent.on(walletMetadata => {\n      if (this.debug) console.log(\"hashconnect - Found iframe wallet\", walletMetadata);\n      this.connectToIframeParent();\n    });\n  }\n  /**\n   * Local data management\n   */\n\n\n  saveDataInLocalstorage() {\n    if (typeof window === \"undefined\" || typeof localStorage === \"undefined\") return;\n    let data = JSON.stringify(this.hcData);\n    if (this.debug) console.log(\"hashconnect - saving local data\", this.hcData);\n    localStorage.setItem(\"hashconnectData\", data);\n  }\n\n  loadLocalData() {\n    if (typeof window === \"undefined\" || typeof localStorage === \"undefined\") return false;\n    let foundData = localStorage.getItem(\"hashconnectData\");\n\n    if (foundData) {\n      let data = JSON.parse(foundData);\n\n      if (!data.pairingData || !data.encryptionKey) {\n        if (this.debug) console.log(\"hashconnect - legacy save data found, creating new data\");\n        return false;\n      }\n\n      this.hcData = data;\n      return true;\n    } else return false;\n  }\n\n  async clearConnectionsAndData() {\n    if (this.debug) console.log(\"hashconnect - clearing local data - you will need to run init() again\");\n\n    for (let pairing of this.hcData.pairingData) {\n      await this.relay.unsubscribe(pairing.topic);\n    }\n\n    this.hcData = {\n      topic: \"\",\n      pairingString: \"\",\n      encryptionKey: \"\",\n      pairingData: []\n    };\n\n    if (typeof localStorage !== \"undefined\") {\n      localStorage.removeItem(\"hashconnectData\");\n    }\n\n    this.status = HashConnectConnectionState.Disconnected;\n    this.connectionStatusChangeEvent.emit(HashConnectConnectionState.Disconnected);\n  }\n  /**\n   * Send functions\n   */\n\n\n  async sendTransaction(topic, transaction) {\n    transaction.byteArray = Buffer.from(transaction.byteArray).toString(\"base64\");\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.Transaction, transaction, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    this.sendEncryptedLocalTransaction(msg);\n    return await new Promise(resolve => this.transactionResolver = resolve);\n  }\n\n  async requestAdditionalAccounts(topic, message) {\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.AdditionalAccountRequest, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    return await new Promise(resolve => this.additionalAccountResolver = resolve);\n  }\n\n  async sendAdditionalAccounts(topic, message) {\n    message.accountIds = message.accountIds.map(id => {\n      return id;\n    });\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.AdditionalAccountResponse, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    return message.id;\n  }\n\n  async sendTransactionResponse(topic, message) {\n    if (message.receipt) message.receipt = Buffer.from(message.receipt).toString(\"base64\");\n    if (message.signedTransaction) message.signedTransaction = Buffer.from(message.signedTransaction).toString(\"base64\");\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.TransactionResponse, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    return message.id;\n  }\n\n  async pair(pairingData, accounts, network) {\n    if (this.debug) console.log(\"hashconnect - Pairing to \" + pairingData.metadata.name);\n    let state = await this.connect(pairingData.topic);\n    let msg = {\n      metadata: this.metadata,\n      topic: pairingData.topic,\n      accountIds: accounts,\n      network: network\n    };\n    let newPairingData = {\n      accountIds: msg.accountIds,\n      metadata: pairingData.metadata,\n      network: msg.network,\n      topic: msg.topic,\n      origin: msg.origin,\n      lastUsed: new Date().getTime(),\n      encryptionKey: pairingData.metadata.encryptionKey || pairingData.metadata.publicKey\n    };\n    this.hcData.pairingData.push(newPairingData);\n    this.saveDataInLocalstorage(); //todo: remove as backwards compatibility\n\n    if (newPairingData.metadata.publicKey) {\n      //this is a old version of hashconnect trying to connect, do some trickery for backwards compatibility\n      msg.metadata.publicKey = newPairingData.metadata.publicKey;\n    } //clean up pairing data\n\n\n    msg.metadata.description = this.sanitizeString(msg.metadata.description);\n    msg.metadata.name = this.sanitizeString(msg.metadata.name);\n    msg.network = this.sanitizeString(msg.network);\n    msg.metadata.url = this.sanitizeString(msg.metadata.url);\n    msg.accountIds = msg.accountIds.map(id => {\n      return id;\n    }); //todo: remove as backwards compatibility (if statement only)\n\n    if (pairingData.metadata.encryptionKey) msg.metadata.encryptionKey = pairingData.metadata.encryptionKey; //set topic/key mapping\n\n    this.encryptionKeys[pairingData.topic] = pairingData.metadata.encryptionKey;\n    if (pairingData.metadata.publicKey) this.encryptionKeys[pairingData.topic] = pairingData.metadata.publicKey; //todo: remove as backwards compatibility\n    //send pairing approval\n\n    const payload = await this.messages.prepareSimpleMessage(RelayMessageType.ApprovePairing, msg, msg.topic, this);\n    this.relay.publish(pairingData.topic, payload, this.encryptionKeys[pairingData.topic]);\n    return newPairingData;\n  }\n\n  async reject(topic, reason, msg_id) {\n    let reject = {\n      reason: reason,\n      topic: topic,\n      msg_id: msg_id\n    };\n    reject.reason = this.sanitizeString(reject.reason); // create protobuf message\n\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.RejectPairing, reject, topic, this); // Publish the rejection\n\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n  }\n\n  async acknowledge(topic, pubKey, msg_id) {\n    const ack = {\n      result: true,\n      topic: topic,\n      msg_id: msg_id\n    };\n    const ackPayload = await this.messages.prepareSimpleMessage(RelayMessageType.Acknowledge, ack, topic, this);\n    await this.relay.publish(topic, ackPayload, pubKey);\n  }\n  /**\n   * Authenticate\n   */\n\n\n  async authenticate(topic, account_id, server_signing_account, serverSignature, payload) {\n    let message = {\n      topic: topic,\n      accountToSign: account_id,\n      serverSigningAccount: server_signing_account,\n      serverSignature: serverSignature,\n      payload: payload\n    };\n    message.serverSignature = Buffer.from(message.serverSignature).toString(\"base64\");\n    console.log(message.serverSignature);\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.AuthenticationRequest, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    this.sendEncryptedLocalTransaction(msg);\n    return await new Promise(resolve => this.authResolver = resolve);\n  }\n\n  async sendAuthenticationResponse(topic, message) {\n    if (message.userSignature) message.userSignature = Buffer.from(message.userSignature).toString(\"base64\");\n    if (message.signedPayload) message.signedPayload.serverSignature = Buffer.from(message.signedPayload.serverSignature).toString(\"base64\");\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.AuthenticationResponse, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    return message.id;\n  }\n  /**\n   * Generic Signing\n   */\n\n\n  async sign(topic, account_id, payload) {\n    let message = {\n      topic: topic,\n      accountToSign: account_id,\n      payload: payload\n    };\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.SigningRequest, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    this.sendEncryptedLocalTransaction(msg);\n    return await new Promise(resolve => this.signResolver = resolve);\n  }\n\n  async sendSigningResponse(topic, message) {\n    if (message.userSignature) message.userSignature = Buffer.from(message.userSignature).toString(\"base64\");\n    const msg = await this.messages.prepareSimpleMessage(RelayMessageType.SigningResponse, message, topic, this);\n    await this.relay.publish(topic, msg, this.encryptionKeys[topic]);\n    return message.id;\n  }\n  /**\n   * Helpers\n   */\n\n\n  generatePairingString(topic, network, multiAccount) {\n    if (this.debug) console.log(\"hashconnect - Generating pairing string\");\n    let data = {\n      metadata: this.metadata,\n      topic: topic,\n      network: network,\n      multiAccount: multiAccount\n    };\n    data.metadata.description = this.sanitizeString(data.metadata.description);\n    data.metadata.name = this.sanitizeString(data.metadata.name);\n    data.network = this.sanitizeString(data.network);\n    data.metadata.url = this.sanitizeString(data.metadata.url);\n    let pairingString = Buffer.from(JSON.stringify(data)).toString(\"base64\");\n    this.hcData.pairingString = pairingString;\n    return pairingString;\n  }\n\n  decodePairingString(pairingString) {\n    let json_string = Buffer.from(pairingString, 'base64').toString();\n    let data = JSON.parse(json_string);\n    return data;\n  }\n\n  async generateEncryptionKeys() {\n    let key = this.messages.createRandomTopicId();\n    if (this.debug) console.log(\"hashconnect - Generated new encryption key - \" + key);\n    return key;\n  }\n\n  sanitizeString(str) {\n    if (!str) return \"\";\n    return str.replace(/[^\\w. ]/gi, function (c) {\n      if (c == \".\") return \".\";\n      return '&#' + c.charCodeAt(0) + ';';\n    });\n  }\n  /**\n   * Local wallet stuff\n   */\n\n\n  findLocalWallets() {\n    if (typeof window === \"undefined\") {\n      if (this.debug) console.log(\"hashconnect - Cancel findLocalWallets - no window object\");\n      return;\n    }\n\n    if (this.debug) console.log(\"hashconnect - Finding local wallets\");\n    window.addEventListener(\"message\", event => {\n      if (event.data.type && event.data.type == \"hashconnect-query-extension-response\") {\n        if (this.debug) console.log(\"hashconnect - Local wallet metadata recieved\", event.data);\n        if (event.data.metadata) this.foundExtensionEvent.emit(event.data.metadata);\n      }\n\n      if (event.data.type && event.data.type == \"hashconnect-iframe-response\") {\n        if (this.debug) console.log(\"hashconnect - iFrame wallet metadata recieved\", event.data);\n        if (event.data.metadata) this.foundIframeEvent.emit(event.data.metadata);\n      }\n    }, false);\n    setTimeout(() => {\n      window.postMessage({\n        type: \"hashconnect-query-extension\"\n      }, \"*\");\n      if (window.parent) window.parent.postMessage({\n        type: \"hashconnect-iframe-query\"\n      }, '*');\n    }, 50);\n  }\n\n  connectToIframeParent() {\n    if (typeof window === \"undefined\") {\n      if (this.debug) console.log(\"hashconnect - Cancel iframe connection - no window object\");\n      return;\n    }\n\n    if (this.debug) console.log(\"hashconnect - Connecting to iframe parent wallet\");\n    window.parent.postMessage({\n      type: \"hashconnect-iframe-pairing\",\n      pairingString: this.hcData.pairingString\n    }, '*');\n  }\n\n  connectToLocalWallet() {\n    if (typeof window === \"undefined\") {\n      if (this.debug) console.log(\"hashconnect - Cancel connect to local wallet - no window object\");\n      return;\n    }\n\n    if (this.debug) console.log(\"hashconnect - Connecting to local wallet\"); //todo: add extension metadata support\n\n    window.postMessage({\n      type: \"hashconnect-connect-extension\",\n      pairingString: this.hcData.pairingString\n    }, \"*\");\n  }\n\n  sendEncryptedLocalTransaction(message) {\n    if (typeof window === \"undefined\") {\n      if (this.debug) console.log(\"hashconnect - Cancel send local transaction - no window object\");\n      return;\n    }\n\n    if (this.debug) console.log(\"hashconnect - sending local transaction\", message);\n    window.postMessage({\n      type: \"hashconnect-send-local-transaction\",\n      message: message\n    }, \"*\");\n  }\n\n  async decodeLocalTransaction(message) {\n    const local_message = await this.messages.decode(message, this);\n    return local_message;\n  }\n  /**\n   * Provider stuff\n   */\n\n\n  getProvider(network, topicId, accountToSign) {\n    return new HashConnectProvider(network, this, topicId, accountToSign);\n  }\n\n  getSigner(provider) {\n    return new HashConnectSigner(this, provider, provider.accountToSign, provider.topicId);\n  }\n\n  getPairingByTopic(topic) {\n    let pairingData = this.hcData.pairingData.find(pairing => {\n      return pairing.topic == topic;\n    });\n\n    if (!pairingData) {\n      return null;\n    }\n\n    return pairingData;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Event","WebSocketRelay","MessageUtil","MessageHandler","RelayMessageType","HashConnectConnectionState","HashConnectProvider","HashConnectSigner","global","Buffer","require","HashConnect","constructor","debug","Disconnected","topic","pairingString","encryptionKey","pairingData","relay","foundExtensionEvent","foundIframeEvent","pairingEvent","transactionEvent","acknowledgeMessageEvent","additionalAccountRequestEvent","connectionStatusChangeEvent","authRequestEvent","signRequestEvent","messages","messageParser","setupEvents","init","metadata","network","singleAccount","Promise","resolve","initData","savedPairings","console","log","window","url","location","origin","Error","loadLocalData","hcData","generateEncryptionKeys","connect","generatePairingString","saveDataInLocalstorage","status","Connected","emit","Connecting","pairing","length","Paired","findLocalWallets","metadataToConnect","createRandomTopicId","encryptionKeys","subscribe","disconnect","unsubscribe","index","findIndex","splice","payload","on","message","decode","onPayload","push","walletMetadata","connectToIframeParent","localStorage","data","JSON","stringify","setItem","foundData","getItem","parse","clearConnectionsAndData","removeItem","sendTransaction","transaction","byteArray","from","toString","msg","prepareSimpleMessage","Transaction","publish","sendEncryptedLocalTransaction","transactionResolver","requestAdditionalAccounts","AdditionalAccountRequest","additionalAccountResolver","sendAdditionalAccounts","accountIds","map","id","AdditionalAccountResponse","sendTransactionResponse","receipt","signedTransaction","TransactionResponse","pair","accounts","name","state","newPairingData","lastUsed","Date","getTime","publicKey","description","sanitizeString","ApprovePairing","reject","reason","msg_id","RejectPairing","acknowledge","pubKey","ack","result","ackPayload","Acknowledge","authenticate","account_id","server_signing_account","serverSignature","accountToSign","serverSigningAccount","AuthenticationRequest","authResolver","sendAuthenticationResponse","userSignature","signedPayload","AuthenticationResponse","sign","SigningRequest","signResolver","sendSigningResponse","SigningResponse","multiAccount","decodePairingString","json_string","key","str","replace","c","charCodeAt","addEventListener","event","type","setTimeout","postMessage","parent","connectToLocalWallet","decodeLocalTransaction","local_message","getProvider","topicId","getSigner","provider","getPairingByTopic","find"],"sourceRoot":"","sources":["../../src/hashconnect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}