{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Hbar from \"../Hbar.js\";\nimport Executable from \"../Executable.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport { _makePaymentTransaction, COST_QUERY } from \"./Query.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Status.js\").default} Status\n * @typedef {import(\"../Executable.js\").ExecutionState} ExecutionState\n */\n\n/**\n * @template OutputT\n * @augments {Executable<HashgraphProto.proto.IQuery, HashgraphProto.proto.IResponse, Hbar>}\n */\n\nexport default class CostQuery extends Executable {\n  /**\n   * @param {import(\"./Query.js\").default<OutputT>} query\n   */\n  constructor(query) {\n    super();\n    this._query = query;\n    this._grpcDeadline = query._grpcDeadline;\n    this._requestTimeout = query._requestTimeout;\n    this._nodeAccountIds = query._nodeAccountIds.clone();\n    this._operator = query._operator;\n    /**\n     * @type {HashgraphProto.proto.IQueryHeader | null}\n     */\n\n    this._header = null;\n  }\n  /**\n   * @returns {TransactionId}\n   */\n\n\n  _getTransactionId() {\n    return this._query._getTransactionId();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    return `CostQuery:${this._query._getLogId()}`;\n  }\n  /**\n   * @abstract\n   * @protected\n   * @param {import(\"../client/Client.js\").default<*, *>} client\n   * @returns {Promise<void>}\n   */\n\n\n  async _beforeExecute(client) {\n    if (client == null) {\n      throw new Error(\"Cannot do CostQuery without Client\");\n    }\n\n    const operator = this._operator != null ? this._operator : client._operator;\n\n    if (operator == null) {\n      throw new Error(\"`client` must have an `operator` or an explicit payment transaction must be provided\");\n    }\n\n    if (this._query._nodeAccountIds.isEmpty) {\n      this._query._nodeAccountIds.setList(client._network.getNodeAccountIdsForExecute());\n    }\n\n    this._header = {\n      payment: await _makePaymentTransaction(this._getLogId(),\n      /** @type {import(\"../transaction/TransactionId.js\").default} */\n      TransactionId.generate(new AccountId(0)), new AccountId(0), operator, new Hbar(0)),\n      responseType: HashgraphProto.proto.ResponseType.COST_ANSWER\n    };\n  }\n  /**\n   * @abstract\n   * @internal\n   * @returns {Promise<HashgraphProto.proto.IQuery>}\n   */\n\n\n  _makeRequestAsync() {\n    return Promise.resolve(this._query._onMakeRequest(\n    /** @type {HashgraphProto.proto.IQueryHeader} */\n    this._header));\n  }\n  /**\n   * @abstract\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} request\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {[Status, ExecutionState]}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _shouldRetry(request, response) {\n    return this._query._shouldRetry(request, response);\n  }\n  /**\n   * @abstract\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} request\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {Error}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapStatusError(request, response) {\n    return this._query._mapStatusError(request, response);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<Hbar>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const cost = this._query._mapResponseHeader(response).cost;\n\n    return Promise.resolve(Hbar.fromTinybars(\n    /** @type {Long | number} */\n    cost));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return this._query._execute(channel, request);\n  }\n  /**\n   * @param {HashgraphProto.proto.Query} request\n   * @returns {Uint8Array}\n   */\n\n\n  _requestToBytes(request) {\n    return this._query._requestToBytes(request);\n  }\n  /**\n   * @param {HashgraphProto.proto.Response} response\n   * @returns {Uint8Array}\n   */\n\n\n  _responseToBytes(response) {\n    return this._query._responseToBytes(response);\n  }\n\n}\nCOST_QUERY.push(query => new CostQuery(query));","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/query/CostQuery.js"],"names":["TransactionId","Hbar","Executable","AccountId","_makePaymentTransaction","COST_QUERY","HashgraphProto","CostQuery","constructor","query","_query","_grpcDeadline","_requestTimeout","_nodeAccountIds","clone","_operator","_header","_getTransactionId","_getLogId","_beforeExecute","client","Error","operator","isEmpty","setList","_network","getNodeAccountIdsForExecute","payment","generate","responseType","proto","ResponseType","COST_ANSWER","_makeRequestAsync","Promise","resolve","_onMakeRequest","_shouldRetry","request","response","_mapStatusError","_mapResponse","nodeAccountId","cost","_mapResponseHeader","fromTinybars","_execute","channel","_requestToBytes","_responseToBytes","push"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Hbar from \"../Hbar.js\";\nimport Executable from \"../Executable.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport { _makePaymentTransaction, COST_QUERY } from \"./Query.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Status.js\").default} Status\n * @typedef {import(\"../Executable.js\").ExecutionState} ExecutionState\n */\n\n/**\n * @template OutputT\n * @augments {Executable<HashgraphProto.proto.IQuery, HashgraphProto.proto.IResponse, Hbar>}\n */\nexport default class CostQuery extends Executable {\n    /**\n     * @param {import(\"./Query.js\").default<OutputT>} query\n     */\n    constructor(query) {\n        super();\n\n        this._query = query;\n        this._grpcDeadline = query._grpcDeadline;\n        this._requestTimeout = query._requestTimeout;\n        this._nodeAccountIds = query._nodeAccountIds.clone();\n        this._operator = query._operator;\n\n        /**\n         * @type {HashgraphProto.proto.IQueryHeader | null}\n         */\n        this._header = null;\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        return this._query._getTransactionId();\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        return `CostQuery:${this._query._getLogId()}`;\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<void>}\n     */\n    async _beforeExecute(client) {\n        if (client == null) {\n            throw new Error(\"Cannot do CostQuery without Client\");\n        }\n\n        const operator =\n            this._operator != null ? this._operator : client._operator;\n\n        if (operator == null) {\n            throw new Error(\n                \"`client` must have an `operator` or an explicit payment transaction must be provided\"\n            );\n        }\n\n        if (this._query._nodeAccountIds.isEmpty) {\n            this._query._nodeAccountIds.setList(\n                client._network.getNodeAccountIdsForExecute()\n            );\n        }\n\n        this._header = {\n            payment: await _makePaymentTransaction(\n                this._getLogId(),\n                /** @type {import(\"../transaction/TransactionId.js\").default} */\n                (TransactionId.generate(new AccountId(0))),\n                new AccountId(0),\n                operator,\n                new Hbar(0)\n            ),\n            responseType: HashgraphProto.proto.ResponseType.COST_ANSWER,\n        };\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @returns {Promise<HashgraphProto.proto.IQuery>}\n     */\n    _makeRequestAsync() {\n        return Promise.resolve(\n            this._query._onMakeRequest(\n                /** @type {HashgraphProto.proto.IQueryHeader} */ (this._header)\n            )\n        );\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} request\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {[Status, ExecutionState]}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _shouldRetry(request, response) {\n        return this._query._shouldRetry(request, response);\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} request\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response) {\n        return this._query._mapStatusError(request, response);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<Hbar>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cost = this._query._mapResponseHeader(response).cost;\n        return Promise.resolve(\n            Hbar.fromTinybars(/** @type {Long | number} */ (cost))\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return this._query._execute(channel, request);\n    }\n\n    /**\n     * @param {HashgraphProto.proto.Query} request\n     * @returns {Uint8Array}\n     */\n    _requestToBytes(request) {\n        return this._query._requestToBytes(request);\n    }\n\n    /**\n     * @param {HashgraphProto.proto.Response} response\n     * @returns {Uint8Array}\n     */\n    _responseToBytes(response) {\n        return this._query._responseToBytes(response);\n    }\n}\n\nCOST_QUERY.push((query) => new CostQuery(query));\n"]},"metadata":{},"sourceType":"module"}