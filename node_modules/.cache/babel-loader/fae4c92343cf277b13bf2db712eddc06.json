{"ast":null,"code":"var baseX = require('base-x');\n\nvar crc = require('crc');\n\nvar cryptoUtils = require('./crypto/utils');\n\nvar ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\nvar base32 = baseX(ALPHABET);\nvar regexp = new RegExp('^[' + ALPHABET + ']{56}$');\nvar ed25519PublicKeyVersionByte = 6 << 3;\n\nfunction swap16(number) {\n  var lower = number & 0xFF;\n  var upper = number >> 8 & 0xFF;\n  return lower << 8 | upper;\n}\n\nmodule.exports = {\n  isValidAddress: function (address) {\n    if (regexp.test(address)) {\n      return this.verifyChecksum(address);\n    }\n\n    return false;\n  },\n  verifyChecksum: function (address) {\n    // based on https://github.com/stellar/js-stellar-base/blob/master/src/strkey.js#L126\n    var bytes = base32.decode(address);\n\n    if (bytes[0] !== ed25519PublicKeyVersionByte) {\n      return false;\n    }\n\n    var computedChecksum = cryptoUtils.numberToHex(swap16(crc.crc16xmodem(bytes.slice(0, -2))), 4);\n    var checksum = cryptoUtils.toHex(bytes.slice(-2));\n    return computedChecksum === checksum;\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/stellar_validator.js"],"names":["baseX","require","crc","cryptoUtils","ALPHABET","base32","regexp","RegExp","ed25519PublicKeyVersionByte","swap16","number","lower","upper","module","exports","isValidAddress","address","test","verifyChecksum","bytes","decode","computedChecksum","numberToHex","crc16xmodem","slice","checksum","toHex"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIG,QAAQ,GAAG,kCAAf;AAEA,IAAIC,MAAM,GAAGL,KAAK,CAACI,QAAD,CAAlB;AACA,IAAIE,MAAM,GAAG,IAAIC,MAAJ,CAAW,OAAOH,QAAP,GAAkB,QAA7B,CAAb;AACA,IAAII,2BAA2B,GAAI,KAAK,CAAxC;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,MAAIC,KAAK,GAAGD,MAAM,GAAG,IAArB;AACA,MAAIE,KAAK,GAAIF,MAAM,IAAI,CAAX,GAAgB,IAA5B;AACA,SAAQC,KAAK,IAAI,CAAV,GAAeC,KAAtB;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmB;AAC/B,QAAIV,MAAM,CAACW,IAAP,CAAYD,OAAZ,CAAJ,EAA0B;AACtB,aAAO,KAAKE,cAAL,CAAoBF,OAApB,CAAP;AACH;;AAED,WAAO,KAAP;AACH,GAPY;AASbE,EAAAA,cAAc,EAAE,UAAUF,OAAV,EAAmB;AAC/B;AACA,QAAIG,KAAK,GAAGd,MAAM,CAACe,MAAP,CAAcJ,OAAd,CAAZ;;AACA,QAAIG,KAAK,CAAC,CAAD,CAAL,KAAaX,2BAAjB,EAA8C;AAC1C,aAAO,KAAP;AACH;;AAED,QAAIa,gBAAgB,GAAGlB,WAAW,CAACmB,WAAZ,CAAwBb,MAAM,CAACP,GAAG,CAACqB,WAAJ,CAAgBJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAhB,CAAD,CAA9B,EAAqE,CAArE,CAAvB;AACA,QAAIC,QAAQ,GAAGtB,WAAW,CAACuB,KAAZ,CAAkBP,KAAK,CAACK,KAAN,CAAY,CAAC,CAAb,CAAlB,CAAf;AAEA,WAAOH,gBAAgB,KAAKI,QAA5B;AACH;AApBY,CAAjB","sourcesContent":["var baseX = require('base-x');\nvar crc = require('crc');\nvar cryptoUtils = require('./crypto/utils');\n\nvar ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\nvar base32 = baseX(ALPHABET);\nvar regexp = new RegExp('^[' + ALPHABET + ']{56}$');\nvar ed25519PublicKeyVersionByte = (6 << 3);\n\nfunction swap16(number) {\n    var lower = number & 0xFF;\n    var upper = (number >> 8) & 0xFF;\n    return (lower << 8) | upper;\n}\n\nmodule.exports = {\n    isValidAddress: function (address) {\n        if (regexp.test(address)) {\n            return this.verifyChecksum(address);\n        }\n\n        return false;\n    },\n\n    verifyChecksum: function (address) {\n        // based on https://github.com/stellar/js-stellar-base/blob/master/src/strkey.js#L126\n        var bytes = base32.decode(address);\n        if (bytes[0] !== ed25519PublicKeyVersionByte) {\n            return false;\n        }\n\n        var computedChecksum = cryptoUtils.numberToHex(swap16(crc.crc16xmodem(bytes.slice(0, -2))), 4);\n        var checksum = cryptoUtils.toHex(bytes.slice(-2));\n\n        return computedChecksum === checksum\n    }\n};\n"]},"metadata":{},"sourceType":"script"}