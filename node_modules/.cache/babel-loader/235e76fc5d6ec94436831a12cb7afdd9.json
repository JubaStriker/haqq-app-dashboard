{"ast":null,"code":"const cryptoUtils = require('./crypto/utils'); // from https://github.com/paritytech/substrate/wiki/External-Address-Format-(SS58)\n\n\nconst addressFormats = [{\n  addressLength: 3,\n  accountIndexLength: 1,\n  checkSumLength: 1\n}, {\n  addressLength: 4,\n  accountIndexLength: 2,\n  checkSumLength: 1\n}, {\n  addressLength: 5,\n  accountIndexLength: 2,\n  checkSumLength: 2\n}, {\n  addressLength: 6,\n  accountIndexLength: 4,\n  checkSumLength: 1\n}, {\n  addressLength: 7,\n  accountIndexLength: 4,\n  checkSumLength: 2\n}, {\n  addressLength: 8,\n  accountIndexLength: 4,\n  checkSumLength: 3\n}, {\n  addressLength: 9,\n  accountIndexLength: 4,\n  checkSumLength: 4\n}, {\n  addressLength: 10,\n  accountIndexLength: 8,\n  checkSumLength: 1\n}, {\n  addressLength: 11,\n  accountIndexLength: 8,\n  checkSumLength: 2\n}, {\n  addressLength: 12,\n  accountIndexLength: 8,\n  checkSumLength: 3\n}, {\n  addressLength: 13,\n  accountIndexLength: 8,\n  checkSumLength: 4\n}, {\n  addressLength: 14,\n  accountIndexLength: 8,\n  checkSumLength: 5\n}, {\n  addressLength: 15,\n  accountIndexLength: 8,\n  checkSumLength: 6\n}, {\n  addressLength: 16,\n  accountIndexLength: 8,\n  checkSumLength: 7\n}, {\n  addressLength: 17,\n  accountIndexLength: 8,\n  checkSumLength: 8\n}, {\n  addressLength: 34,\n  accountIndexLength: 32,\n  checkSumLength: 2\n}];\nmodule.exports = {\n  isValidAddress: function (address, currency) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      networkType = 'prod'\n    } = opts;\n    return this.verifyChecksum(address);\n  },\n  verifyChecksum: function (address) {\n    try {\n      const preImage = '53533538505245';\n      const decoded = cryptoUtils.base58(address);\n      const addressType = cryptoUtils.byteArray2hexStr(decoded.slice(0, 1));\n      const addressAndChecksum = decoded.slice(1); // get the address format\n\n      const addressFormat = addressFormats.find(af => af.addressLength === addressAndChecksum.length);\n\n      if (!addressFormat) {\n        throw new Error('Invalid address length');\n      }\n\n      const decodedAddress = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(0, addressFormat.accountIndexLength));\n      const checksum = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(-addressFormat.checkSumLength));\n      const calculatedHash = cryptoUtils.blake2b(preImage + addressType + decodedAddress, 64).substr(0, addressFormat.checkSumLength * 2).toUpperCase();\n      return calculatedHash == checksum;\n    } catch (err) {\n      return false;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/dot_validator.js"],"names":["cryptoUtils","require","addressFormats","addressLength","accountIndexLength","checkSumLength","module","exports","isValidAddress","address","currency","opts","networkType","verifyChecksum","preImage","decoded","base58","addressType","byteArray2hexStr","slice","addressAndChecksum","addressFormat","find","af","length","Error","decodedAddress","checksum","calculatedHash","blake2b","substr","toUpperCase","err"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,CACnB;AAAEC,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CADmB,EAEnB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CAFmB,EAGnB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CAHmB,EAInB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CAJmB,EAKnB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CALmB,EAMnB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CANmB,EAOnB;AAAEF,EAAAA,aAAa,EAAE,CAAjB;AAAoBC,EAAAA,kBAAkB,EAAE,CAAxC;AAA2CC,EAAAA,cAAc,EAAE;AAA3D,CAPmB,EAQnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CARmB,EASnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CATmB,EAUnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAVmB,EAWnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAXmB,EAYnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAZmB,EAanB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAbmB,EAcnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAdmB,EAenB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,CAAzC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAfmB,EAgBnB;AAAEF,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,kBAAkB,EAAE,EAAzC;AAA6CC,EAAAA,cAAc,EAAE;AAA7D,CAhBmB,CAAvB;AAmBAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmBC,QAAnB,EAAwC;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACpD,UAAM;AAAEC,MAAAA,WAAW,GAAG;AAAhB,QAA2BD,IAAjC;AAEA,WAAO,KAAKE,cAAL,CAAoBJ,OAApB,CAAP;AACH,GALY;AAObI,EAAAA,cAAc,EAAE,UAAUJ,OAAV,EAAmB;AAE/B,QAAI;AACA,YAAMK,QAAQ,GAAG,gBAAjB;AAEA,YAAMC,OAAO,GAAGf,WAAW,CAACgB,MAAZ,CAAmBP,OAAnB,CAAhB;AACA,YAAMQ,WAAW,GAAGjB,WAAW,CAACkB,gBAAZ,CAA6BH,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAA7B,CAApB;AACA,YAAMC,kBAAkB,GAAGL,OAAO,CAACI,KAAR,CAAc,CAAd,CAA3B,CALA,CAOA;;AACA,YAAME,aAAa,GAAGnB,cAAc,CAACoB,IAAf,CAAoBC,EAAE,IAAIA,EAAE,CAACpB,aAAH,KAAqBiB,kBAAkB,CAACI,MAAlE,CAAtB;;AAEA,UAAI,CAACH,aAAL,EAAoB;AAChB,cAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAED,YAAMC,cAAc,GAAG1B,WAAW,CAACkB,gBAAZ,CAA6BE,kBAAkB,CAACD,KAAnB,CAAyB,CAAzB,EAA4BE,aAAa,CAACjB,kBAA1C,CAA7B,CAAvB;AACA,YAAMuB,QAAQ,GAAG3B,WAAW,CAACkB,gBAAZ,CAA6BE,kBAAkB,CAACD,KAAnB,CAAyB,CAACE,aAAa,CAAChB,cAAxC,CAA7B,CAAjB;AAEA,YAAMuB,cAAc,GAAG5B,WAAW,CAC7B6B,OADkB,CACVf,QAAQ,GAAGG,WAAX,GAAyBS,cADf,EAC+B,EAD/B,EAElBI,MAFkB,CAEX,CAFW,EAERT,aAAa,CAAChB,cAAd,GAA+B,CAFvB,EAGlB0B,WAHkB,EAAvB;AAKA,aAAOH,cAAc,IAAID,QAAzB;AACH,KAvBD,CAuBE,OAAMK,GAAN,EAAW;AACT,aAAO,KAAP;AACH;AACJ;AAnCY,CAAjB","sourcesContent":["const cryptoUtils = require('./crypto/utils');\n\n// from https://github.com/paritytech/substrate/wiki/External-Address-Format-(SS58)\nconst addressFormats = [\n    { addressLength: 3, accountIndexLength: 1, checkSumLength: 1 },\n    { addressLength: 4, accountIndexLength: 2, checkSumLength: 1 },\n    { addressLength: 5, accountIndexLength: 2, checkSumLength: 2 },\n    { addressLength: 6, accountIndexLength: 4, checkSumLength: 1 },\n    { addressLength: 7, accountIndexLength: 4, checkSumLength: 2 },\n    { addressLength: 8, accountIndexLength: 4, checkSumLength: 3 },\n    { addressLength: 9, accountIndexLength: 4, checkSumLength: 4 },\n    { addressLength: 10, accountIndexLength: 8, checkSumLength: 1 },\n    { addressLength: 11, accountIndexLength: 8, checkSumLength: 2 },\n    { addressLength: 12, accountIndexLength: 8, checkSumLength: 3 },\n    { addressLength: 13, accountIndexLength: 8, checkSumLength: 4 },\n    { addressLength: 14, accountIndexLength: 8, checkSumLength: 5 },\n    { addressLength: 15, accountIndexLength: 8, checkSumLength: 6 },\n    { addressLength: 16, accountIndexLength: 8, checkSumLength: 7 },\n    { addressLength: 17, accountIndexLength: 8, checkSumLength: 8 },\n    { addressLength: 34, accountIndexLength: 32, checkSumLength: 2 },\n];\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        const { networkType = 'prod' } = opts;\n\n        return this.verifyChecksum(address)\n    },\n\n    verifyChecksum: function (address) {\n\n        try {\n            const preImage = '53533538505245'\n\n            const decoded = cryptoUtils.base58(address);\n            const addressType = cryptoUtils.byteArray2hexStr(decoded.slice(0, 1));\n            const addressAndChecksum = decoded.slice(1)\n\n            // get the address format\n            const addressFormat = addressFormats.find(af => af.addressLength === addressAndChecksum.length);\n\n            if (!addressFormat) {\n                throw new Error('Invalid address length');\n            }\n\n            const decodedAddress = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(0, addressFormat.accountIndexLength));\n            const checksum = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(-addressFormat.checkSumLength));\n\n            const calculatedHash = cryptoUtils\n                .blake2b(preImage + addressType + decodedAddress, 64)\n                .substr(0, addressFormat.checkSumLength * 2)\n                .toUpperCase();\n\n            return calculatedHash == checksum;\n        } catch(err) {\n            return false;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}