{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n */\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\n\nexport default class TransactionHashMap extends ObjectMap {\n  constructor() {\n    super(s => AccountId.fromString(s));\n  }\n  /**\n   * @param {import(\"./Transaction.js\").default} transaction\n   * @returns {Promise<TransactionHashMap>}\n   */\n\n\n  static async _fromTransaction(transaction) {\n    const hashes = new TransactionHashMap();\n\n    for (let i = 0; i < transaction._nodeAccountIds.length; i++) {\n      const nodeAccountId = transaction._nodeAccountIds.list[i];\n\n      const tx =\n      /** @type {HashgraphProto.proto.ITransaction} */\n      transaction._transactions.get(i);\n\n      const hash = await sha384.digest(\n      /** @type {Uint8Array} */\n      tx.signedTransactionBytes);\n\n      hashes._set(nodeAccountId, hash);\n    }\n\n    return hashes;\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/transaction/TransactionHashMap.js"],"names":["AccountId","sha384","ObjectMap","TransactionHashMap","constructor","s","fromString","_fromTransaction","transaction","hashes","i","_nodeAccountIds","length","nodeAccountId","list","tx","_transactions","get","hash","digest","signedTransactionBytes","_set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCD,SAAjC,CAA2C;AACtDE,EAAAA,WAAW,GAAG;AACV,UAAOC,CAAD,IAAOL,SAAS,CAACM,UAAV,CAAqBD,CAArB,CAAb;AACH;AAED;AACJ;AACA;AACA;;;AACiC,eAAhBE,gBAAgB,CAACC,WAAD,EAAc;AACvC,UAAMC,MAAM,GAAG,IAAIN,kBAAJ,EAAf;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,eAAZ,CAA4BC,MAAhD,EAAwDF,CAAC,EAAzD,EAA6D;AACzD,YAAMG,aAAa,GAAGL,WAAW,CAACG,eAAZ,CAA4BG,IAA5B,CAAiCJ,CAAjC,CAAtB;;AACA,YAAMK,EAAE;AAAG;AACPP,MAAAA,WAAW,CAACQ,aAAZ,CAA0BC,GAA1B,CAA8BP,CAA9B,CADJ;;AAGA,YAAMQ,IAAI,GAAG,MAAMjB,MAAM,CAACkB,MAAP;AACf;AAA2BJ,MAAAA,EAAE,CAACK,sBADf,CAAnB;;AAIAX,MAAAA,MAAM,CAACY,IAAP,CAAYR,aAAZ,EAA2BK,IAA3B;AACH;;AAED,WAAOT,MAAP;AACH;;AAzBqD","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n */\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\nexport default class TransactionHashMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {Promise<TransactionHashMap>}\n     */\n    static async _fromTransaction(transaction) {\n        const hashes = new TransactionHashMap();\n\n        for (let i = 0; i < transaction._nodeAccountIds.length; i++) {\n            const nodeAccountId = transaction._nodeAccountIds.list[i];\n            const tx = /** @type {HashgraphProto.proto.ITransaction} */ (\n                transaction._transactions.get(i)\n            );\n            const hash = await sha384.digest(\n                /** @type {Uint8Array} */ (tx.signedTransactionBytes)\n            );\n\n            hashes._set(nodeAccountId, hash);\n        }\n\n        return hashes;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}