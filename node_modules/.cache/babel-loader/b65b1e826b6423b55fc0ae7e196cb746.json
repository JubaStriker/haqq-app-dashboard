{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\n\nexport default class Transfer {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {AccountId | string} props.accountId\n   * @param {number | string | Long | BigNumber | Hbar} props.amount\n   * @param {boolean} props.isApproved\n   */\n  constructor(props) {\n    /**\n     * The Account ID that sends or receives cryptocurrency.\n     *\n     * @readonly\n     */\n    this.accountId = props.accountId instanceof AccountId ? props.accountId : AccountId.fromString(props.accountId);\n    /**\n     * The amount of tinybars that the account sends(negative) or receives(positive).\n     */\n\n    this.amount = props.amount instanceof Hbar ? props.amount : new Hbar(props.amount);\n    this.isApproved = props.isApproved;\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IAccountAmount[]} accountAmounts\n   * @returns {Transfer[]}\n   */\n\n\n  static _fromProtobuf(accountAmounts) {\n    const transfers = [];\n\n    for (const transfer of accountAmounts) {\n      transfers.push(new Transfer({\n        accountId: AccountId._fromProtobuf(\n        /** @type {HashgraphProto.proto.IAccountID} */\n        transfer.accountID),\n        amount: Hbar.fromTinybars(transfer.amount != null ? transfer.amount : 0),\n        isApproved:\n        /** @type {boolean} */\n        transfer.isApproval\n      }));\n    }\n\n    return transfers;\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.IAccountAmount}\n   */\n\n\n  _toProtobuf() {\n    return {\n      accountID: this.accountId._toProtobuf(),\n      amount: this.amount.toTinybars(),\n      isApproval: this.isApproved\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/Transfer.js"],"names":["AccountId","Hbar","Transfer","constructor","props","accountId","fromString","amount","isApproved","_fromProtobuf","accountAmounts","transfers","transfer","push","accountID","fromTinybars","isApproval","_toProtobuf","toTinybars"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,CAAe;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,SAAL,GACID,KAAK,CAACC,SAAN,YAA2BL,SAA3B,GACMI,KAAK,CAACC,SADZ,GAEML,SAAS,CAACM,UAAV,CAAqBF,KAAK,CAACC,SAA3B,CAHV;AAKA;AACR;AACA;;AACQ,SAAKE,MAAL,GACIH,KAAK,CAACG,MAAN,YAAwBN,IAAxB,GACMG,KAAK,CAACG,MADZ,GAEM,IAAIN,IAAJ,CAASG,KAAK,CAACG,MAAf,CAHV;AAKA,SAAKC,UAAL,GAAkBJ,KAAK,CAACI,UAAxB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,cAAD,EAAiB;AACjC,UAAMC,SAAS,GAAG,EAAlB;;AAEA,SAAK,MAAMC,QAAX,IAAuBF,cAAvB,EAAuC;AACnCC,MAAAA,SAAS,CAACE,IAAV,CACI,IAAIX,QAAJ,CAAa;AACTG,QAAAA,SAAS,EAAEL,SAAS,CAACS,aAAV;AACP;AACIG,QAAAA,QAAQ,CAACE,SAFN,CADF;AAMTP,QAAAA,MAAM,EAAEN,IAAI,CAACc,YAAL,CACJH,QAAQ,CAACL,MAAT,IAAmB,IAAnB,GAA0BK,QAAQ,CAACL,MAAnC,GAA4C,CADxC,CANC;AASTC,QAAAA,UAAU;AAAE;AAAwBI,QAAAA,QAAQ,CAACI;AATpC,OAAb,CADJ;AAaH;;AAED,WAAOL,SAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIM,EAAAA,WAAW,GAAG;AACV,WAAO;AACHH,MAAAA,SAAS,EAAE,KAAKT,SAAL,CAAeY,WAAf,EADR;AAEHV,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYW,UAAZ,EAFL;AAGHF,MAAAA,UAAU,EAAE,KAAKR;AAHd,KAAP;AAKH;;AAnEyB","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\nexport default class Transfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId | string} props.accountId\n     * @param {number | string | Long | BigNumber | Hbar} props.amount\n     * @param {boolean} props.isApproved\n     */\n    constructor(props) {\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId =\n            props.accountId instanceof AccountId\n                ? props.accountId\n                : AccountId.fromString(props.accountId);\n\n        /**\n         * The amount of tinybars that the account sends(negative) or receives(positive).\n         */\n        this.amount =\n            props.amount instanceof Hbar\n                ? props.amount\n                : new Hbar(props.amount);\n\n        this.isApproved = props.isApproved;\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IAccountAmount[]} accountAmounts\n     * @returns {Transfer[]}\n     */\n    static _fromProtobuf(accountAmounts) {\n        const transfers = [];\n\n        for (const transfer of accountAmounts) {\n            transfers.push(\n                new Transfer({\n                    accountId: AccountId._fromProtobuf(\n                        /** @type {HashgraphProto.proto.IAccountID} */ (\n                            transfer.accountID\n                        )\n                    ),\n                    amount: Hbar.fromTinybars(\n                        transfer.amount != null ? transfer.amount : 0\n                    ),\n                    isApproved: /** @type {boolean} */ (transfer.isApproval),\n                })\n            );\n        }\n\n        return transfers;\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.IAccountAmount}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount.toTinybars(),\n            isApproval: this.isApproved,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}