{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceiptQuery from \"./TransactionReceiptQuery.js\";\nimport TransactionRecordQuery from \"./TransactionRecordQuery.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport * as hex from \"../encoding/hex.js\";\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\n/**\n * @typedef {object} TransactionResponseJSON\n * @property {string} nodeId\n * @property {string} transactionHash\n * @property {string} transactionId\n */\n\nexport default class TransactionResponse {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {AccountId} props.nodeId\n   * @param {Uint8Array} props.transactionHash\n   * @param {TransactionId} props.transactionId\n   */\n  constructor(props) {\n    /** @readonly */\n    this.nodeId = props.nodeId;\n    /** @readonly */\n\n    this.transactionHash = props.transactionHash;\n    /** @readonly */\n\n    this.transactionId = props.transactionId;\n    Object.freeze(this);\n  }\n  /**\n   * @param {TransactionResponseJSON} json\n   * @returns {TransactionResponse}\n   */\n\n\n  static fromJSON(json) {\n    return new TransactionResponse({\n      nodeId: AccountId.fromString(json.nodeId),\n      transactionHash: hex.decode(json.transactionHash),\n      transactionId: TransactionId.fromString(json.transactionId)\n    });\n  }\n  /**\n   * @param {Client} client\n   * @returns {Promise<TransactionReceipt>}\n   */\n\n\n  async getReceipt(client) {\n    const receipt = await this.getReceiptQuery().execute(client);\n\n    if (receipt.status !== Status.Success) {\n      throw new ReceiptStatusError({\n        transactionReceipt: receipt,\n        status: receipt.status,\n        transactionId: this.transactionId\n      });\n    }\n\n    return receipt;\n  }\n  /**\n   * @param {Client} client\n   * @returns {Promise<TransactionRecord>}\n   */\n\n\n  async getRecord(client) {\n    await this.getReceipt(client);\n    return this.getRecordQuery().execute(client);\n  }\n  /**\n   * @param {Signer} signer\n   * @returns {Promise<TransactionReceipt>}\n   */\n\n\n  async getReceiptWithSigner(signer) {\n    const receipt = await this.getReceiptQuery().executeWithSigner(signer);\n\n    if (receipt.status !== Status.Success) {\n      throw new ReceiptStatusError({\n        transactionReceipt: receipt,\n        status: receipt.status,\n        transactionId: this.transactionId\n      });\n    }\n\n    return receipt;\n  }\n  /**\n   * @param {Signer} signer\n   * @returns {Promise<TransactionRecord>}\n   */\n\n\n  async getRecordWithSigner(signer) {\n    await this.getReceiptWithSigner(signer);\n    return this.getRecordQuery().executeWithSigner(signer);\n  }\n  /**\n   * @returns {TransactionReceiptQuery}\n   */\n\n\n  getReceiptQuery() {\n    return new TransactionReceiptQuery().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]);\n  }\n  /**\n   * @returns {TransactionRecordQuery}\n   */\n\n\n  getRecordQuery() {\n    return new TransactionRecordQuery().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]);\n  }\n  /**\n   * @returns {TransactionResponseJSON}\n   */\n\n\n  toJSON() {\n    return {\n      nodeId: this.nodeId.toString(),\n      transactionHash: hex.encode(this.transactionHash),\n      transactionId: this.transactionId.toString()\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/transaction/TransactionResponse.js"],"names":["ReceiptStatusError","Status","TransactionReceiptQuery","TransactionRecordQuery","AccountId","TransactionId","hex","TransactionResponse","constructor","props","nodeId","transactionHash","transactionId","Object","freeze","fromJSON","json","fromString","decode","getReceipt","client","receipt","getReceiptQuery","execute","status","Success","transactionReceipt","getRecord","getRecordQuery","getReceiptWithSigner","signer","executeWithSigner","getRecordWithSigner","setTransactionId","setNodeAccountIds","toJSON","toString","encode","JSON","stringify"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceiptQuery from \"./TransactionReceiptQuery.js\";\nimport TransactionRecordQuery from \"./TransactionRecordQuery.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport * as hex from \"../encoding/hex.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\n/**\n * @typedef {object} TransactionResponseJSON\n * @property {string} nodeId\n * @property {string} transactionHash\n * @property {string} transactionId\n */\n\nexport default class TransactionResponse {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId} props.nodeId\n     * @param {Uint8Array} props.transactionHash\n     * @param {TransactionId} props.transactionId\n     */\n    constructor(props) {\n        /** @readonly */\n        this.nodeId = props.nodeId;\n\n        /** @readonly */\n        this.transactionHash = props.transactionHash;\n\n        /** @readonly */\n        this.transactionId = props.transactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {TransactionResponseJSON} json\n     * @returns {TransactionResponse}\n     */\n    static fromJSON(json) {\n        return new TransactionResponse({\n            nodeId: AccountId.fromString(json.nodeId),\n            transactionHash: hex.decode(json.transactionHash),\n            transactionId: TransactionId.fromString(json.transactionId),\n        });\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionReceipt>}\n     */\n    async getReceipt(client) {\n        const receipt = await this.getReceiptQuery().execute(client);\n\n        if (receipt.status !== Status.Success) {\n            throw new ReceiptStatusError({\n                transactionReceipt: receipt,\n                status: receipt.status,\n                transactionId: this.transactionId,\n            });\n        }\n\n        return receipt;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionRecord>}\n     */\n    async getRecord(client) {\n        await this.getReceipt(client);\n\n        return this.getRecordQuery().execute(client);\n    }\n\n    /**\n     * @param {Signer} signer\n     * @returns {Promise<TransactionReceipt>}\n     */\n    async getReceiptWithSigner(signer) {\n        const receipt = await this.getReceiptQuery().executeWithSigner(signer);\n\n        if (receipt.status !== Status.Success) {\n            throw new ReceiptStatusError({\n                transactionReceipt: receipt,\n                status: receipt.status,\n                transactionId: this.transactionId,\n            });\n        }\n\n        return receipt;\n    }\n\n    /**\n     * @param {Signer} signer\n     * @returns {Promise<TransactionRecord>}\n     */\n    async getRecordWithSigner(signer) {\n        await this.getReceiptWithSigner(signer);\n\n        return this.getRecordQuery().executeWithSigner(signer);\n    }\n\n    /**\n     * @returns {TransactionReceiptQuery}\n     */\n    getReceiptQuery() {\n        return new TransactionReceiptQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId]);\n    }\n\n    /**\n     * @returns {TransactionRecordQuery}\n     */\n    getRecordQuery() {\n        return new TransactionRecordQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId]);\n    }\n\n    /**\n     * @returns {TransactionResponseJSON}\n     */\n    toJSON() {\n        return {\n            nodeId: this.nodeId.toString(),\n            transactionHash: hex.encode(this.transactionHash),\n            transactionId: this.transactionId.toString(),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}