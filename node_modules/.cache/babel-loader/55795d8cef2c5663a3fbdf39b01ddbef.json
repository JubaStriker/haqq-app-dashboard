{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Long from \"long\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.INftTransfer} HashgraphProto.proto.INftTransfer\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {object} NftTransfer\n * @property {AccountId} sender\n * @property {AccountId} recipient\n * @property {Long} serial\n * @property {boolean} isApproved\n */\n\n/**\n * @augments {ObjectMap<TokenId, NftTransfer[]>}\n */\n\nexport default class TokenNftTransferMap extends ObjectMap {\n  constructor() {\n    super(s => TokenId.fromString(s));\n  }\n  /**\n   * @internal\n   * @param {TokenId} tokenId\n   * @param {NftTransfer} nftTransfer\n   */\n\n\n  __set(tokenId, nftTransfer) {\n    const token = tokenId.toString();\n\n    let _map = this._map.get(token);\n\n    if (_map == null) {\n      _map = [];\n\n      this._map.set(token, _map);\n\n      this.__map.set(tokenId, _map);\n    }\n\n    _map.push(nftTransfer);\n  }\n  /**\n   * @param {HashgraphProto.proto.ITokenTransferList[]} transfers\n   * @returns {TokenNftTransferMap}\n   */\n\n\n  static _fromProtobuf(transfers) {\n    const tokenTransfersMap = new TokenNftTransferMap();\n\n    for (const transfer of transfers) {\n      const token = TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      transfer.token);\n\n      for (const aa of transfer.nftTransfers != null ? transfer.nftTransfers : []) {\n        const sender = AccountId._fromProtobuf(\n        /** @type {HashgraphProto.proto.IAccountID} */\n        aa.senderAccountID);\n\n        const recipient = AccountId._fromProtobuf(\n        /** @type {HashgraphProto.proto.IAccountID} */\n        aa.receiverAccountID);\n\n        tokenTransfersMap.__set(token, {\n          sender,\n          recipient,\n          serial: Long.fromValue(\n          /** @type {Long} */\n          aa.serialNumber),\n          isApproved: false\n        });\n      }\n    }\n\n    return tokenTransfersMap;\n  }\n  /**\n   * @returns {HashgraphProto.proto.ITokenTransferList[]}\n   */\n\n\n  _toProtobuf() {\n    /** @type {HashgraphProto.proto.ITokenTransferList[]} */\n    const tokenTransferList = [];\n\n    for (const [tokenId, value] of this) {\n      /** @type {HashgraphProto.proto.INftTransfer[]} */\n      const transfers = [];\n\n      for (const transfer of value) {\n        transfers.push({\n          senderAccountID: transfer.sender._toProtobuf(),\n          receiverAccountID: transfer.recipient._toProtobuf(),\n          serialNumber: transfer.serial\n        });\n      }\n\n      tokenTransferList.push({\n        token: tokenId._toProtobuf(),\n        nftTransfers: transfers\n      });\n    }\n\n    return tokenTransferList;\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/TokenNftTransferMap.js"],"names":["Long","TokenId","AccountId","ObjectMap","TokenNftTransferMap","constructor","s","fromString","__set","tokenId","nftTransfer","token","toString","_map","get","set","__map","push","_fromProtobuf","transfers","tokenTransfersMap","transfer","aa","nftTransfers","sender","senderAccountID","recipient","receiverAccountID","serial","fromValue","serialNumber","isApproved","_toProtobuf","tokenTransferList","value"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Long from \"long\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HashgraphProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.INftTransfer} HashgraphProto.proto.INftTransfer\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HashgraphProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {object} NftTransfer\n * @property {AccountId} sender\n * @property {AccountId} recipient\n * @property {Long} serial\n * @property {boolean} isApproved\n */\n\n/**\n * @augments {ObjectMap<TokenId, NftTransfer[]>}\n */\nexport default class TokenNftTransferMap extends ObjectMap {\n    constructor() {\n        super((s) => TokenId.fromString(s));\n    }\n\n    /**\n     * @internal\n     * @param {TokenId} tokenId\n     * @param {NftTransfer} nftTransfer\n     */\n    __set(tokenId, nftTransfer) {\n        const token = tokenId.toString();\n\n        let _map = this._map.get(token);\n        if (_map == null) {\n            _map = [];\n            this._map.set(token, _map);\n            this.__map.set(tokenId, _map);\n        }\n\n        _map.push(nftTransfer);\n    }\n\n    /**\n     * @param {HashgraphProto.proto.ITokenTransferList[]} transfers\n     * @returns {TokenNftTransferMap}\n     */\n    static _fromProtobuf(transfers) {\n        const tokenTransfersMap = new TokenNftTransferMap();\n\n        for (const transfer of transfers) {\n            const token = TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (transfer.token)\n            );\n\n            for (const aa of transfer.nftTransfers != null\n                ? transfer.nftTransfers\n                : []) {\n                const sender = AccountId._fromProtobuf(\n                    /** @type {HashgraphProto.proto.IAccountID} */ (\n                        aa.senderAccountID\n                    )\n                );\n                const recipient = AccountId._fromProtobuf(\n                    /** @type {HashgraphProto.proto.IAccountID} */ (\n                        aa.receiverAccountID\n                    )\n                );\n\n                tokenTransfersMap.__set(token, {\n                    sender,\n                    recipient,\n                    serial: Long.fromValue(\n                        /** @type {Long} */ (aa.serialNumber)\n                    ),\n                    isApproved: false,\n                });\n            }\n        }\n\n        return tokenTransfersMap;\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.ITokenTransferList[]}\n     */\n    _toProtobuf() {\n        /** @type {HashgraphProto.proto.ITokenTransferList[]} */\n        const tokenTransferList = [];\n\n        for (const [tokenId, value] of this) {\n            /** @type {HashgraphProto.proto.INftTransfer[]} */\n            const transfers = [];\n\n            for (const transfer of value) {\n                transfers.push({\n                    senderAccountID: transfer.sender._toProtobuf(),\n                    receiverAccountID: transfer.recipient._toProtobuf(),\n                    serialNumber: transfer.serial,\n                });\n            }\n\n            tokenTransferList.push({\n                token: tokenId._toProtobuf(),\n                nftTransfers: transfers,\n            });\n        }\n\n        return tokenTransferList;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}