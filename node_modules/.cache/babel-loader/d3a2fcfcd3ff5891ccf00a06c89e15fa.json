{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedTokenAllowance} HashgraphProto.proto.IGrantedTokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenAllowance} HashgraphProto.proto.ITokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\nexport default class TokenAllowance {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {TokenId} props.tokenId\n   * @param {AccountId | null} props.spenderAccountId\n   * @param {AccountId | null} props.ownerAccountId\n   * @param {Long | null} props.amount\n   */\n  constructor(props) {\n    /**\n     * The token that the allowance pertains to.\n     *\n     * @readonly\n     */\n    this.tokenId = props.tokenId;\n    /**\n     * The account ID of the spender of the hbar allowance.\n     *\n     * @readonly\n     */\n\n    this.spenderAccountId = props.spenderAccountId;\n    /**\n     * The account ID of the owner of the hbar allowance.\n     *\n     * @readonly\n     */\n\n    this.ownerAccountId = props.ownerAccountId;\n    /**\n     * The current balance of the spender's token allowance.\n     * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n     * (currently owned and any in the future).\n     *\n     * @readonly\n     */\n\n    this.amount = props.amount;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITokenAllowance} allowance\n   * @returns {TokenAllowance}\n   */\n\n\n  static _fromProtobuf(allowance) {\n    return new TokenAllowance({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      allowance.tokenId),\n      spenderAccountId: AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      allowance.spender),\n      ownerAccountId: allowance.owner != null ? AccountId._fromProtobuf(\n      /**@type {HashgraphProto.proto.IAccountID}*/\n      allowance.owner) : null,\n      amount: allowance.amount != null ? Long.fromValue(\n      /** @type {Long} */\n      allowance.amount) : null\n    });\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IGrantedTokenAllowance} allowance\n   * @param {AccountId} ownerAccountId\n   * @returns {TokenAllowance}\n   */\n\n\n  static _fromGrantedProtobuf(allowance, ownerAccountId) {\n    return new TokenAllowance({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITokenID} */\n      allowance.tokenId),\n      spenderAccountId: AccountId._fromProtobuf(\n      /** @type {HashgraphProto.proto.IAccountID} */\n      allowance.spender),\n      ownerAccountId,\n      amount: allowance.amount != null ? Long.fromValue(\n      /** @type {Long} */\n      allowance.amount) : null\n    });\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.ITokenAllowance}\n   */\n\n\n  _toProtobuf() {\n    return {\n      tokenId: this.tokenId._toProtobuf(),\n      spender: this.spenderAccountId != null ? this.spenderAccountId._toProtobuf() : null,\n      owner: this.ownerAccountId != null ? this.ownerAccountId._toProtobuf() : null,\n      amount: this.amount\n    };\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    this.tokenId.validateChecksum(client);\n\n    if (this.ownerAccountId != null) {\n      this.ownerAccountId.validateChecksum(client);\n    }\n\n    if (this.spenderAccountId != null) {\n      this.spenderAccountId.validateChecksum(client);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/TokenAllowance.js"],"names":["TokenId","AccountId","Long","TokenAllowance","constructor","props","tokenId","spenderAccountId","ownerAccountId","amount","Object","freeze","_fromProtobuf","allowance","spender","owner","fromValue","_fromGrantedProtobuf","_toProtobuf","_validateChecksums","client","validateChecksum"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedTokenAllowance} HashgraphProto.proto.IGrantedTokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenAllowance} HashgraphProto.proto.ITokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HashgraphProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\nexport default class TokenAllowance {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {AccountId | null} props.spenderAccountId\n     * @param {AccountId | null} props.ownerAccountId\n     * @param {Long | null} props.amount\n     */\n    constructor(props) {\n        /**\n         * The token that the allowance pertains to.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The account ID of the spender of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.spenderAccountId = props.spenderAccountId;\n\n        /**\n         * The account ID of the owner of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.ownerAccountId = props.ownerAccountId;\n\n        /**\n         * The current balance of the spender's token allowance.\n         * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n         * (currently owned and any in the future).\n         *\n         * @readonly\n         */\n        this.amount = props.amount;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITokenAllowance} allowance\n     * @returns {TokenAllowance}\n     */\n    static _fromProtobuf(allowance) {\n        return new TokenAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (allowance.tokenId)\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IAccountID} */ (\n                    allowance.spender\n                )\n            ),\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HashgraphProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          )\n                      )\n                    : null,\n            amount:\n                allowance.amount != null\n                    ? Long.fromValue(/** @type {Long} */ (allowance.amount))\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IGrantedTokenAllowance} allowance\n     * @param {AccountId} ownerAccountId\n     * @returns {TokenAllowance}\n     */\n    static _fromGrantedProtobuf(allowance, ownerAccountId) {\n        return new TokenAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITokenID} */ (allowance.tokenId)\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HashgraphProto.proto.IAccountID} */ (\n                    allowance.spender\n                )\n            ),\n            ownerAccountId,\n            amount:\n                allowance.amount != null\n                    ? Long.fromValue(/** @type {Long} */ (allowance.amount))\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.ITokenAllowance}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            spender:\n                this.spenderAccountId != null\n                    ? this.spenderAccountId._toProtobuf()\n                    : null,\n            owner:\n                this.ownerAccountId != null\n                    ? this.ownerAccountId._toProtobuf()\n                    : null,\n            amount: this.amount,\n        };\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this.tokenId.validateChecksum(client);\n\n        if (this.ownerAccountId != null) {\n            this.ownerAccountId.validateChecksum(client);\n        }\n\n        if (this.spenderAccountId != null) {\n            this.spenderAccountId.validateChecksum(client);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}