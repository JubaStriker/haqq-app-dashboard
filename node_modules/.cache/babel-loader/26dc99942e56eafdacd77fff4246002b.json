{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Returns a deeply merged object with properties from the 2 provided objects\n * @remarks - Only deeply merge objects. The second argument overrides the\n * first if it is provided as `null`, `undefined` or an array.\n * @public\n * */\n\nfunction mergeProps(obj, newObj) {\n  if (newObj == null) {\n    return newObj;\n  } // If setting to a different prototype or a non-object or non-array, don't merge any props\n\n\n  if (typeof obj === 'undefined' || !Object.prototype.isPrototypeOf.call(Object.getPrototypeOf(obj), newObj) || newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array') {\n    return newObj;\n  }\n\n  var clone = {};\n  Object.keys(newObj).forEach(function (key) {\n    var exists = Object.prototype.hasOwnProperty.call(obj, key);\n\n    if (!exists) {\n      clone[key] = newObj[key];\n    } else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n      clone[key] = mergeProps(obj[key], newObj[key]);\n    } else {\n      clone[key] = newObj[key];\n    }\n  }); // Copy old props that are not present in new object only if this is a simple object\n\n  Object.keys(obj).forEach(function (key) {\n    var exists = Object.prototype.hasOwnProperty.call(newObj, key);\n\n    if (!exists) {\n      clone[key] = obj[key];\n    }\n  }); // Set prototype of cloned object to match original\n\n  Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));\n  return clone;\n}\n\nexports.default = mergeProps;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/@shopify/app-bridge/actions/merge.js"],"names":["Object","defineProperty","exports","value","mergeProps","obj","newObj","prototype","isPrototypeOf","call","getPrototypeOf","constructor","name","clone","keys","forEach","key","exists","hasOwnProperty","Array","isArray","setPrototypeOf","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AAC7B,MAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,WAAOA,MAAP;AACH,GAH4B,CAI7B;;;AACA,MAAI,OAAOD,GAAP,KAAe,WAAf,IACA,CAACL,MAAM,CAACO,SAAP,CAAiBC,aAAjB,CAA+BC,IAA/B,CAAoCT,MAAM,CAACU,cAAP,CAAsBL,GAAtB,CAApC,EAAgEC,MAAhE,CADD,IAECA,MAAM,CAACK,WAAP,CAAmBC,IAAnB,KAA4B,QAA5B,IAAwCN,MAAM,CAACK,WAAP,CAAmBC,IAAnB,KAA4B,OAFzE,EAEmF;AAC/E,WAAON,MAAP;AACH;;AACD,MAAIO,KAAK,GAAG,EAAZ;AACAb,EAAAA,MAAM,CAACc,IAAP,CAAYR,MAAZ,EAAoBS,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACvC,QAAIC,MAAM,GAAGjB,MAAM,CAACO,SAAP,CAAiBW,cAAjB,CAAgCT,IAAhC,CAAqCJ,GAArC,EAA0CW,GAA1C,CAAb;;AACA,QAAI,CAACC,MAAL,EAAa;AACTJ,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaV,MAAM,CAACU,GAAD,CAAnB;AACH,KAFD,MAGK,IAAI,OAAOX,GAAG,CAACW,GAAD,CAAV,KAAoB,QAApB,IAAgC,CAACG,KAAK,CAACC,OAAN,CAAcf,GAAG,CAACW,GAAD,CAAjB,CAArC,EAA8D;AAC/DH,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaZ,UAAU,CAACC,GAAG,CAACW,GAAD,CAAJ,EAAWV,MAAM,CAACU,GAAD,CAAjB,CAAvB;AACH,KAFI,MAGA;AACDH,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaV,MAAM,CAACU,GAAD,CAAnB;AACH;AACJ,GAXD,EAX6B,CAuB7B;;AACAhB,EAAAA,MAAM,CAACc,IAAP,CAAYT,GAAZ,EAAiBU,OAAjB,CAAyB,UAAUC,GAAV,EAAe;AACpC,QAAIC,MAAM,GAAGjB,MAAM,CAACO,SAAP,CAAiBW,cAAjB,CAAgCT,IAAhC,CAAqCH,MAArC,EAA6CU,GAA7C,CAAb;;AACA,QAAI,CAACC,MAAL,EAAa;AACTJ,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaX,GAAG,CAACW,GAAD,CAAhB;AACH;AACJ,GALD,EAxB6B,CA8B7B;;AACAhB,EAAAA,MAAM,CAACqB,cAAP,CAAsBR,KAAtB,EAA6Bb,MAAM,CAACU,cAAP,CAAsBL,GAAtB,CAA7B;AACA,SAAOQ,KAAP;AACH;;AACDX,OAAO,CAACoB,OAAR,GAAkBlB,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a deeply merged object with properties from the 2 provided objects\n * @remarks - Only deeply merge objects. The second argument overrides the\n * first if it is provided as `null`, `undefined` or an array.\n * @public\n * */\nfunction mergeProps(obj, newObj) {\n    if (newObj == null) {\n        return newObj;\n    }\n    // If setting to a different prototype or a non-object or non-array, don't merge any props\n    if (typeof obj === 'undefined' ||\n        !Object.prototype.isPrototypeOf.call(Object.getPrototypeOf(obj), newObj) ||\n        (newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array')) {\n        return newObj;\n    }\n    var clone = {};\n    Object.keys(newObj).forEach(function (key) {\n        var exists = Object.prototype.hasOwnProperty.call(obj, key);\n        if (!exists) {\n            clone[key] = newObj[key];\n        }\n        else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n            clone[key] = mergeProps(obj[key], newObj[key]);\n        }\n        else {\n            clone[key] = newObj[key];\n        }\n    });\n    // Copy old props that are not present in new object only if this is a simple object\n    Object.keys(obj).forEach(function (key) {\n        var exists = Object.prototype.hasOwnProperty.call(newObj, key);\n        if (!exists) {\n            clone[key] = obj[key];\n        }\n    });\n    // Set prototype of cloned object to match original\n    Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));\n    return clone;\n}\nexports.default = mergeProps;\n"]},"metadata":{},"sourceType":"script"}