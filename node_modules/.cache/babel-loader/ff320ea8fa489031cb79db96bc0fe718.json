{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateUuid = void 0;\n/**\n * Convert a number or array of integers to a string of padded hex octets.\n */\n\nfunction asHex(value) {\n  return Array.from(value).map(function (i) {\n    return (\"00\" + i.toString(16)).slice(-2);\n  }).join('');\n}\n/**\n * Attempt to securely generate random bytes/\n */\n\n\nfunction getRandomBytes(size) {\n  // SPRNG\n  if (typeof Uint8Array === 'function' && typeof window === 'object' && window.crypto) {\n    var buffer = new Uint8Array(size);\n    var randomValues = window.crypto.getRandomValues(buffer);\n\n    if (randomValues) {\n      return randomValues;\n    }\n  } // Insecure random\n\n\n  return Array.from(new Array(size), function () {\n    return Math.random() * 255 | 0;\n  });\n}\n/**\n * Generate a RFC4122-compliant v4 UUID.\n *\n * @see http://www.ietf.org/rfc/rfc4122.txt\n */\n\n\nfunction generateUuid() {\n  var version = 64;\n  var clockSeqHiAndReserved = getRandomBytes(1);\n  var timeHiAndVersion = getRandomBytes(2);\n  clockSeqHiAndReserved[0] &= 63 | 128; // tslint:disable-next-line:binary-expression-operand-order\n\n  timeHiAndVersion[0] &= 15 | version;\n  return [// time-low\n  asHex(getRandomBytes(4)), '-', // time-mid\n  asHex(getRandomBytes(2)), '-', // time-high-and-version\n  asHex(timeHiAndVersion), '-', // clock-seq-and-reserved\n  asHex(clockSeqHiAndReserved), // clock-seq-loq\n  asHex(getRandomBytes(1)), '-', // node\n  asHex(getRandomBytes(6))].join('');\n}\n\nexports.generateUuid = generateUuid; // Default\n\nexports.default = generateUuid;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/xrp-shopify-coupon-client/node_modules/@shopify/app-bridge/actions/uuid.js"],"names":["Object","defineProperty","exports","value","generateUuid","asHex","Array","from","map","i","toString","slice","join","getRandomBytes","size","Uint8Array","window","crypto","buffer","randomValues","getRandomValues","Math","random","version","clockSeqHiAndReserved","timeHiAndVersion","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeF,KAAf,EAAsB;AAClB,SAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAX,EACFK,GADE,CACE,UAAUC,CAAV,EAAa;AAAE,WAAO,CAAC,OAAOA,CAAC,CAACC,QAAF,CAAW,EAAX,CAAR,EAAwBC,KAAxB,CAA8B,CAAC,CAA/B,CAAP;AAA2C,GAD5D,EAEFC,IAFE,CAEG,EAFH,CAAP;AAGH;AACD;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B;AACA,MAAI,OAAOC,UAAP,KAAsB,UAAtB,IAAoC,OAAOC,MAAP,KAAkB,QAAtD,IAAkEA,MAAM,CAACC,MAA7E,EAAqF;AACjF,QAAIC,MAAM,GAAG,IAAIH,UAAJ,CAAeD,IAAf,CAAb;AACA,QAAIK,YAAY,GAAGH,MAAM,CAACC,MAAP,CAAcG,eAAd,CAA8BF,MAA9B,CAAnB;;AACA,QAAIC,YAAJ,EAAkB;AACd,aAAOA,YAAP;AACH;AACJ,GARyB,CAS1B;;;AACA,SAAOb,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUQ,IAAV,CAAX,EAA4B,YAAY;AAAE,WAAQO,IAAI,CAACC,MAAL,KAAgB,GAAjB,GAAwB,CAA/B;AAAmC,GAA7E,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASlB,YAAT,GAAwB;AACpB,MAAImB,OAAO,GAAG,EAAd;AACA,MAAIC,qBAAqB,GAAGX,cAAc,CAAC,CAAD,CAA1C;AACA,MAAIY,gBAAgB,GAAGZ,cAAc,CAAC,CAAD,CAArC;AACAW,EAAAA,qBAAqB,CAAC,CAAD,CAArB,IAA4B,KAAK,GAAjC,CAJoB,CAKpB;;AACAC,EAAAA,gBAAgB,CAAC,CAAD,CAAhB,IAAuB,KAAKF,OAA5B;AACA,SAAO,CACH;AACAlB,EAAAA,KAAK,CAACQ,cAAc,CAAC,CAAD,CAAf,CAFF,EAGH,GAHG,EAIH;AACAR,EAAAA,KAAK,CAACQ,cAAc,CAAC,CAAD,CAAf,CALF,EAMH,GANG,EAOH;AACAR,EAAAA,KAAK,CAACoB,gBAAD,CARF,EASH,GATG,EAUH;AACApB,EAAAA,KAAK,CAACmB,qBAAD,CAXF,EAYH;AACAnB,EAAAA,KAAK,CAACQ,cAAc,CAAC,CAAD,CAAf,CAbF,EAcH,GAdG,EAeH;AACAR,EAAAA,KAAK,CAACQ,cAAc,CAAC,CAAD,CAAf,CAhBF,EAiBLD,IAjBK,CAiBA,EAjBA,CAAP;AAkBH;;AACDV,OAAO,CAACE,YAAR,GAAuBA,YAAvB,C,CACA;;AACAF,OAAO,CAACwB,OAAR,GAAkBtB,YAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateUuid = void 0;\n/**\n * Convert a number or array of integers to a string of padded hex octets.\n */\nfunction asHex(value) {\n    return Array.from(value)\n        .map(function (i) { return (\"00\" + i.toString(16)).slice(-2); })\n        .join('');\n}\n/**\n * Attempt to securely generate random bytes/\n */\nfunction getRandomBytes(size) {\n    // SPRNG\n    if (typeof Uint8Array === 'function' && typeof window === 'object' && window.crypto) {\n        var buffer = new Uint8Array(size);\n        var randomValues = window.crypto.getRandomValues(buffer);\n        if (randomValues) {\n            return randomValues;\n        }\n    }\n    // Insecure random\n    return Array.from(new Array(size), function () { return (Math.random() * 255) | 0; });\n}\n/**\n * Generate a RFC4122-compliant v4 UUID.\n *\n * @see http://www.ietf.org/rfc/rfc4122.txt\n */\nfunction generateUuid() {\n    var version = 64;\n    var clockSeqHiAndReserved = getRandomBytes(1);\n    var timeHiAndVersion = getRandomBytes(2);\n    clockSeqHiAndReserved[0] &= 63 | 128;\n    // tslint:disable-next-line:binary-expression-operand-order\n    timeHiAndVersion[0] &= 15 | version;\n    return [\n        // time-low\n        asHex(getRandomBytes(4)),\n        '-',\n        // time-mid\n        asHex(getRandomBytes(2)),\n        '-',\n        // time-high-and-version\n        asHex(timeHiAndVersion),\n        '-',\n        // clock-seq-and-reserved\n        asHex(clockSeqHiAndReserved),\n        // clock-seq-loq\n        asHex(getRandomBytes(1)),\n        '-',\n        // node\n        asHex(getRandomBytes(6)),\n    ].join('');\n}\nexports.generateUuid = generateUuid;\n// Default\nexports.default = generateUuid;\n"]},"metadata":{},"sourceType":"script"}