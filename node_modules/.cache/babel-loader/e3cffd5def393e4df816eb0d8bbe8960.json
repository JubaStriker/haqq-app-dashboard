{"ast":null,"code":"const base58 = require('./crypto/base58'); // simple base58 validator.  Just checks if it can be decoded.\n\n\nmodule.exports = {\n  isValidAddress: function (address, currency) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    try {\n      if (!address || address.length == 0) {\n        return false;\n      }\n\n      if (currency.minLength && address.length < currency.minLength) {\n        return false;\n      }\n\n      if (currency.maxLength && address.length > currency.maxLength) {\n        return false;\n      }\n\n      try {\n        const decoded = base58.decode(address);\n\n        if (!decoded || !decoded.length) {\n          return false;\n        }\n      } catch (e) {\n        // if decoding fails, assume invalid address\n        return false;\n      }\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/multicoin-address-validator/src/base58_validator.js"],"names":["base58","require","module","exports","isValidAddress","address","currency","opts","length","minLength","maxLength","decoded","decode","e"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmBC,QAAnB,EAAwC;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AACpD,QAAI;AACA,UAAI,CAACF,OAAD,IAAYA,OAAO,CAACG,MAAR,IAAkB,CAAlC,EAAqC;AACjC,eAAO,KAAP;AACH;;AAED,UAAIF,QAAQ,CAACG,SAAT,IAAuBJ,OAAO,CAACG,MAAR,GAAiBF,QAAQ,CAACG,SAArD,EAAiE;AAC7D,eAAO,KAAP;AACH;;AAED,UAAIH,QAAQ,CAACI,SAAT,IAAuBL,OAAO,CAACG,MAAR,GAAiBF,QAAQ,CAACI,SAArD,EAAiE;AAC7D,eAAO,KAAP;AACH;;AACD,UAAI;AACA,cAAMC,OAAO,GAAGX,MAAM,CAACY,MAAP,CAAcP,OAAd,CAAhB;;AACA,YAAI,CAACM,OAAD,IAAY,CAACA,OAAO,CAACH,MAAzB,EAAiC;AAC7B,iBAAO,KAAP;AACH;AACJ,OALD,CAKE,OAAOK,CAAP,EAAU;AACR;AACA,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KAtBD,CAsBE,OAAOA,CAAP,EAAU;AACR,aAAO,KAAP;AACH;AACJ;AA3BY,CAAjB","sourcesContent":["const base58 = require('./crypto/base58');\n\n// simple base58 validator.  Just checks if it can be decoded.\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        try {\n            if (!address || address.length == 0) {\n                return false;\n            }\n\n            if (currency.minLength && (address.length < currency.minLength)) {\n                return false;\n            }\n\n            if (currency.maxLength && (address.length > currency.maxLength)) {\n                return false;\n            }\n            try {\n                const decoded = base58.decode(address);\n                if (!decoded || !decoded.length) {\n                    return false;\n                }\n            } catch (e) {\n                // if decoding fails, assume invalid address\n                return false;\n            }\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}