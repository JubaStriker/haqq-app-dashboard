{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport * as hex from \"./encoding/hex.js\";\n/**\n * Represents the ID of a network.\n */\n\nexport default class LedgerId {\n  /**\n   * @hideconstructor\n   * @internal\n   * @param {Uint8Array} ledgerId\n   */\n  constructor(ledgerId) {\n    /**\n     * @readonly\n     * @type {Uint8Array}\n     */\n    this._ledgerId = ledgerId;\n    Object.freeze(this);\n  }\n  /**\n   * @param {string} ledgerId\n   * @returns {LedgerId}\n   */\n\n\n  static fromString(ledgerId) {\n    switch (ledgerId) {\n      case NETNAMES[0]:\n      case \"0\":\n        return LedgerId.MAINNET;\n\n      case NETNAMES[1]:\n      case \"1\":\n        return LedgerId.TESTNET;\n\n      case NETNAMES[2]:\n      case \"2\":\n        return LedgerId.PREVIEWNET;\n\n      case NETNAMES[3]:\n      case \"3\":\n        return LedgerId.LOCAL_NODE;\n\n      default:\n        {\n          let ledgerIdDecoded = hex.decode(ledgerId);\n\n          if (ledgerIdDecoded.length == 0 && ledgerId.length != 0) {\n            throw new Error(\"Default reached for fromString\");\n          } else {\n            return new LedgerId(ledgerIdDecoded);\n          }\n        }\n    }\n  }\n  /**\n   * If the ledger ID is a known value such as `[0]`, `[1]`, `[2]` this method\n   * will instead return \"mainnet\", \"testnet\", or \"previewnet\", otherwise it will\n   * hex encode the bytes.\n   *\n   * @returns {string}\n   */\n\n\n  toString() {\n    if (this._ledgerId.length == 1) {\n      switch (this._ledgerId[0]) {\n        case 0:\n          return NETNAMES[0];\n\n        case 1:\n          return NETNAMES[1];\n\n        case 2:\n          return NETNAMES[2];\n\n        case 3:\n          return NETNAMES[3];\n\n        default:\n          return hex.encode(this._ledgerId);\n      }\n    } else {\n      return hex.encode(this._ledgerId);\n    }\n  }\n  /**\n   * Using the UTF-8 byte representation of \"mainnet\", \"testnet\",\n   * or \"previewnet\" is NOT supported.\n   *\n   * @param {Uint8Array} bytes\n   * @returns {LedgerId}\n   */\n\n\n  static fromBytes(bytes) {\n    return new LedgerId(bytes);\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return this._ledgerId;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isMainnet() {\n    return this.toString() == NETNAMES[0];\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isTestnet() {\n    return this.toString() == NETNAMES[1];\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isPreviewnet() {\n    return this.toString() == NETNAMES[2];\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isLocalNode() {\n    return this.toString() == NETNAMES[3];\n  }\n\n}\nconst NETNAMES = [\"mainnet\", \"testnet\", \"previewnet\", \"local-node\"];\nLedgerId.MAINNET = new LedgerId(new Uint8Array([0]));\nLedgerId.TESTNET = new LedgerId(new Uint8Array([1]));\nLedgerId.PREVIEWNET = new LedgerId(new Uint8Array([2]));\nLedgerId.LOCAL_NODE = new LedgerId(new Uint8Array([3]));","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/LedgerId.js"],"names":["hex","LedgerId","constructor","ledgerId","_ledgerId","Object","freeze","fromString","NETNAMES","MAINNET","TESTNET","PREVIEWNET","LOCAL_NODE","ledgerIdDecoded","decode","length","Error","toString","encode","fromBytes","bytes","toBytes","isMainnet","isTestnet","isPreviewnet","isLocalNode","Uint8Array"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * Represents the ID of a network.\n */\nexport default class LedgerId {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {Uint8Array} ledgerId\n     */\n    constructor(ledgerId) {\n        /**\n         * @readonly\n         * @type {Uint8Array}\n         */\n        this._ledgerId = ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} ledgerId\n     * @returns {LedgerId}\n     */\n    static fromString(ledgerId) {\n        switch (ledgerId) {\n            case NETNAMES[0]:\n            case \"0\":\n                return LedgerId.MAINNET;\n            case NETNAMES[1]:\n            case \"1\":\n                return LedgerId.TESTNET;\n            case NETNAMES[2]:\n            case \"2\":\n                return LedgerId.PREVIEWNET;\n            case NETNAMES[3]:\n            case \"3\":\n                return LedgerId.LOCAL_NODE;\n            default: {\n                let ledgerIdDecoded = hex.decode(ledgerId);\n                if (ledgerIdDecoded.length == 0 && ledgerId.length != 0) {\n                    throw new Error(\"Default reached for fromString\");\n                } else {\n                    return new LedgerId(ledgerIdDecoded);\n                }\n            }\n        }\n    }\n\n    /**\n     * If the ledger ID is a known value such as `[0]`, `[1]`, `[2]` this method\n     * will instead return \"mainnet\", \"testnet\", or \"previewnet\", otherwise it will\n     * hex encode the bytes.\n     *\n     * @returns {string}\n     */\n    toString() {\n        if (this._ledgerId.length == 1) {\n            switch (this._ledgerId[0]) {\n                case 0:\n                    return NETNAMES[0];\n                case 1:\n                    return NETNAMES[1];\n                case 2:\n                    return NETNAMES[2];\n                case 3:\n                    return NETNAMES[3];\n                default:\n                    return hex.encode(this._ledgerId);\n            }\n        } else {\n            return hex.encode(this._ledgerId);\n        }\n    }\n\n    /**\n     * Using the UTF-8 byte representation of \"mainnet\", \"testnet\",\n     * or \"previewnet\" is NOT supported.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {LedgerId}\n     */\n    static fromBytes(bytes) {\n        return new LedgerId(bytes);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return this._ledgerId;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isMainnet() {\n        return this.toString() == NETNAMES[0];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTestnet() {\n        return this.toString() == NETNAMES[1];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isPreviewnet() {\n        return this.toString() == NETNAMES[2];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLocalNode() {\n        return this.toString() == NETNAMES[3];\n    }\n}\n\nconst NETNAMES = [\"mainnet\", \"testnet\", \"previewnet\", \"local-node\"];\n\nLedgerId.MAINNET = new LedgerId(new Uint8Array([0]));\n\nLedgerId.TESTNET = new LedgerId(new Uint8Array([1]));\n\nLedgerId.PREVIEWNET = new LedgerId(new Uint8Array([2]));\n\nLedgerId.LOCAL_NODE = new LedgerId(new Uint8Array([3]));\n"]},"metadata":{},"sourceType":"module"}