{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Hbar from \"./Hbar.js\";\nimport FileId from \"./file/FileId.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"./transaction/Transaction.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./Timestamp.js\").default} Timestamp\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * Create a new Hedera™ transaction wrapped ethereum transaction.\n */\n\nexport default class EthereumTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Uint8Array} [props.ethereumData]\n   * @param {FileId} [props.callData]\n   * @param {FileId} [props.callDataFileId]\n   * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Uint8Array}\n     */\n\n    this._ethereumData = null;\n    /**\n     * @private\n     * @type {?FileId}\n     */\n\n    this._callDataFileId = null;\n    /**\n     * @private\n     * @type {?Hbar}\n     */\n\n    this._maxGasAllowance = null;\n\n    if (props.ethereumData != null) {\n      this.setEthereumData(props.ethereumData);\n    }\n\n    if (props.callData != null) {\n      this.setCallDataFileId(props.callData);\n    }\n\n    if (props.callDataFileId != null) {\n      this.setCallDataFileId(props.callDataFileId);\n    }\n\n    if (props.maxGasAllowance != null) {\n      this.setMaxGasAllowanceHbar(props.maxGasAllowance);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransaction[]} transactions\n   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n   * @returns {EthereumTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const transaction =\n    /** @type {HashgraphProto.proto.IEthereumTransactionBody} */\n    body.ethereumTransaction;\n    return Transaction._fromProtobufTransactions(new EthereumTransaction({\n      ethereumData: transaction.ethereumData != null ? transaction.ethereumData : undefined,\n      callData: transaction.callData != null ? FileId._fromProtobuf(transaction.callData) : undefined,\n      maxGasAllowance: transaction.maxGasAllowance != null ? Hbar.fromTinybars(transaction.maxGasAllowance) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?(Uint8Array | FileId)}\n   */\n\n\n  get ethereumData() {\n    return this._ethereumData;\n  }\n  /**\n   * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete\n   * unless the callData field is set.\n   *\n   * @param {Uint8Array} ethereumData\n   * @returns {this}\n   */\n\n\n  setEthereumData(ethereumData) {\n    this._requireNotFrozen();\n\n    this._ethereumData = ethereumData;\n    return this;\n  }\n  /**\n   * @deprecated - Use `callDataFileId` instead\n   * @returns {?FileId}\n   */\n\n\n  get callData() {\n    return this.callDataFileId;\n  }\n  /**\n   * @deprecated - Use `setCallDataFileId()` instead\n   *\n   * For large transactions (for example contract create) this is the callData\n   * of the callData. The data in the callData will be re-written with\n   * the callData element as a zero length string with the original contents in\n   * the referenced file at time of execution. The callData will need to be\n   * \"rehydrated\" with the callData for signature validation to pass.\n   * @param {FileId} callDataFileId\n   * @returns {this}\n   */\n\n\n  setCallData(callDataFileId) {\n    return this.setCallDataFileId(callDataFileId);\n  }\n  /**\n   * @returns {?FileId}\n   */\n\n\n  get callDataFileId() {\n    return this._callDataFileId;\n  }\n  /**\n   * For large transactions (for example contract create) this is the callData\n   * of the callData. The data in the callData will be re-written with\n   * the callData element as a zero length string with the original contents in\n   * the referenced file at time of execution. The callData will need to be\n   * \"rehydrated\" with the callData for signature validation to pass.\n   *\n   * @param {FileId} callDataFileId\n   * @returns {this}\n   */\n\n\n  setCallDataFileId(callDataFileId) {\n    this._requireNotFrozen();\n\n    this._callDataFileId = callDataFileId;\n    return this;\n  }\n  /**\n   * @returns {?Hbar}\n   */\n\n\n  get maxGasAllowance() {\n    return this._maxGasAllowance;\n  }\n  /**\n   * @deprecated -- use setMaxGasAllowanceHbar instead\n   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n   * @returns {this}\n   */\n\n\n  setMaxGasAllowance(maxGasAllowance) {\n    return this.setMaxGasAllowanceHbar(maxGasAllowance);\n  }\n  /**\n   * The maximum amount, in tinybars, that the payer of the hedera transaction\n   * is willing to pay to complete the transaction.\n   *\n   * Ordinarily the account with the ECDSA alias corresponding to the public\n   * key that is extracted from the ethereum_data signature is responsible for\n   * fees that result from the execution of the transaction. If that amount of\n   * authorized fees is not sufficient then the payer of the transaction can be\n   * charged, up to but not exceeding this amount. If the ethereum_data\n   * transaction authorized an amount that was insufficient then the payer will\n   * only be charged the amount needed to make up the difference. If the gas\n   * price in the transaction was set to zero then the payer will be assessed\n   * the entire fee.\n   *\n   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n   * @returns {this}\n   */\n\n\n  setMaxGasAllowanceHbar(maxGasAllowance) {\n    this._requireNotFrozen();\n\n    this._maxGasAllowance = maxGasAllowance instanceof Hbar ? maxGasAllowance : new Hbar(maxGasAllowance);\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._ethereumData != null && this._ethereumData instanceof FileId) {\n      this._ethereumData.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.ITransaction} request\n   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.smartContract.callEthereum(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"ethereumTransaction\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {HashgraphProto.proto.IEthereumTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      ethereumData: this._ethereumData,\n      callData: this._callDataFileId != null ? this._callDataFileId._toProtobuf() : null,\n      maxGasAllowance: this._maxGasAllowance != null ? this._maxGasAllowance.toTinybars() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp =\n    /** @type {import(\"./Timestamp.js\").default} */\n    this._transactionIds.current.validStart;\n    return `EthereumTransaction:${timestamp.toString()}`;\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"ethereumTransaction\", // eslint-disable-next-line @typescript-eslint/unbound-method\nEthereumTransaction._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/EthereumTransaction.js"],"names":["Hbar","FileId","Transaction","TRANSACTION_REGISTRY","EthereumTransaction","constructor","props","_ethereumData","_callDataFileId","_maxGasAllowance","ethereumData","setEthereumData","callData","setCallDataFileId","callDataFileId","maxGasAllowance","setMaxGasAllowanceHbar","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","transaction","ethereumTransaction","_fromProtobufTransactions","undefined","fromTinybars","_requireNotFrozen","setCallData","setMaxGasAllowance","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","callEthereum","_getTransactionDataCase","_makeTransactionData","_toProtobuf","toTinybars","_getLogId","timestamp","_transactionIds","current","validStart","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Hbar from \"./Hbar.js\";\nimport FileId from \"./file/FileId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"./transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HashgraphProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HashgraphProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HashgraphProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n * @typedef {import(\"./Timestamp.js\").default} Timestamp\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * Create a new Hedera™ transaction wrapped ethereum transaction.\n */\nexport default class EthereumTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.ethereumData]\n     * @param {FileId} [props.callData]\n     * @param {FileId} [props.callDataFileId]\n     * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._ethereumData = null;\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._callDataFileId = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._maxGasAllowance = null;\n\n        if (props.ethereumData != null) {\n            this.setEthereumData(props.ethereumData);\n        }\n\n        if (props.callData != null) {\n            this.setCallDataFileId(props.callData);\n        }\n\n        if (props.callDataFileId != null) {\n            this.setCallDataFileId(props.callDataFileId);\n        }\n\n        if (props.maxGasAllowance != null) {\n            this.setMaxGasAllowanceHbar(props.maxGasAllowance);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransaction[]} transactions\n     * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HashgraphProto.proto.ITransactionBody[]} bodies\n     * @returns {EthereumTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const transaction =\n            /** @type {HashgraphProto.proto.IEthereumTransactionBody} */ (\n                body.ethereumTransaction\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new EthereumTransaction({\n                ethereumData:\n                    transaction.ethereumData != null\n                        ? transaction.ethereumData\n                        : undefined,\n                callData:\n                    transaction.callData != null\n                        ? FileId._fromProtobuf(transaction.callData)\n                        : undefined,\n                maxGasAllowance:\n                    transaction.maxGasAllowance != null\n                        ? Hbar.fromTinybars(transaction.maxGasAllowance)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?(Uint8Array | FileId)}\n     */\n    get ethereumData() {\n        return this._ethereumData;\n    }\n\n    /**\n     * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete\n     * unless the callData field is set.\n     *\n     * @param {Uint8Array} ethereumData\n     * @returns {this}\n     */\n    setEthereumData(ethereumData) {\n        this._requireNotFrozen();\n        this._ethereumData = ethereumData;\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `callDataFileId` instead\n     * @returns {?FileId}\n     */\n    get callData() {\n        return this.callDataFileId;\n    }\n\n    /**\n     * @deprecated - Use `setCallDataFileId()` instead\n     *\n     * For large transactions (for example contract create) this is the callData\n     * of the callData. The data in the callData will be re-written with\n     * the callData element as a zero length string with the original contents in\n     * the referenced file at time of execution. The callData will need to be\n     * \"rehydrated\" with the callData for signature validation to pass.\n     * @param {FileId} callDataFileId\n     * @returns {this}\n     */\n    setCallData(callDataFileId) {\n        return this.setCallDataFileId(callDataFileId);\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get callDataFileId() {\n        return this._callDataFileId;\n    }\n\n    /**\n     * For large transactions (for example contract create) this is the callData\n     * of the callData. The data in the callData will be re-written with\n     * the callData element as a zero length string with the original contents in\n     * the referenced file at time of execution. The callData will need to be\n     * \"rehydrated\" with the callData for signature validation to pass.\n     *\n     * @param {FileId} callDataFileId\n     * @returns {this}\n     */\n    setCallDataFileId(callDataFileId) {\n        this._requireNotFrozen();\n        this._callDataFileId = callDataFileId;\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get maxGasAllowance() {\n        return this._maxGasAllowance;\n    }\n\n    /**\n     * @deprecated -- use setMaxGasAllowanceHbar instead\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowance(maxGasAllowance) {\n        return this.setMaxGasAllowanceHbar(maxGasAllowance);\n    }\n\n    /**\n     * The maximum amount, in tinybars, that the payer of the hedera transaction\n     * is willing to pay to complete the transaction.\n     *\n     * Ordinarily the account with the ECDSA alias corresponding to the public\n     * key that is extracted from the ethereum_data signature is responsible for\n     * fees that result from the execution of the transaction. If that amount of\n     * authorized fees is not sufficient then the payer of the transaction can be\n     * charged, up to but not exceeding this amount. If the ethereum_data\n     * transaction authorized an amount that was insufficient then the payer will\n     * only be charged the amount needed to make up the difference. If the gas\n     * price in the transaction was set to zero then the payer will be assessed\n     * the entire fee.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance\n     * @returns {this}\n     */\n    setMaxGasAllowanceHbar(maxGasAllowance) {\n        this._requireNotFrozen();\n        this._maxGasAllowance =\n            maxGasAllowance instanceof Hbar\n                ? maxGasAllowance\n                : new Hbar(maxGasAllowance);\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (\n            this._ethereumData != null &&\n            this._ethereumData instanceof FileId\n        ) {\n            this._ethereumData.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.ITransaction} request\n     * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.callEthereum(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HashgraphProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"ethereumTransaction\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HashgraphProto.proto.IEthereumTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            ethereumData: this._ethereumData,\n            callData:\n                this._callDataFileId != null\n                    ? this._callDataFileId._toProtobuf()\n                    : null,\n            maxGasAllowance:\n                this._maxGasAllowance != null\n                    ? this._maxGasAllowance.toTinybars()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"./Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `EthereumTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"ethereumTransaction\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    EthereumTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}