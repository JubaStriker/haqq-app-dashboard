{"ast":null,"code":"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: []\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null\n    },\n    failure: {\n      error: false,\n      message: \"\"\n    }\n  }\n};\nconst useWalletStore = create((set, address) => ({\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async data => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        get: { ...INITIAL_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      console.log(data); // const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${newAccountId}`);\n      // const response = await fetchAccount.json();\n      // console.log(response);\n    } catch (e) {\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            loading: false,\n            success: {\n              ok: false\n            }\n          }\n        }\n      })));\n    }\n  },\n  getWalletAddress: async shop => {\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        get: { ...INITIAL_WALLET_STATE.get,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`); // console.log(data);\n\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          get: { ...INITIAL_WALLET_STATE.get,\n            success: {\n              ok: true,\n              data: data\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  },\n  postWalletAddress: async _ref => {\n    let {\n      shop,\n      walletAddress\n    } = _ref;\n    set(produce(state => ({ ...state,\n      walletState: { ...state.walletState,\n        post: { ...INITIAL_WALLET_STATE.post,\n          loading: true\n        }\n      }\n    })));\n\n    try {\n      const {\n        data\n      } = await axios.post(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`, {\n        shop,\n        walletAddress\n      });\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: true\n            }\n          }\n        }\n      })));\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(produce(state => ({ ...state,\n        walletState: { ...state.walletState,\n          post: { ...INITIAL_WALLET_STATE.post,\n            loading: false,\n            success: {\n              ok: false\n            },\n            failure: {\n              error: false,\n              message: \"Please Verify the Wallet Address\"\n            }\n          }\n        }\n      })));\n      throw error;\n    }\n  }\n}));\nexport default useWalletStore;","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/wallet/index.js"],"names":["create","axios","produce","INTERNAL_SERVER_ERROR","Parse","INITIAL_WALLET_STATE","get","loading","success","ok","data","failure","error","message","post","useWalletStore","set","address","walletState","verifyWalletAddress","state","console","log","e","getWalletAddress","shop","process","env","REACT_APP_API_SHOPLOOKS_SERVER_URL","postWalletAddress","walletAddress"],"mappings":"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","sourcesContent":["import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\n\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useWalletStore = create((set, address) => ({\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async (data) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try{\n      console.log(data);\n    // const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${newAccountId}`);\n    // const response = await fetchAccount.json();\n    // console.log(response);\n    }catch(e){\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: false\n              }\n            },\n          },\n        }))\n      );\n    }\n  },\n  getWalletAddress: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      // console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              success: {\n                ok: true,\n                data: data,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  },\n  postWalletAddress: async ({ shop, walletAddress }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          post: {\n            ...INITIAL_WALLET_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`,\n        {\n          shop,\n          walletAddress,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: false,\n              },\n              failure: {\n                error: false,\n                message: \"Please Verify the Wallet Address\",\n              },\n            },\n          },\n        }))\n      );\n      throw error;\n    }\n  },\n}));\n\nexport default useWalletStore;\n"]},"metadata":{},"sourceType":"module"}