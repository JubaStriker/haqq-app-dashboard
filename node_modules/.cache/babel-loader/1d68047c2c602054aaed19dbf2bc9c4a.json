{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport AssessedCustomFee from \"../token/AssessedCustomFee.js\";\nimport TokenAssocation from \"../token/TokenAssociation.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport TokenTransfer from \"../token/TokenTransfer.js\";\n/**\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n * @typedef {import(\"../account/HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"../account/TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../account/TokenNftAllowance.js\").default} TokenNftAllowance\n */\n\n/**\n * Either the record of processing the first consensus transaction with the given id whose\n * status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>;\n * <b>or</b>, if no such record exists, the record of processing the first transaction to reach\n * consensus with the given transaction id.\n */\n\nexport default class TransactionRecord {\n  /**\n   * @private\n   * @param {object} props\n   * @param {ContractFunctionResult} [props.contractFunctionResult]\n   * @param {TransactionReceipt} props.receipt\n   * @param {Uint8Array} props.transactionHash\n   * @param {Timestamp} props.consensusTimestamp\n   * @param {TransactionId} props.transactionId\n   * @param {string} props.transactionMemo\n   * @param {Hbar} props.transactionFee\n   * @param {Transfer[]} props.transfers\n   * @param {TokenTransferMap} props.tokenTransfers\n   * @param {TokenTransfer[]} props.tokenTransfersList\n   * @param {?ScheduleId} props.scheduleRef\n   * @param {AssessedCustomFee[]} props.assessedCustomFees\n   * @param {TokenNftTransferMap} props.nftTransfers\n   * @param {TokenAssocation[]} props.automaticTokenAssociations\n   * @param {Timestamp | null} props.parentConsensusTimestamp\n   * @param {PublicKey | null} props.aliasKey\n   * @param {TransactionRecord[]} props.duplicates\n   * @param {TransactionRecord[]} props.children\n   * @param {HbarAllowance[]} props.hbarAllowanceAdjustments\n   * @param {TokenAllowance[]} props.tokenAllowanceAdjustments\n   * @param {TokenNftAllowance[]} props.nftAllowanceAdjustments\n   * @param {?Uint8Array} props.ethereumHash\n   * @param {Transfer[]} props.paidStakingRewards\n   * @param {?Uint8Array} props.prngBytes;\n   * @param {?number} props.prngNumber;\n   */\n  constructor(props) {\n    /**\n     * The status (reach consensus, or failed, or is unknown) and the ID of\n     * any new account/file/instance created.\n     *\n     * @readonly\n     */\n    this.receipt = props.receipt;\n    /**\n     * The hash of the Transaction that executed (not the hash of any Transaction that failed\n     * for having a duplicate TransactionID).\n     *\n     * @readonly\n     */\n\n    this.transactionHash = props.transactionHash;\n    /**\n     * The consensus timestamp (or null if didn't reach consensus yet).\n     *\n     * @readonly\n     */\n\n    this.consensusTimestamp = props.consensusTimestamp;\n    /**\n     * The ID of the transaction this record represents.\n     *\n     * @readonly\n     */\n\n    this.transactionId = props.transactionId;\n    /**\n     * The memo that was submitted as part of the transaction (max 100 bytes).\n     *\n     * @readonly\n     */\n\n    this.transactionMemo = props.transactionMemo;\n    /**\n     * The actual transaction fee charged,\n     * not the original transactionFee value from TransactionBody.\n     *\n     * @readonly\n     */\n\n    this.transactionFee = props.transactionFee;\n    /**\n     * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n     * by the transaction, or by a smart contract it calls, or by the creation of threshold\n     * records that it triggers.\n     *\n     * @readonly\n     */\n\n    this.transfers = props.transfers;\n    /**\n     * Record of the value returned by the smart contract function or constructor.\n     *\n     * @readonly\n     */\n\n    this.contractFunctionResult = props.contractFunctionResult != null ? props.contractFunctionResult : null;\n    /**\n     * All the token transfers from this account\n     *\n     * @readonly\n     */\n\n    this.tokenTransfers = props.tokenTransfers;\n    /**\n     * All the token transfers from this account\n     *\n     * @readonly\n     */\n\n    this.tokenTransfersList = props.tokenTransfersList;\n    /**\n     * Reference to the scheduled transaction ID that this transaction record represent\n     *\n     * @readonly\n     */\n\n    this.scheduleRef = props.scheduleRef;\n    /**\n     * All custom fees that were assessed during a CryptoTransfer, and must be paid if the\n     * transaction status resolved to SUCCESS\n     *\n     * @readonly\n     */\n\n    this.assessedCustomFees = props.assessedCustomFees;\n    /** @readonly */\n\n    this.nftTransfers = props.nftTransfers;\n    /**\n     * All token associations implicitly created while handling this transaction\n     *\n     * @readonly\n     */\n\n    this.automaticTokenAssociations = props.automaticTokenAssociations;\n    /**\n     * In the record of an internal transaction, the consensus timestamp of the user\n     * transaction that spawned it.\n     *\n     * @readonly\n     */\n\n    this.parentConsensusTimestamp = props.parentConsensusTimestamp;\n    /**\n     * In the record of an internal CryptoCreate transaction triggered by a user\n     * transaction with a (previously unused) alias, the new account's alias.\n     *\n     * @readonly\n     */\n\n    this.aliasKey = props.aliasKey;\n    /**\n     * The records of processing all consensus transaction with the same id as the distinguished\n     * record above, in chronological order.\n     *\n     * @readonly\n     */\n\n    this.duplicates = props.duplicates;\n    /**\n     * The records of processing all child transaction spawned by the transaction with the given\n     * top-level id, in consensus order. Always empty if the top-level status is UNKNOWN.\n     *\n     * @readonly\n     */\n\n    this.children = props.children;\n    /**\n     * @deprecated\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.hbarAllowanceAdjustments = props.hbarAllowanceAdjustments;\n    /**\n     * @deprecated\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.tokenAllowanceAdjustments = props.tokenAllowanceAdjustments;\n    /**\n     * @deprecated\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.nftAllowanceAdjustments = props.nftAllowanceAdjustments;\n    /**\n     * The keccak256 hash of the ethereumData. This field will only be populated for\n     * EthereumTransaction.\n     *\n     * @readonly\n     */\n\n    this.ethereumHash = props.ethereumHash;\n    /**\n     * List of accounts with the corresponding staking rewards paid as a result of a transaction.\n     *\n     * @readonly\n     */\n\n    this.paidStakingRewards = props.paidStakingRewards;\n    /**\n     * In the record of a PRNG transaction with no output range, a pseudorandom 384-bit string.\n     *\n     * @readonly\n     */\n\n    this.prngBytes = props.prngBytes;\n    /**\n     * In the record of a PRNG transaction with an output range, the output of a PRNG whose input was a 384-bit string.\n     *\n     * @readonly\n     */\n\n    this.prngNumber = props.prngNumber;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @returns {HashgraphProto.proto.ITransactionGetRecordResponse}\n   */\n\n\n  _toProtobuf() {\n    const tokenTransfers = this.tokenTransfers._toProtobuf();\n\n    const nftTransfers = this.nftTransfers._toProtobuf();\n\n    const tokenTransferLists = [];\n\n    for (const tokenTransfer of tokenTransfers) {\n      for (const nftTransfer of nftTransfers) {\n        if (tokenTransfer.token != null && nftTransfer.token != null && tokenTransfer.token.shardNum === nftTransfer.token.shardNum && tokenTransfer.token.realmNum === nftTransfer.token.realmNum && tokenTransfer.token.tokenNum === nftTransfer.token.tokenNum) {\n          tokenTransferLists.push({\n            token: tokenTransfer.token,\n            transfers: tokenTransfer.transfers,\n            nftTransfers: tokenTransfer.nftTransfers\n          });\n        } else {\n          tokenTransferLists.push(tokenTransfer);\n          tokenTransferLists.push(nftTransfer);\n        }\n      }\n    }\n\n    const duplicates = this.duplicates.map(record =>\n    /** @type {HashgraphProto.proto.ITransactionRecord} */\n    record._toProtobuf().transactionRecord);\n    const children = this.children.map(record =>\n    /** @type {HashgraphProto.proto.ITransactionRecord} */\n    record._toProtobuf().transactionRecord);\n    return {\n      duplicateTransactionRecords: duplicates,\n      childTransactionRecords: children,\n      transactionRecord: {\n        receipt: this.receipt._toProtobuf().receipt,\n        transactionHash: this.transactionHash != null ? this.transactionHash : null,\n        consensusTimestamp: this.consensusTimestamp != null ? this.consensusTimestamp._toProtobuf() : null,\n        transactionID: this.transactionId != null ? this.transactionId._toProtobuf() : null,\n        memo: this.transactionMemo != null ? this.transactionMemo : null,\n        transactionFee: this.transactionFee != null ? this.transactionFee.toTinybars() : null,\n        contractCallResult: this.contractFunctionResult != null && !this.contractFunctionResult._createResult ? this.contractFunctionResult._toProtobuf() : null,\n        contractCreateResult: this.contractFunctionResult != null && this.contractFunctionResult._createResult ? this.contractFunctionResult._toProtobuf() : null,\n        transferList: this.transfers != null ? {\n          accountAmounts: this.transfers.map(transfer => transfer._toProtobuf())\n        } : null,\n        tokenTransferLists,\n        scheduleRef: this.scheduleRef != null ? this.scheduleRef._toProtobuf() : null,\n        assessedCustomFees: this.assessedCustomFees.map(fee => fee._toProtobuf()),\n        automaticTokenAssociations: this.automaticTokenAssociations.map(association => association._toProtobuf()),\n        parentConsensusTimestamp: this.parentConsensusTimestamp != null ? this.parentConsensusTimestamp._toProtobuf() : null,\n        alias: this.aliasKey != null ? HashgraphProto.proto.Key.encode(this.aliasKey._toProtobufKey()).finish() : null,\n        ethereumHash: this.ethereumHash,\n        paidStakingRewards: this.paidStakingRewards.map(transfer => transfer._toProtobuf()),\n        prngBytes: this.prngBytes,\n        prngNumber: this.prngNumber != null ? this.prngNumber : null\n      }\n    };\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.ITransactionGetRecordResponse} response\n   * @returns {TransactionRecord}\n   */\n\n\n  static _fromProtobuf(response) {\n    const record =\n    /** @type {HashgraphProto.proto.ITransactionRecord} */\n    response.transactionRecord;\n    let aliasKey = record.alias != null && record.alias.length > 0 ? Key._fromProtobufKey(HashgraphProto.proto.Key.decode(record.alias)) : null;\n\n    if (!(aliasKey instanceof PublicKey)) {\n      aliasKey = null;\n    }\n\n    const children = response.childTransactionRecords != null ? response.childTransactionRecords.map(child => TransactionRecord._fromProtobuf({\n      transactionRecord: child\n    })) : [];\n    const duplicates = response.duplicateTransactionRecords != null ? response.duplicateTransactionRecords.map(duplicate => TransactionRecord._fromProtobuf({\n      transactionRecord: duplicate\n    })) : [];\n    const contractFunctionResult = record.contractCallResult != null ? ContractFunctionResult._fromProtobuf(record.contractCallResult, false) : record.contractCreateResult != null ? ContractFunctionResult._fromProtobuf(record.contractCreateResult, true) : undefined;\n    return new TransactionRecord({\n      receipt: TransactionReceipt._fromProtobuf({\n        receipt:\n        /** @type {HashgraphProto.proto.ITransactionReceipt} */\n        record.receipt\n      }),\n      transactionHash: record.transactionHash != null ? record.transactionHash : new Uint8Array(),\n      consensusTimestamp: Timestamp._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITimestamp} */\n      record.consensusTimestamp),\n      transactionId: TransactionId._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITransactionID} */\n      record.transactionID),\n      transactionMemo: record.memo != null ? record.memo : \"\",\n      transactionFee: Hbar.fromTinybars(record.transactionFee != null ? record.transactionFee : 0),\n      transfers: Transfer._fromProtobuf(record.transferList != null ? record.transferList.accountAmounts != null ? record.transferList.accountAmounts : [] : []),\n      contractFunctionResult,\n      tokenTransfers: TokenTransferMap._fromProtobuf(record.tokenTransferLists != null ? record.tokenTransferLists : []),\n      tokenTransfersList: TokenTransfer._fromProtobuf(record.tokenTransferLists != null ? record.tokenTransferLists : []),\n      scheduleRef: record.scheduleRef != null ? ScheduleId._fromProtobuf(record.scheduleRef) : null,\n      assessedCustomFees: record.assessedCustomFees != null ? record.assessedCustomFees.map(fee => AssessedCustomFee._fromProtobuf(fee)) : [],\n      nftTransfers: TokenNftTransferMap._fromProtobuf(record.tokenTransferLists != null ? record.tokenTransferLists : []),\n      automaticTokenAssociations: record.automaticTokenAssociations != null ? record.automaticTokenAssociations.map(association => TokenAssocation._fromProtobuf(association)) : [],\n      parentConsensusTimestamp: record.parentConsensusTimestamp != null ? Timestamp._fromProtobuf(record.parentConsensusTimestamp) : null,\n      aliasKey,\n      duplicates,\n      children,\n      hbarAllowanceAdjustments: [],\n      tokenAllowanceAdjustments: [],\n      nftAllowanceAdjustments: [],\n      ethereumHash: record.ethereumHash != null ? record.ethereumHash : null,\n      paidStakingRewards: record.paidStakingRewards != null ? Transfer._fromProtobuf(record.paidStakingRewards) : [],\n      prngBytes: record.prngBytes != null ? record.prngBytes : null,\n      prngNumber: record.prngNumber != null ? record.prngNumber : null\n    });\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {TransactionRecord}\n   */\n\n\n  static fromBytes(bytes) {\n    return TransactionRecord._fromProtobuf(HashgraphProto.proto.TransactionGetRecordResponse.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.TransactionGetRecordResponse.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/transaction/TransactionRecord.js"],"names":["TransactionReceipt","TransactionId","Timestamp","Hbar","Transfer","ContractFunctionResult","TokenTransferMap","TokenNftTransferMap","HashgraphProto","ScheduleId","AssessedCustomFee","TokenAssocation","Key","PublicKey","TokenTransfer","TransactionRecord","constructor","props","receipt","transactionHash","consensusTimestamp","transactionId","transactionMemo","transactionFee","transfers","contractFunctionResult","tokenTransfers","tokenTransfersList","scheduleRef","assessedCustomFees","nftTransfers","automaticTokenAssociations","parentConsensusTimestamp","aliasKey","duplicates","children","hbarAllowanceAdjustments","tokenAllowanceAdjustments","nftAllowanceAdjustments","ethereumHash","paidStakingRewards","prngBytes","prngNumber","Object","freeze","_toProtobuf","tokenTransferLists","tokenTransfer","nftTransfer","token","shardNum","realmNum","tokenNum","push","map","record","transactionRecord","duplicateTransactionRecords","childTransactionRecords","transactionID","memo","toTinybars","contractCallResult","_createResult","contractCreateResult","transferList","accountAmounts","transfer","fee","association","alias","proto","encode","_toProtobufKey","finish","_fromProtobuf","response","length","_fromProtobufKey","decode","child","duplicate","undefined","Uint8Array","fromTinybars","fromBytes","bytes","TransactionGetRecordResponse","toBytes"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport AssessedCustomFee from \"../token/AssessedCustomFee.js\";\nimport TokenAssocation from \"../token/TokenAssociation.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport TokenTransfer from \"../token/TokenTransfer.js\";\n\n/**\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n * @typedef {import(\"../account/HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"../account/TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../account/TokenNftAllowance.js\").default} TokenNftAllowance\n */\n\n/**\n * Either the record of processing the first consensus transaction with the given id whose\n * status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>;\n * <b>or</b>, if no such record exists, the record of processing the first transaction to reach\n * consensus with the given transaction id.\n */\nexport default class TransactionRecord {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractFunctionResult} [props.contractFunctionResult]\n     * @param {TransactionReceipt} props.receipt\n     * @param {Uint8Array} props.transactionHash\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {TransactionId} props.transactionId\n     * @param {string} props.transactionMemo\n     * @param {Hbar} props.transactionFee\n     * @param {Transfer[]} props.transfers\n     * @param {TokenTransferMap} props.tokenTransfers\n     * @param {TokenTransfer[]} props.tokenTransfersList\n     * @param {?ScheduleId} props.scheduleRef\n     * @param {AssessedCustomFee[]} props.assessedCustomFees\n     * @param {TokenNftTransferMap} props.nftTransfers\n     * @param {TokenAssocation[]} props.automaticTokenAssociations\n     * @param {Timestamp | null} props.parentConsensusTimestamp\n     * @param {PublicKey | null} props.aliasKey\n     * @param {TransactionRecord[]} props.duplicates\n     * @param {TransactionRecord[]} props.children\n     * @param {HbarAllowance[]} props.hbarAllowanceAdjustments\n     * @param {TokenAllowance[]} props.tokenAllowanceAdjustments\n     * @param {TokenNftAllowance[]} props.nftAllowanceAdjustments\n     * @param {?Uint8Array} props.ethereumHash\n     * @param {Transfer[]} props.paidStakingRewards\n     * @param {?Uint8Array} props.prngBytes;\n     * @param {?number} props.prngNumber;\n     */\n    constructor(props) {\n        /**\n         * The status (reach consensus, or failed, or is unknown) and the ID of\n         * any new account/file/instance created.\n         *\n         * @readonly\n         */\n        this.receipt = props.receipt;\n\n        /**\n         * The hash of the Transaction that executed (not the hash of any Transaction that failed\n         * for having a duplicate TransactionID).\n         *\n         * @readonly\n         */\n        this.transactionHash = props.transactionHash;\n\n        /**\n         * The consensus timestamp (or null if didn't reach consensus yet).\n         *\n         * @readonly\n         */\n        this.consensusTimestamp = props.consensusTimestamp;\n\n        /**\n         * The ID of the transaction this record represents.\n         *\n         * @readonly\n         */\n        this.transactionId = props.transactionId;\n\n        /**\n         * The memo that was submitted as part of the transaction (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.transactionMemo = props.transactionMemo;\n\n        /**\n         * The actual transaction fee charged,\n         * not the original transactionFee value from TransactionBody.\n         *\n         * @readonly\n         */\n        this.transactionFee = props.transactionFee;\n\n        /**\n         * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n         * by the transaction, or by a smart contract it calls, or by the creation of threshold\n         * records that it triggers.\n         *\n         * @readonly\n         */\n        this.transfers = props.transfers;\n\n        /**\n         * Record of the value returned by the smart contract function or constructor.\n         *\n         * @readonly\n         */\n        this.contractFunctionResult =\n            props.contractFunctionResult != null\n                ? props.contractFunctionResult\n                : null;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfers = props.tokenTransfers;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfersList = props.tokenTransfersList;\n\n        /**\n         * Reference to the scheduled transaction ID that this transaction record represent\n         *\n         * @readonly\n         */\n        this.scheduleRef = props.scheduleRef;\n\n        /**\n         * All custom fees that were assessed during a CryptoTransfer, and must be paid if the\n         * transaction status resolved to SUCCESS\n         *\n         * @readonly\n         */\n        this.assessedCustomFees = props.assessedCustomFees;\n\n        /** @readonly */\n        this.nftTransfers = props.nftTransfers;\n\n        /**\n         * All token associations implicitly created while handling this transaction\n         *\n         * @readonly\n         */\n        this.automaticTokenAssociations = props.automaticTokenAssociations;\n\n        /**\n         * In the record of an internal transaction, the consensus timestamp of the user\n         * transaction that spawned it.\n         *\n         * @readonly\n         */\n        this.parentConsensusTimestamp = props.parentConsensusTimestamp;\n\n        /**\n         * In the record of an internal CryptoCreate transaction triggered by a user\n         * transaction with a (previously unused) alias, the new account's alias.\n         *\n         * @readonly\n         */\n        this.aliasKey = props.aliasKey;\n\n        /**\n         * The records of processing all consensus transaction with the same id as the distinguished\n         * record above, in chronological order.\n         *\n         * @readonly\n         */\n        this.duplicates = props.duplicates;\n\n        /**\n         * The records of processing all child transaction spawned by the transaction with the given\n         * top-level id, in consensus order. Always empty if the top-level status is UNKNOWN.\n         *\n         * @readonly\n         */\n        this.children = props.children;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.hbarAllowanceAdjustments = props.hbarAllowanceAdjustments;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.tokenAllowanceAdjustments = props.tokenAllowanceAdjustments;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.nftAllowanceAdjustments = props.nftAllowanceAdjustments;\n\n        /**\n         * The keccak256 hash of the ethereumData. This field will only be populated for\n         * EthereumTransaction.\n         *\n         * @readonly\n         */\n        this.ethereumHash = props.ethereumHash;\n\n        /**\n         * List of accounts with the corresponding staking rewards paid as a result of a transaction.\n         *\n         * @readonly\n         */\n        this.paidStakingRewards = props.paidStakingRewards;\n\n        /**\n         * In the record of a PRNG transaction with no output range, a pseudorandom 384-bit string.\n         *\n         * @readonly\n         */\n        this.prngBytes = props.prngBytes;\n\n        /**\n         * In the record of a PRNG transaction with an output range, the output of a PRNG whose input was a 384-bit string.\n         *\n         * @readonly\n         */\n        this.prngNumber = props.prngNumber;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {HashgraphProto.proto.ITransactionGetRecordResponse}\n     */\n    _toProtobuf() {\n        const tokenTransfers = this.tokenTransfers._toProtobuf();\n        const nftTransfers = this.nftTransfers._toProtobuf();\n\n        const tokenTransferLists = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            for (const nftTransfer of nftTransfers) {\n                if (\n                    tokenTransfer.token != null &&\n                    nftTransfer.token != null &&\n                    tokenTransfer.token.shardNum ===\n                        nftTransfer.token.shardNum &&\n                    tokenTransfer.token.realmNum ===\n                        nftTransfer.token.realmNum &&\n                    tokenTransfer.token.tokenNum === nftTransfer.token.tokenNum\n                ) {\n                    tokenTransferLists.push({\n                        token: tokenTransfer.token,\n                        transfers: tokenTransfer.transfers,\n                        nftTransfers: tokenTransfer.nftTransfers,\n                    });\n                } else {\n                    tokenTransferLists.push(tokenTransfer);\n                    tokenTransferLists.push(nftTransfer);\n                }\n            }\n        }\n\n        const duplicates = this.duplicates.map(\n            (record) =>\n                /** @type {HashgraphProto.proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                )\n        );\n        const children = this.children.map(\n            (record) =>\n                /** @type {HashgraphProto.proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                )\n        );\n\n        return {\n            duplicateTransactionRecords: duplicates,\n            childTransactionRecords: children,\n            transactionRecord: {\n                receipt: this.receipt._toProtobuf().receipt,\n\n                transactionHash:\n                    this.transactionHash != null ? this.transactionHash : null,\n                consensusTimestamp:\n                    this.consensusTimestamp != null\n                        ? this.consensusTimestamp._toProtobuf()\n                        : null,\n                transactionID:\n                    this.transactionId != null\n                        ? this.transactionId._toProtobuf()\n                        : null,\n                memo:\n                    this.transactionMemo != null ? this.transactionMemo : null,\n\n                transactionFee:\n                    this.transactionFee != null\n                        ? this.transactionFee.toTinybars()\n                        : null,\n\n                contractCallResult:\n                    this.contractFunctionResult != null &&\n                    !this.contractFunctionResult._createResult\n                        ? this.contractFunctionResult._toProtobuf()\n                        : null,\n\n                contractCreateResult:\n                    this.contractFunctionResult != null &&\n                    this.contractFunctionResult._createResult\n                        ? this.contractFunctionResult._toProtobuf()\n                        : null,\n\n                transferList:\n                    this.transfers != null\n                        ? {\n                              accountAmounts: this.transfers.map((transfer) =>\n                                  transfer._toProtobuf()\n                              ),\n                          }\n                        : null,\n                tokenTransferLists,\n                scheduleRef:\n                    this.scheduleRef != null\n                        ? this.scheduleRef._toProtobuf()\n                        : null,\n                assessedCustomFees: this.assessedCustomFees.map((fee) =>\n                    fee._toProtobuf()\n                ),\n                automaticTokenAssociations: this.automaticTokenAssociations.map(\n                    (association) => association._toProtobuf()\n                ),\n                parentConsensusTimestamp:\n                    this.parentConsensusTimestamp != null\n                        ? this.parentConsensusTimestamp._toProtobuf()\n                        : null,\n                alias:\n                    this.aliasKey != null\n                        ? HashgraphProto.proto.Key.encode(\n                              this.aliasKey._toProtobufKey()\n                          ).finish()\n                        : null,\n                ethereumHash: this.ethereumHash,\n\n                paidStakingRewards: this.paidStakingRewards.map((transfer) =>\n                    transfer._toProtobuf()\n                ),\n\n                prngBytes: this.prngBytes,\n                prngNumber: this.prngNumber != null ? this.prngNumber : null,\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.ITransactionGetRecordResponse} response\n     * @returns {TransactionRecord}\n     */\n    static _fromProtobuf(response) {\n        const record = /** @type {HashgraphProto.proto.ITransactionRecord} */ (\n            response.transactionRecord\n        );\n\n        let aliasKey =\n            record.alias != null && record.alias.length > 0\n                ? Key._fromProtobufKey(\n                      HashgraphProto.proto.Key.decode(record.alias)\n                  )\n                : null;\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = null;\n        }\n\n        const children =\n            response.childTransactionRecords != null\n                ? response.childTransactionRecords.map((child) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: child,\n                      })\n                  )\n                : [];\n\n        const duplicates =\n            response.duplicateTransactionRecords != null\n                ? response.duplicateTransactionRecords.map((duplicate) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: duplicate,\n                      })\n                  )\n                : [];\n\n        const contractFunctionResult =\n            record.contractCallResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCallResult,\n                      false\n                  )\n                : record.contractCreateResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCreateResult,\n                      true\n                  )\n                : undefined;\n\n        return new TransactionRecord({\n            receipt: TransactionReceipt._fromProtobuf({\n                receipt:\n                    /** @type {HashgraphProto.proto.ITransactionReceipt} */ (\n                        record.receipt\n                    ),\n            }),\n            transactionHash:\n                record.transactionHash != null\n                    ? record.transactionHash\n                    : new Uint8Array(),\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */\n                (record.consensusTimestamp)\n            ),\n            transactionId: TransactionId._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITransactionID} */ (\n                    record.transactionID\n                )\n            ),\n            transactionMemo: record.memo != null ? record.memo : \"\",\n            transactionFee: Hbar.fromTinybars(\n                record.transactionFee != null ? record.transactionFee : 0\n            ),\n            transfers: Transfer._fromProtobuf(\n                record.transferList != null\n                    ? record.transferList.accountAmounts != null\n                        ? record.transferList.accountAmounts\n                        : []\n                    : []\n            ),\n            contractFunctionResult,\n            tokenTransfers: TokenTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n            tokenTransfersList: TokenTransfer._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n            scheduleRef:\n                record.scheduleRef != null\n                    ? ScheduleId._fromProtobuf(record.scheduleRef)\n                    : null,\n            assessedCustomFees:\n                record.assessedCustomFees != null\n                    ? record.assessedCustomFees.map((fee) =>\n                          AssessedCustomFee._fromProtobuf(fee)\n                      )\n                    : [],\n            nftTransfers: TokenNftTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n            automaticTokenAssociations:\n                record.automaticTokenAssociations != null\n                    ? record.automaticTokenAssociations.map((association) =>\n                          TokenAssocation._fromProtobuf(association)\n                      )\n                    : [],\n            parentConsensusTimestamp:\n                record.parentConsensusTimestamp != null\n                    ? Timestamp._fromProtobuf(record.parentConsensusTimestamp)\n                    : null,\n            aliasKey,\n            duplicates,\n            children,\n            hbarAllowanceAdjustments: [],\n            tokenAllowanceAdjustments: [],\n            nftAllowanceAdjustments: [],\n            ethereumHash:\n                record.ethereumHash != null ? record.ethereumHash : null,\n            paidStakingRewards:\n                record.paidStakingRewards != null\n                    ? Transfer._fromProtobuf(record.paidStakingRewards)\n                    : [],\n            prngBytes: record.prngBytes != null ? record.prngBytes : null,\n            prngNumber: record.prngNumber != null ? record.prngNumber : null,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionRecord}\n     */\n    static fromBytes(bytes) {\n        return TransactionRecord._fromProtobuf(\n            HashgraphProto.proto.TransactionGetRecordResponse.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.TransactionGetRecordResponse.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}