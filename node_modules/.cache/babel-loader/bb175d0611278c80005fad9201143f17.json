{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar cnBase58 = require('./crypto/cnBase58');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\nvar addressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$');\nvar integratedAddressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$');\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes;\n\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes;\n  }\n\n  var at = parseInt(decoded.substr(0, 2), 16).toString();\n\n  switch (networkType) {\n    case 'prod':\n      return network.prod.indexOf(at) >= 0;\n\n    case 'testnet':\n      return network.testnet.indexOf(at) >= 0;\n\n    case 'stagenet':\n      return network.stagenet.indexOf(at) >= 0;\n\n    case 'both':\n      return network.prod.indexOf(at) >= 0 || network.testnet.indexOf(at) >= 0 || network.stagenet.indexOf(at) >= 0;\n\n    default:\n      return false;\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null;\n  var res = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n  }\n\n  return res;\n}\n\nmodule.exports = {\n  isValidAddress: function (address, currency) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      networkType = DEFAULT_NETWORK_TYPE\n    } = opts;\n    var addressType = 'standard';\n\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated';\n      } else {\n        return false;\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address);\n    if (!decodedAddrStr) return false;\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false;\n    var addrChecksum = decodedAddrStr.slice(-8);\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)));\n    return addrChecksum === hashChecksum;\n  }\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/monero_validator.js"],"names":["cryptoUtils","require","cnBase58","DEFAULT_NETWORK_TYPE","addressRegTest","RegExp","integratedAddressRegTest","validateNetwork","decoded","currency","networkType","addressType","network","addressTypes","iAddressTypes","at","parseInt","substr","toString","prod","indexOf","testnet","stagenet","hextobin","hex","length","res","Uint8Array","i","slice","module","exports","isValidAddress","address","opts","test","decodedAddrStr","decode","addrChecksum","hashChecksum","keccak256Checksum"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIE,oBAAoB,GAAG,MAA3B;AACA,IAAIC,cAAc,GAAG,IAAIC,MAAJ,CACnB,oEADmB,CAArB;AAGA,IAAIC,wBAAwB,GAAG,IAAID,MAAJ,CAC7B,qEAD6B,CAA/B;;AAIA,SAASE,eAAT,CAAyBC,OAAzB,EAAkCC,QAAlC,EAA4CC,WAA5C,EAAyDC,WAAzD,EAAsE;AACpE,MAAIC,OAAO,GAAGH,QAAQ,CAACI,YAAvB;;AACA,MAAIF,WAAW,IAAI,YAAnB,EAAiC;AAC/BC,IAAAA,OAAO,GAAGH,QAAQ,CAACK,aAAnB;AACD;;AACD,MAAIC,EAAE,GAAGC,QAAQ,CAACR,OAAO,CAACS,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAR,CAAmCC,QAAnC,EAAT;;AAEA,UAAQR,WAAR;AACE,SAAK,MAAL;AACE,aAAOE,OAAO,CAACO,IAAR,CAAaC,OAAb,CAAqBL,EAArB,KAA4B,CAAnC;;AACF,SAAK,SAAL;AACE,aAAOH,OAAO,CAACS,OAAR,CAAgBD,OAAhB,CAAwBL,EAAxB,KAA+B,CAAtC;;AACF,SAAK,UAAL;AACE,aAAOH,OAAO,CAACU,QAAR,CAAiBF,OAAjB,CAAyBL,EAAzB,KAAgC,CAAvC;;AACF,SAAK,MAAL;AACE,aAAOH,OAAO,CAACO,IAAR,CAAaC,OAAb,CAAqBL,EAArB,KAA4B,CAA5B,IAAiCH,OAAO,CAACS,OAAR,CAAgBD,OAAhB,CAAwBL,EAAxB,KAA+B,CAAhE,IAAqEH,OAAO,CAACU,QAAR,CAAiBF,OAAjB,CAAyBL,EAAzB,KAAgC,CAA5G;;AACF;AACE,aAAO,KAAP;AAVJ;AAYD;;AAED,SAASQ,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAIA,GAAG,CAACC,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B,OAAO,IAAP;AAC1B,MAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,GAAG,CAACC,MAAJ,GAAa,CAA5B,CAAV;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACC,MAAJ,GAAa,CAAjC,EAAoC,EAAEG,CAAtC,EAAyC;AACvCF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASZ,QAAQ,CAACQ,GAAG,CAACK,KAAJ,CAAUD,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAAJ,GAAQ,CAAzB,CAAD,EAA8B,EAA9B,CAAjB;AACD;;AACD,SAAOF,GAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,UAASC,OAAT,EAAkBxB,QAAlB,EAAuC;AAAA,QAAXyB,IAAW,uEAAJ,EAAI;AACrD,UAAM;AAAExB,MAAAA,WAAW,GAAGP;AAAhB,QAAwC+B,IAA9C;AACA,QAAIvB,WAAW,GAAG,UAAlB;;AACA,QAAI,CAACP,cAAc,CAAC+B,IAAf,CAAoBF,OAApB,CAAL,EAAmC;AACjC,UAAI3B,wBAAwB,CAAC6B,IAAzB,CAA8BF,OAA9B,CAAJ,EAA4C;AAC1CtB,QAAAA,WAAW,GAAG,YAAd;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAIyB,cAAc,GAAGlC,QAAQ,CAACmC,MAAT,CAAgBJ,OAAhB,CAArB;AACA,QAAI,CAACG,cAAL,EAAqB,OAAO,KAAP;AAErB,QAAI,CAAC7B,eAAe,CAAC6B,cAAD,EAAiB3B,QAAjB,EAA2BC,WAA3B,EAAwCC,WAAxC,CAApB,EAA0E,OAAO,KAAP;AAE1E,QAAI2B,YAAY,GAAGF,cAAc,CAACP,KAAf,CAAqB,CAAC,CAAtB,CAAnB;AACA,QAAIU,YAAY,GAAGvC,WAAW,CAACwC,iBAAZ,CAA8BjB,QAAQ,CAACa,cAAc,CAACP,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAD,CAAtC,CAAnB;AAEA,WAAOS,YAAY,KAAKC,YAAxB;AACD;AArBc,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils')\nvar cnBase58 = require('./crypto/cnBase58')\n\nvar DEFAULT_NETWORK_TYPE = 'prod'\nvar addressRegTest = new RegExp(\n  '^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$'\n)\nvar integratedAddressRegTest = new RegExp(\n  '^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$'\n)\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes\n  }\n  var at = parseInt(decoded.substr(0, 2), 16).toString()\n\n  switch (networkType) {\n    case 'prod':\n      return network.prod.indexOf(at) >= 0\n    case 'testnet':\n      return network.testnet.indexOf(at) >= 0\n    case 'stagenet':\n      return network.stagenet.indexOf(at) >= 0\n    case 'both':\n      return network.prod.indexOf(at) >= 0 || network.testnet.indexOf(at) >= 0 || network.stagenet.indexOf(at) >= 0\n    default:\n      return false\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null\n  var res = new Uint8Array(hex.length / 2)\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16)\n  }\n  return res\n}\n\nmodule.exports = {\n  isValidAddress: function(address, currency, opts = {}) {\n    const { networkType = DEFAULT_NETWORK_TYPE} = opts;\n    var addressType = 'standard'\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated'\n      } else {\n        return false\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address)\n    if (!decodedAddrStr) return false\n\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false\n\n    var addrChecksum = decodedAddrStr.slice(-8)\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)))\n\n    return addrChecksum === hashChecksum\n  }\n}\n"]},"metadata":{},"sourceType":"script"}