{"ast":null,"code":"var XRPValidator = require('./ripple_validator');\n\nvar ETHValidator = require('./ethereum_validator');\n\nvar BTCValidator = require('./bitcoin_validator');\n\nvar ADAValidator = require('./ada_validator');\n\nvar XMRValidator = require('./monero_validator');\n\nvar NANOValidator = require('./nano_validator');\n\nvar SCValidator = require('./siacoin_validator');\n\nvar TRXValidator = require('./tron_validator');\n\nvar NEMValidator = require('./nem_validator');\n\nvar LSKValidator = require('./lisk_validator');\n\nvar BCHValidator = require('./bch_validator');\n\nvar XLMValidator = require('./stellar_validator');\n\nvar EOSValidator = require('./eos_validator');\n\nvar XTZValidator = require('./tezos_validator');\n\nvar USDTValidator = require('./usdt_validator');\n\nvar AlgoValidator = require('./algo_validator');\n\nvar DotValidator = require('./dot_validator');\n\nvar BIP173Validator = require('./bip173_validator');\n\nvar Base58Validator = require('./base58_validator'); // defines P2PKH and P2SH address types for standard (prod) and testnet networks\n\n\nvar CURRENCIES = [{\n  name: 'Bitcoin',\n  symbol: 'btc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4', '3c', '26']\n  },\n  bech32Hrp: {\n    prod: ['bc'],\n    testnet: ['tb']\n  },\n  validator: BTCValidator\n}, {\n  name: 'BitcoinCash',\n  symbol: 'bch',\n  regexp: '^[qQpP]{1}[0-9a-zA-Z]{41}$',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BCHValidator\n}, {\n  name: 'Bitcoin SV',\n  symbol: 'bsv',\n  regexp: '^[qQ]{1}[0-9a-zA-Z]{41}$',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BCHValidator\n}, {\n  name: 'LiteCoin',\n  symbol: 'ltc',\n  addressTypes: {\n    prod: ['30', '05', '32'],\n    testnet: ['6f', 'c4', '3a']\n  },\n  bech32Hrp: {\n    prod: ['ltc'],\n    testnet: ['tltc']\n  },\n  validator: BTCValidator\n}, {\n  name: 'PeerCoin',\n  symbol: 'ppc',\n  addressTypes: {\n    prod: ['37', '75'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'DogeCoin',\n  symbol: 'doge',\n  addressTypes: {\n    prod: ['1e', '16'],\n    testnet: ['71', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'BeaverCoin',\n  symbol: 'bvc',\n  addressTypes: {\n    prod: ['19', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'FreiCoin',\n  symbol: 'frc',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'ProtoShares',\n  symbol: 'pts',\n  addressTypes: {\n    prod: ['38', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'MegaCoin',\n  symbol: 'mec',\n  addressTypes: {\n    prod: ['32', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'PrimeCoin',\n  symbol: 'xpm',\n  addressTypes: {\n    prod: ['17', '53'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'AuroraCoin',\n  symbol: 'aur',\n  addressTypes: {\n    prod: ['17', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'NameCoin',\n  symbol: 'nmc',\n  addressTypes: {\n    prod: ['34'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'BioCoin',\n  symbol: 'bio',\n  addressTypes: {\n    prod: ['19', '14'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'GarliCoin',\n  symbol: 'grlc',\n  addressTypes: {\n    prod: ['26', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'VertCoin',\n  symbol: 'vtc',\n  addressTypes: {\n    prod: ['0x', '47', '71', '05'],\n    testnet: ['6f', 'c4']\n  },\n  bech32Hrp: {\n    prod: ['vtc'],\n    testnet: ['tvtc']\n  },\n  validator: BTCValidator\n}, {\n  name: 'BitcoinGold',\n  symbol: 'btg',\n  addressTypes: {\n    prod: ['26', '17'],\n    testnet: ['6f', 'c4']\n  },\n  validator: BTCValidator\n}, {\n  name: 'Komodo',\n  symbol: 'kmd',\n  addressTypes: {\n    prod: ['3c', '55'],\n    testnet: ['0', '5']\n  },\n  validator: BTCValidator\n}, {\n  name: 'BitcoinZ',\n  symbol: 'btcz',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'BitcoinPrivate',\n  symbol: 'btcp',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1325', '13af'],\n    testnet: ['1957', '19e0']\n  },\n  validator: BTCValidator\n}, {\n  name: 'Hush',\n  symbol: 'hush',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'SnowGem',\n  symbol: 'sng',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1c28', '1c2d'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'ZCash',\n  symbol: 'zec',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'ZClassic',\n  symbol: 'zcl',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'ZenCash',\n  symbol: 'zen',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['2089', '2096'],\n    testnet: ['2092', '2098']\n  },\n  validator: BTCValidator\n}, {\n  name: 'VoteCoin',\n  symbol: 'vot',\n  expectedLength: 26,\n  addressTypes: {\n    prod: ['1cb8', '1cbd'],\n    testnet: ['1d25', '1cba']\n  },\n  validator: BTCValidator\n}, {\n  name: 'Decred',\n  symbol: 'dcr',\n  addressTypes: {\n    prod: ['073f', '071a'],\n    testnet: ['0f21', '0efc']\n  },\n  hashFunction: 'blake256',\n  expectedLength: 26,\n  validator: BTCValidator\n}, {\n  name: 'GameCredits',\n  symbol: 'game',\n  addressTypes: {\n    prod: ['26', '05'],\n    testnet: []\n  },\n  validator: ETHValidator\n}, {\n  name: 'PIVX',\n  symbol: 'pivx',\n  addressTypes: {\n    prod: ['1e', '0d'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'SolarCoin',\n  symbol: 'slr',\n  addressTypes: {\n    prod: ['12', '05'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'MonaCoin',\n  symbol: 'mona',\n  addressTypes: {\n    prod: ['32', '37'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'DigiByte',\n  symbol: 'dgb',\n  addressTypes: {\n    prod: ['1e', '3f'],\n    testnet: []\n  },\n  bech32Hrp: {\n    prod: ['dgb', 'S'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'Tether',\n  symbol: 'usdt',\n  addressTypes: {\n    prod: ['00', '05'],\n    testnet: ['6f', 'c4']\n  },\n  validator: USDTValidator\n}, {\n  name: 'Ripple',\n  symbol: 'xrp',\n  validator: XRPValidator\n}, {\n  name: 'Dash',\n  symbol: 'dash',\n  addressTypes: {\n    prod: ['4c', '10'],\n    testnet: ['8c', '13']\n  },\n  validator: BTCValidator\n}, {\n  name: 'Neo',\n  symbol: 'neo',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'NeoGas',\n  symbol: 'gas',\n  addressTypes: {\n    prod: ['17'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'Qtum',\n  symbol: 'qtum',\n  addressTypes: {\n    prod: ['3a', '32'],\n    testnet: ['78', '6e']\n  },\n  validator: BTCValidator\n}, {\n  name: 'Waves',\n  symbol: 'waves',\n  addressTypes: {\n    prod: ['0157'],\n    testnet: ['0154']\n  },\n  expectedLength: 26,\n  hashFunction: 'blake256keccak256',\n  regex: /^[a-zA-Z0-9]{35}$/,\n  validator: BTCValidator\n}, {\n  name: 'Ethereum',\n  symbol: 'eth',\n  validator: ETHValidator\n}, {\n  name: 'EtherZero',\n  symbol: 'etz',\n  validator: ETHValidator\n}, {\n  name: 'EthereumClassic',\n  symbol: 'etc',\n  validator: ETHValidator\n}, {\n  name: 'Callisto',\n  symbol: 'clo',\n  validator: ETHValidator\n}, {\n  name: 'Bankex',\n  symbol: 'bkx',\n  validator: ETHValidator\n}, {\n  name: 'Cardano',\n  symbol: 'ada',\n  bech32Hrp: {\n    prod: ['addr'],\n    testnet: ['addr']\n  },\n  validator: ADAValidator\n}, {\n  name: 'Monero',\n  symbol: 'xmr',\n  addressTypes: {\n    prod: ['18', '42'],\n    testnet: ['53', '63'],\n    stagenet: ['24']\n  },\n  iAddressTypes: {\n    prod: ['19'],\n    testnet: ['54'],\n    stagenet: ['25']\n  },\n  validator: XMRValidator\n}, {\n  name: 'Aragon',\n  symbol: 'ant',\n  validator: ETHValidator\n}, {\n  name: 'Basic Attention Token',\n  symbol: 'bat',\n  validator: ETHValidator\n}, {\n  name: 'Bancor',\n  symbol: 'bnt',\n  validator: ETHValidator\n}, {\n  name: 'Civic',\n  symbol: 'cvc',\n  validator: ETHValidator\n}, {\n  name: 'District0x',\n  symbol: 'dnt',\n  validator: ETHValidator\n}, {\n  name: 'Gnosis',\n  symbol: 'gno',\n  validator: ETHValidator\n}, {\n  name: 'Golem (GNT)',\n  symbol: 'gnt',\n  validator: ETHValidator\n}, {\n  name: 'Golem',\n  symbol: 'glm',\n  validator: ETHValidator\n}, {\n  name: 'Matchpool',\n  symbol: 'gup',\n  validator: ETHValidator\n}, {\n  name: 'Melon',\n  symbol: 'mln',\n  validator: ETHValidator\n}, {\n  name: 'Numeraire',\n  symbol: 'nmr',\n  validator: ETHValidator\n}, {\n  name: 'OmiseGO',\n  symbol: 'omg',\n  validator: ETHValidator\n}, {\n  name: 'TenX',\n  symbol: 'pay',\n  validator: ETHValidator\n}, {\n  name: 'Ripio Credit Network',\n  symbol: 'rcn',\n  validator: ETHValidator\n}, {\n  name: 'Augur',\n  symbol: 'rep',\n  validator: ETHValidator\n}, {\n  name: 'iExec RLC',\n  symbol: 'rlc',\n  validator: ETHValidator\n}, {\n  name: 'Salt',\n  symbol: 'salt',\n  validator: ETHValidator\n}, {\n  name: 'Status',\n  symbol: 'snt',\n  validator: ETHValidator\n}, {\n  name: 'Storj',\n  symbol: 'storj',\n  validator: ETHValidator\n}, {\n  name: 'Swarm City',\n  symbol: 'swt',\n  validator: ETHValidator\n}, {\n  name: 'TrueUSD',\n  symbol: 'tusd',\n  validator: ETHValidator\n}, {\n  name: 'Wings',\n  symbol: 'wings',\n  validator: ETHValidator\n}, {\n  name: '0x',\n  symbol: 'zrx',\n  validator: ETHValidator\n}, {\n  name: 'Expanse',\n  symbol: 'exp',\n  validator: ETHValidator\n}, {\n  name: 'Viberate',\n  symbol: 'vib',\n  validator: ETHValidator\n}, {\n  name: 'Odyssey',\n  symbol: 'ocn',\n  validator: ETHValidator\n}, {\n  name: 'Polymath',\n  symbol: 'poly',\n  validator: ETHValidator\n}, {\n  name: 'Storm',\n  symbol: 'storm',\n  validator: ETHValidator\n}, {\n  name: 'Nano',\n  symbol: 'nano',\n  validator: NANOValidator\n}, {\n  name: 'RaiBlocks',\n  symbol: 'xrb',\n  validator: NANOValidator\n}, {\n  name: 'Siacoin',\n  symbol: 'sc',\n  validator: SCValidator\n}, {\n  name: 'HyperSpace',\n  symbol: 'xsc',\n  validator: SCValidator\n}, {\n  name: 'loki',\n  symbol: 'loki',\n  addressTypes: {\n    prod: ['114', '115', '116'],\n    testnet: []\n  },\n  iAddressTypes: {\n    prod: ['115'],\n    testnet: []\n  },\n  validator: XMRValidator\n}, {\n  name: 'LBRY Credits',\n  symbol: 'lbc',\n  addressTypes: {\n    prod: ['55'],\n    testnet: []\n  },\n  validator: BTCValidator\n}, {\n  name: 'Tron',\n  symbol: 'trx',\n  addressTypes: {\n    prod: [0x41],\n    testnet: [0xa0]\n  },\n  validator: TRXValidator\n}, {\n  name: 'Nem',\n  symbol: 'xem',\n  validator: NEMValidator\n}, {\n  name: 'Lisk',\n  symbol: 'lsk',\n  validator: LSKValidator\n}, {\n  name: 'Stellar',\n  symbol: 'xlm',\n  validator: XLMValidator\n}, {\n  name: 'BTU Protocol',\n  symbol: 'btu',\n  validator: ETHValidator\n}, {\n  name: 'Crypto.com Coin',\n  symbol: 'cro',\n  bech32Hrp: {\n    prod: ['cro'],\n    testnet: ['tcro']\n  },\n  validator: BIP173Validator\n}, {\n  name: 'Multi-collateral DAI',\n  symbol: 'dai',\n  validator: ETHValidator\n}, {\n  name: 'Enjin Coin',\n  symbol: 'enj',\n  validator: ETHValidator\n}, {\n  name: 'HedgeTrade',\n  symbol: 'hedg',\n  validator: ETHValidator\n}, {\n  name: 'Cred',\n  symbol: 'lba',\n  validator: ETHValidator\n}, {\n  name: 'Chainlink',\n  symbol: 'link',\n  validator: ETHValidator\n}, {\n  name: 'Loom Network',\n  symbol: 'loom',\n  validator: ETHValidator\n}, {\n  name: 'Maker',\n  symbol: 'mkr',\n  validator: ETHValidator\n}, {\n  name: 'Metal',\n  symbol: 'mtl',\n  validator: ETHValidator\n}, {\n  name: 'Ocean Protocol',\n  symbol: 'ocean',\n  validator: ETHValidator\n}, {\n  name: 'Quant',\n  symbol: 'qnt',\n  validator: ETHValidator\n}, {\n  name: 'Synthetix Network',\n  symbol: 'snx',\n  validator: ETHValidator\n}, {\n  name: 'SOLVE',\n  symbol: 'solve',\n  validator: ETHValidator\n}, {\n  name: 'Spendcoin',\n  symbol: 'spnd',\n  validator: ETHValidator\n}, {\n  name: 'TEMCO',\n  symbol: 'temco',\n  validator: ETHValidator\n}, {\n  name: 'EOS',\n  symbol: 'eos',\n  validator: EOSValidator\n}, {\n  name: 'Tezos',\n  symbol: 'xtz',\n  validator: XTZValidator\n}, {\n  name: 'VeChain',\n  symbol: 'vet',\n  validator: ETHValidator\n}, {\n  name: 'StormX',\n  symbol: 'stmx',\n  validator: ETHValidator\n}, {\n  name: 'AugurV2',\n  symbol: 'repv2',\n  validator: ETHValidator\n}, {\n  name: 'FirmaChain',\n  symbol: 'fct',\n  validator: ETHValidator\n}, {\n  name: 'BlockTrade',\n  symbol: 'btt',\n  validator: ETHValidator\n}, {\n  name: 'Quantum Resistant Ledger',\n  symbol: 'qrl',\n  validator: ETHValidator\n}, {\n  name: 'Serve',\n  symbol: 'serv',\n  validator: ETHValidator\n}, {\n  name: 'Tap',\n  symbol: 'xtp',\n  validator: ETHValidator\n}, {\n  name: 'Compound',\n  symbol: 'comp',\n  validator: ETHValidator\n}, {\n  name: 'Paxos',\n  symbol: 'pax',\n  validator: ETHValidator\n}, {\n  name: 'USD Coin',\n  symbol: 'usdc',\n  validator: ETHValidator\n}, {\n  name: 'CUSD',\n  symbol: 'cusd',\n  validator: ETHValidator\n}, {\n  name: 'Algorand',\n  symbol: 'algo',\n  validator: AlgoValidator\n}, {\n  name: 'Polkadot',\n  symbol: 'dot',\n  validator: DotValidator\n}, {\n  name: 'Uniswap Coin',\n  symbol: 'uni',\n  validator: ETHValidator\n}, {\n  name: 'Aave Coin',\n  symbol: 'aave',\n  validator: ETHValidator\n}, {\n  name: 'Matic',\n  symbol: 'matic',\n  validator: ETHValidator\n}, {\n  name: 'Decentraland',\n  symbol: 'mana',\n  validator: ETHValidator\n}, {\n  name: 'Solana',\n  symbol: 'sol',\n  validator: Base58Validator,\n  maxLength: 44,\n  minLength: 43\n}, {\n  name: 'Binance',\n  symbol: 'bnb',\n  validator: ETHValidator\n}, {\n  name: 'Avalanche',\n  symbol: 'avax',\n  validator: ETHValidator\n}];\nmodule.exports = {\n  getByNameOrSymbol: function (currencyNameOrSymbol) {\n    var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n    return CURRENCIES.find(function (currency) {\n      return currency.name.toLowerCase() === nameOrSymbol || currency.symbol.toLowerCase() === nameOrSymbol;\n    });\n  },\n  getAll: function () {\n    return CURRENCIES;\n  }\n}; ////spit out details for readme.md\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`* ${c.name}/${c.symbol} \\`'${c.name}'\\` or \\`'${c.symbol}'\\` `));\n////spit out keywords for package.json\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`\"${c.name}\",\"${c.symbol}\",`));\n//","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/currencies.js"],"names":["XRPValidator","require","ETHValidator","BTCValidator","ADAValidator","XMRValidator","NANOValidator","SCValidator","TRXValidator","NEMValidator","LSKValidator","BCHValidator","XLMValidator","EOSValidator","XTZValidator","USDTValidator","AlgoValidator","DotValidator","BIP173Validator","Base58Validator","CURRENCIES","name","symbol","addressTypes","prod","testnet","bech32Hrp","validator","regexp","expectedLength","hashFunction","regex","stagenet","iAddressTypes","maxLength","minLength","module","exports","getByNameOrSymbol","currencyNameOrSymbol","nameOrSymbol","toLowerCase","find","currency","getAll"],"mappings":"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","sourcesContent":["var XRPValidator = require('./ripple_validator');\nvar ETHValidator = require('./ethereum_validator');\nvar BTCValidator = require('./bitcoin_validator');\nvar ADAValidator = require('./ada_validator');\nvar XMRValidator = require('./monero_validator');\nvar NANOValidator = require('./nano_validator');\nvar SCValidator = require('./siacoin_validator');\nvar TRXValidator = require('./tron_validator');\nvar NEMValidator = require('./nem_validator');\nvar LSKValidator = require('./lisk_validator');\nvar BCHValidator = require('./bch_validator');\nvar XLMValidator = require('./stellar_validator');\nvar EOSValidator = require('./eos_validator');\nvar XTZValidator = require('./tezos_validator');\nvar USDTValidator = require('./usdt_validator');\nvar AlgoValidator = require('./algo_validator');\nvar DotValidator = require('./dot_validator');\nvar BIP173Validator = require('./bip173_validator')\nvar Base58Validator = require('./base58_validator')\n\n// defines P2PKH and P2SH address types for standard (prod) and testnet networks\nvar CURRENCIES = [{\n        name: 'Bitcoin',\n        symbol: 'btc',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4', '3c', '26'] },\n        bech32Hrp: { prod: ['bc'], testnet: ['tb'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinCash',\n        symbol: 'bch',\n        regexp: '^[qQpP]{1}[0-9a-zA-Z]{41}$',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BCHValidator\n    }, {\n        name: 'Bitcoin SV',\n        symbol: 'bsv',\n        regexp: '^[qQ]{1}[0-9a-zA-Z]{41}$',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BCHValidator\n    }, {\n        name: 'LiteCoin',\n        symbol: 'ltc',\n        addressTypes: { prod: ['30', '05', '32'], testnet: ['6f', 'c4', '3a'] },\n        bech32Hrp: { prod: ['ltc'], testnet: ['tltc'] },\n        validator: BTCValidator\n    }, {\n        name: 'PeerCoin',\n        symbol: 'ppc',\n        addressTypes: { prod: ['37', '75'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'DogeCoin',\n        symbol: 'doge',\n        addressTypes: { prod: ['1e', '16'], testnet: ['71', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'BeaverCoin',\n        symbol: 'bvc',\n        addressTypes: { prod: ['19', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator,\n    }, {\n        name: 'FreiCoin',\n        symbol: 'frc',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'ProtoShares',\n        symbol: 'pts',\n        addressTypes: { prod: ['38', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'MegaCoin',\n        symbol: 'mec',\n        addressTypes: { prod: ['32', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'PrimeCoin',\n        symbol: 'xpm',\n        addressTypes: { prod: ['17', '53'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'AuroraCoin',\n        symbol: 'aur',\n        addressTypes: { prod: ['17', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'NameCoin',\n        symbol: 'nmc',\n        addressTypes: { prod: ['34'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'BioCoin',\n        symbol: 'bio',\n        addressTypes: { prod: ['19', '14'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'GarliCoin',\n        symbol: 'grlc',\n        addressTypes: { prod: ['26', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'VertCoin',\n        symbol: 'vtc',\n        addressTypes: { prod: ['0x', '47', '71', '05'], testnet: ['6f', 'c4'] },\n        bech32Hrp: { prod: ['vtc'], testnet: ['tvtc'] },\n        validator: BTCValidator\n\n    }, {\n        name: 'BitcoinGold',\n        symbol: 'btg',\n        addressTypes: { prod: ['26', '17'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'Komodo',\n        symbol: 'kmd',\n        addressTypes: { prod: ['3c', '55'], testnet: ['0', '5'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinZ',\n        symbol: 'btcz',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinPrivate',\n        symbol: 'btcp',\n        expectedLength: 26,\n        addressTypes: { prod: ['1325', '13af'], testnet: ['1957', '19e0'] },\n        validator: BTCValidator\n    }, {\n        name: 'Hush',\n        symbol: 'hush',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'SnowGem',\n        symbol: 'sng',\n        expectedLength: 26,\n        addressTypes: { prod: ['1c28', '1c2d'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZCash',\n        symbol: 'zec',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZClassic',\n        symbol: 'zcl',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZenCash',\n        symbol: 'zen',\n        expectedLength: 26,\n        addressTypes: { prod: ['2089', '2096'], testnet: ['2092', '2098'] },\n        validator: BTCValidator\n    }, {\n        name: 'VoteCoin',\n        symbol: 'vot',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'Decred',\n        symbol: 'dcr',\n        addressTypes: { prod: ['073f', '071a'], testnet: ['0f21', '0efc'] },\n        hashFunction: 'blake256',\n        expectedLength: 26,\n        validator: BTCValidator\n    }, {\n        name: 'GameCredits',\n        symbol: 'game',\n        addressTypes: { prod: ['26', '05'], testnet: [] },\n        validator: ETHValidator\n    }, {\n        name: 'PIVX',\n        symbol: 'pivx',\n        addressTypes: { prod: ['1e', '0d'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'SolarCoin',\n        symbol: 'slr',\n        addressTypes: { prod: ['12', '05'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'MonaCoin',\n        symbol: 'mona',\n        addressTypes: { prod: ['32', '37'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'DigiByte',\n        symbol: 'dgb',\n        addressTypes: { prod: ['1e', '3f'], testnet: [] },\n        bech32Hrp: { prod: ['dgb', 'S'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Tether',\n        symbol: 'usdt',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: USDTValidator\n    }, {\n        name: 'Ripple',\n        symbol: 'xrp',\n        validator: XRPValidator,\n    }, {\n        name: 'Dash',\n        symbol: 'dash',\n        addressTypes: { prod: ['4c', '10'], testnet: ['8c', '13'] },\n        validator: BTCValidator\n    }, {\n        name: 'Neo',\n        symbol: 'neo',\n        addressTypes: { prod: ['17'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'NeoGas',\n        symbol: 'gas',\n        addressTypes: { prod: ['17'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Qtum',\n        symbol: 'qtum',\n        addressTypes: { prod: ['3a', '32'], testnet: ['78', '6e'] },\n        validator: BTCValidator\n    }, {\n        name: 'Waves',\n        symbol: 'waves',\n        addressTypes: { prod: ['0157'], testnet: ['0154'] },\n        expectedLength: 26,\n        hashFunction: 'blake256keccak256',\n        regex: /^[a-zA-Z0-9]{35}$/,\n        validator: BTCValidator\n    }, {\n        name: 'Ethereum',\n        symbol: 'eth',\n        validator: ETHValidator,\n    }, {\n        name: 'EtherZero',\n        symbol: 'etz',\n        validator: ETHValidator,\n    }, {\n        name: 'EthereumClassic',\n        symbol: 'etc',\n        validator: ETHValidator,\n    }, {\n        name: 'Callisto',\n        symbol: 'clo',\n        validator: ETHValidator,\n    }, {\n        name: 'Bankex',\n        symbol: 'bkx',\n        validator: ETHValidator\n    }, {\n        name: 'Cardano',\n        symbol: 'ada',\n        bech32Hrp: { prod: ['addr'], testnet: ['addr']},\n        validator: ADAValidator\n    }, {\n        name: 'Monero',\n        symbol: 'xmr',\n        addressTypes: { prod: ['18', '42'], testnet: ['53', '63'], stagenet: ['24'] },\n        iAddressTypes: { prod: ['19'], testnet: ['54'], stagenet: ['25'] },\n        validator: XMRValidator\n    }, {\n        name: 'Aragon',\n        symbol: 'ant',\n        validator: ETHValidator\n    }, {\n        name: 'Basic Attention Token',\n        symbol: 'bat',\n        validator: ETHValidator\n    }, {\n        name: 'Bancor',\n        symbol: 'bnt',\n        validator: ETHValidator\n    }, {\n        name: 'Civic',\n        symbol: 'cvc',\n        validator: ETHValidator\n    }, {\n        name: 'District0x',\n        symbol: 'dnt',\n        validator: ETHValidator\n    }, {\n        name: 'Gnosis',\n        symbol: 'gno',\n        validator: ETHValidator\n    }, {\n        name: 'Golem (GNT)',\n        symbol: 'gnt',\n        validator: ETHValidator\n    }, {\n        name: 'Golem',\n        symbol: 'glm',\n        validator: ETHValidator\n    },  {\n        name: 'Matchpool',\n        symbol: 'gup',\n        validator: ETHValidator\n    }, {\n        name: 'Melon',\n        symbol: 'mln',\n        validator: ETHValidator\n    }, {\n        name: 'Numeraire',\n        symbol: 'nmr',\n        validator: ETHValidator\n    }, {\n        name: 'OmiseGO',\n        symbol: 'omg',\n        validator: ETHValidator\n    }, {\n        name: 'TenX',\n        symbol: 'pay',\n        validator: ETHValidator\n    }, {\n        name: 'Ripio Credit Network',\n        symbol: 'rcn',\n        validator: ETHValidator\n    }, {\n        name: 'Augur',\n        symbol: 'rep',\n        validator: ETHValidator\n    }, {\n        name: 'iExec RLC',\n        symbol: 'rlc',\n        validator: ETHValidator\n    }, {\n        name: 'Salt',\n        symbol: 'salt',\n        validator: ETHValidator\n    }, {\n        name: 'Status',\n        symbol: 'snt',\n        validator: ETHValidator\n    }, {\n        name: 'Storj',\n        symbol: 'storj',\n        validator: ETHValidator\n    }, {\n        name: 'Swarm City',\n        symbol: 'swt',\n        validator: ETHValidator\n    }, {\n        name: 'TrueUSD',\n        symbol: 'tusd',\n        validator: ETHValidator\n    }, {\n        name: 'Wings',\n        symbol: 'wings',\n        validator: ETHValidator\n    }, {\n        name: '0x',\n        symbol: 'zrx',\n        validator: ETHValidator\n    }, {\n        name: 'Expanse',\n        symbol: 'exp',\n        validator: ETHValidator\n    }, {\n        name: 'Viberate',\n        symbol: 'vib',\n        validator: ETHValidator\n    }, {\n        name: 'Odyssey',\n        symbol: 'ocn',\n        validator: ETHValidator\n    }, {\n        name: 'Polymath',\n        symbol: 'poly',\n        validator: ETHValidator\n    }, {\n        name: 'Storm',\n        symbol: 'storm',\n        validator: ETHValidator\n    }, {\n        name: 'Nano',\n        symbol: 'nano',\n        validator: NANOValidator,\n    }, {\n        name: 'RaiBlocks',\n        symbol: 'xrb',\n        validator: NANOValidator,\n    }, {\n        name: 'Siacoin',\n        symbol: 'sc',\n        validator: SCValidator\n    }, {\n        name: 'HyperSpace',\n        symbol: 'xsc',\n        validator: SCValidator\n    }, {\n        name: 'loki',\n        symbol: 'loki',\n        addressTypes: { prod: ['114', '115', '116'], testnet: [] },\n        iAddressTypes: { prod: ['115'], testnet: [] },\n        validator: XMRValidator\n    }, {\n        name: 'LBRY Credits',\n        symbol: 'lbc',\n        addressTypes: { prod: ['55'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Tron',\n        symbol: 'trx',\n        addressTypes: { prod: [0x41], testnet: [0xa0] },\n        validator: TRXValidator\n    }, {\n        name: 'Nem',\n        symbol: 'xem',\n        validator: NEMValidator\n    }, {\n        name: 'Lisk',\n        symbol: 'lsk',\n        validator: LSKValidator\n    }, {\n        name: 'Stellar',\n        symbol: 'xlm',\n        validator: XLMValidator,\n    }, {\n        name: 'BTU Protocol',\n        symbol: 'btu',\n        validator: ETHValidator,\n    }, {\n        name: 'Crypto.com Coin',\n        symbol: 'cro',\n        bech32Hrp: { prod: ['cro'], testnet: ['tcro']},\n        validator: BIP173Validator,\n    }, {\n        name: 'Multi-collateral DAI',\n        symbol: 'dai',\n        validator: ETHValidator,\n    }, {\n        name: 'Enjin Coin',\n        symbol: 'enj',\n        validator: ETHValidator,\n    }, {\n        name: 'HedgeTrade',\n        symbol: 'hedg',\n        validator: ETHValidator,\n    }, {\n        name: 'Cred',\n        symbol: 'lba',\n        validator: ETHValidator,\n    }, {\n        name: 'Chainlink',\n        symbol: 'link',\n        validator: ETHValidator,\n    }, {\n        name: 'Loom Network',\n        symbol: 'loom',\n        validator: ETHValidator,\n    }, {\n        name: 'Maker',\n        symbol: 'mkr',\n        validator: ETHValidator,\n    }, {\n        name: 'Metal',\n        symbol: 'mtl',\n        validator: ETHValidator,\n    }, {\n        name: 'Ocean Protocol',\n        symbol: 'ocean',\n        validator: ETHValidator,\n    }, {\n        name: 'Quant',\n        symbol: 'qnt',\n        validator: ETHValidator,\n    }, {\n        name: 'Synthetix Network',\n        symbol: 'snx',\n        validator: ETHValidator,\n    }, {\n        name: 'SOLVE',\n        symbol: 'solve',\n        validator: ETHValidator,\n    }, {\n        name: 'Spendcoin',\n        symbol: 'spnd',\n        validator: ETHValidator,\n    }, {\n        name: 'TEMCO',\n        symbol: 'temco',\n        validator: ETHValidator,\n    }, {\n        name: 'EOS',\n        symbol: 'eos',\n        validator: EOSValidator\n    }, {\n        name: 'Tezos',\n        symbol: 'xtz',\n        validator: XTZValidator\n    }, {\n        name: 'VeChain',\n        symbol: 'vet',\n        validator: ETHValidator\n    },\n    {\n        name: 'StormX',\n        symbol: 'stmx',\n        validator: ETHValidator\n    },\n    {\n        name: 'AugurV2',\n        symbol: 'repv2',\n        validator: ETHValidator\n    },\n    {\n        name: 'FirmaChain',\n        symbol: 'fct',\n        validator: ETHValidator\n    },\n    {\n        name: 'BlockTrade',\n        symbol: 'btt',\n        validator: ETHValidator\n    },\n    {\n        name: 'Quantum Resistant Ledger',\n        symbol: 'qrl',\n        validator: ETHValidator\n    },\n    {\n        name: 'Serve',\n        symbol: 'serv',\n        validator: ETHValidator\n    },\n    {\n        name: 'Tap',\n        symbol: 'xtp',\n        validator: ETHValidator\n    },\n    {\n        name: 'Compound',\n        symbol: 'comp',\n        validator: ETHValidator\n    },\n    {\n        name: 'Paxos',\n        symbol: 'pax',\n        validator: ETHValidator\n    },\n    {\n        name: 'USD Coin',\n        symbol: 'usdc',\n        validator: ETHValidator\n    },\n    {\n        name: 'CUSD',\n        symbol: 'cusd',\n        validator: ETHValidator\n    },\n    {\n        name: 'Algorand',\n        symbol: 'algo',\n        validator: AlgoValidator\n    },\n    {\n        name: 'Polkadot',\n        symbol: 'dot',\n        validator: DotValidator\n    },\n    {\n        name: 'Uniswap Coin',\n        symbol: 'uni',\n        validator: ETHValidator\n    },\n    {\n        name: 'Aave Coin',\n        symbol: 'aave',\n        validator: ETHValidator\n    },\n    {\n        name: 'Matic',\n        symbol: 'matic',\n        validator: ETHValidator\n    },\n    {\n        name: 'Decentraland',\n        symbol: 'mana',\n        validator: ETHValidator\n    },\n    {\n        name: 'Solana',\n        symbol: 'sol',\n        validator: Base58Validator,\n        maxLength: 44,\n        minLength: 43\n    },\n    {\n        name: 'Binance',\n        symbol: 'bnb',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Avalanche',\n        symbol: 'avax',\n        validator: ETHValidator,\n    },\n];\n\n\n    module.exports = {\n    getByNameOrSymbol: function (currencyNameOrSymbol) {\n        var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n        return CURRENCIES.find(function (currency) {\n            return currency.name.toLowerCase() === nameOrSymbol || currency.symbol.toLowerCase() === nameOrSymbol\n        });\n    },\n    getAll: function () {\n        return CURRENCIES;\n    }\n};\n\n////spit out details for readme.md\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`* ${c.name}/${c.symbol} \\`'${c.name}'\\` or \\`'${c.symbol}'\\` `));\n\n////spit out keywords for package.json\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`\"${c.name}\",\"${c.symbol}\",`));\n//\n\n"]},"metadata":{},"sourceType":"script"}