{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport AccountInfo from \"./AccountInfo.js\";\nimport Hbar from \"../Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.CryptoGetInfoResponse.IAccountInfo} HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoQuery} HashgraphProto.proto.ICryptoGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoResponse} HashgraphProto.proto.ICryptoGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<AccountInfo>}\n */\n\nexport default class AccountInfoQuery extends Query {\n  /**\n   * @param {object} props\n   * @param {AccountId | string} [props.accountId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._accountId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} query\n   * @returns {AccountInfoQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const info =\n    /** @type {HashgraphProto.proto.ICryptoGetInfoQuery} */\n    query.cryptoGetInfo;\n    return new AccountInfoQuery({\n      accountId: info.accountID != null ? AccountId._fromProtobuf(info.accountID) : undefined\n    });\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account ID for which the info is being requested.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {AccountInfoQuery}\n   */\n\n\n  setAccountId(accountId) {\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getAccountInfo(request);\n  }\n  /**\n   * @override\n   * @param {import(\"../client/Client.js\").default<Channel, *>} client\n   * @returns {Promise<Hbar>}\n   */\n\n\n  async getCost(client) {\n    let cost = await super.getCost(client);\n\n    if (cost.toTinybars().greaterThan(25)) {\n      return cost;\n    } else {\n      return Hbar.fromTinybars(25);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {HashgraphProto.proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const cryptoGetInfo =\n    /** @type {HashgraphProto.proto.ICryptoGetInfoResponse} */\n    response.cryptoGetInfo;\n    return (\n      /** @type {HashgraphProto.proto.IResponseHeader} */\n      cryptoGetInfo.header\n    );\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<AccountInfo>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const info =\n    /** @type {HashgraphProto.proto.ICryptoGetInfoResponse} */\n    response.cryptoGetInfo;\n    return Promise.resolve(AccountInfo._fromProtobuf(\n    /** @type {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo} */\n    info.accountInfo));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQueryHeader} header\n   * @returns {HashgraphProto.proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      cryptoGetInfo: {\n        header,\n        accountID: this._accountId != null ? this._accountId._toProtobuf() : null\n      }\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp = this._paymentTransactionId != null && this._paymentTransactionId.validStart != null ? this._paymentTransactionId.validStart : this._timestamp;\n    return `AccountInfoQuery:${timestamp.toString()}`;\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"cryptoGetInfo\", AccountInfoQuery._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/AccountInfoQuery.js"],"names":["Query","QUERY_REGISTRY","AccountId","AccountInfo","Hbar","AccountInfoQuery","constructor","props","_accountId","accountId","setAccountId","_fromProtobuf","query","info","cryptoGetInfo","accountID","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getAccountInfo","getCost","cost","toTinybars","greaterThan","fromTinybars","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","accountInfo","_onMakeRequest","_toProtobuf","_getLogId","timestamp","_paymentTransactionId","validStart","_timestamp","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport AccountInfo from \"./AccountInfo.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.CryptoGetInfoResponse.IAccountInfo} HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoQuery} HashgraphProto.proto.ICryptoGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoResponse} HashgraphProto.proto.ICryptoGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<AccountInfo>}\n */\nexport default class AccountInfoQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} query\n     * @returns {AccountInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HashgraphProto.proto.ICryptoGetInfoQuery} */ (\n            query.cryptoGetInfo\n        );\n\n        return new AccountInfoQuery({\n            accountId:\n                info.accountID != null\n                    ? AccountId._fromProtobuf(info.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the info is being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountInfoQuery}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountInfo(request);\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        let cost = await super.getCost(client);\n\n        if (cost.toTinybars().greaterThan(25)) {\n            return cost;\n        } else {\n            return Hbar.fromTinybars(25);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {HashgraphProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetInfo =\n            /** @type {HashgraphProto.proto.ICryptoGetInfoResponse} */ (\n                response.cryptoGetInfo\n            );\n        return /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            cryptoGetInfo.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<AccountInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info =\n            /** @type {HashgraphProto.proto.ICryptoGetInfoResponse} */ (\n                response.cryptoGetInfo\n            );\n\n        return Promise.resolve(\n            AccountInfo._fromProtobuf(\n                /** @type {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo} */ (\n                    info.accountInfo\n                )\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQueryHeader} header\n     * @returns {HashgraphProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetInfo: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n        return `AccountInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetInfo\", AccountInfoQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}