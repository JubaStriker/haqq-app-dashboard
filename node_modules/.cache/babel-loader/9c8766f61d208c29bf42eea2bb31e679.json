{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport TransactionRecord from \"../transaction/TransactionRecord.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsQuery} HashgraphProto.proto.ICryptoGetAccountRecordsQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsResponse} HashgraphProto.proto.ICryptoGetAccountRecordsResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionRecord} HashgraphProto.proto.ITransactionRecord\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get all the records for an account for any transfers into it and out of it,\n * that were above the threshold, during the last 25 hours.\n *\n * @augments {Query<TransactionRecord[]>}\n */\n\nexport default class AccountRecordsQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {AccountId | string} [props.accountId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?AccountId}\n     * @private\n     */\n\n    this._accountId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.IQuery} query\n   * @returns {AccountRecordsQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const records =\n    /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsQuery} */\n    query.cryptoGetAccountRecords;\n    return new AccountRecordsQuery({\n      accountId: records.accountID != null ? AccountId._fromProtobuf(records.accountID) : undefined\n    });\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account ID for which the records are being requested.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {this}\n   */\n\n\n  setAccountId(accountId) {\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<HashgraphProto.proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getAccountRecords(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IResponse} response\n   * @returns {HashgraphProto.proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const cryptoGetAccountRecords =\n    /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsResponse} */\n    response.cryptoGetAccountRecords;\n    return (\n      /** @type {HashgraphProto.proto.IResponseHeader} */\n      cryptoGetAccountRecords.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {HashgraphProto.proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {HashgraphProto.proto.IQuery} request\n   * @returns {Promise<TransactionRecord[]>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const cryptoGetAccountRecords =\n    /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsResponse} */\n    response.cryptoGetAccountRecords;\n    const records =\n    /** @type {HashgraphProto.proto.ITransactionRecord[]} */\n    cryptoGetAccountRecords.records;\n    return Promise.resolve(records.map(record => TransactionRecord._fromProtobuf({\n      transactionRecord: record\n    })));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {HashgraphProto.proto.IQueryHeader} header\n   * @returns {HashgraphProto.proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      cryptoGetAccountRecords: {\n        header,\n        accountID: this._accountId != null ? this._accountId._toProtobuf() : null\n      }\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  _getLogId() {\n    const timestamp = this._paymentTransactionId != null && this._paymentTransactionId.validStart != null ? this._paymentTransactionId.validStart : this._timestamp;\n    return `AccountRecordsQuery:${timestamp.toString()}`;\n  }\n\n}\nQUERY_REGISTRY.set(\"cryptoGetAccountRecords\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountRecordsQuery._fromProtobuf);","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/account/AccountRecordsQuery.js"],"names":["Query","QUERY_REGISTRY","AccountId","TransactionRecord","AccountRecordsQuery","constructor","props","_accountId","accountId","setAccountId","_fromProtobuf","query","records","cryptoGetAccountRecords","accountID","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getAccountRecords","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","map","record","transactionRecord","_onMakeRequest","_toProtobuf","_getLogId","timestamp","_paymentTransactionId","validStart","_timestamp","toString","set"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport TransactionRecord from \"../transaction/TransactionRecord.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HashgraphProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HashgraphProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HashgraphProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HashgraphProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsQuery} HashgraphProto.proto.ICryptoGetAccountRecordsQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsResponse} HashgraphProto.proto.ICryptoGetAccountRecordsResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionRecord} HashgraphProto.proto.ITransactionRecord\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get all the records for an account for any transfers into it and out of it,\n * that were above the threshold, during the last 25 hours.\n *\n * @augments {Query<TransactionRecord[]>}\n */\nexport default class AccountRecordsQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.IQuery} query\n     * @returns {AccountRecordsQuery}\n     */\n    static _fromProtobuf(query) {\n        const records =\n            /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsQuery} */ (\n                query.cryptoGetAccountRecords\n            );\n\n        return new AccountRecordsQuery({\n            accountId:\n                records.accountID != null\n                    ? AccountId._fromProtobuf(records.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the records are being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<HashgraphProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountRecords(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IResponse} response\n     * @returns {HashgraphProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetAccountRecords =\n            /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsResponse} */ (\n                response.cryptoGetAccountRecords\n            );\n        return /** @type {HashgraphProto.proto.IResponseHeader} */ (\n            cryptoGetAccountRecords.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HashgraphProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HashgraphProto.proto.IQuery} request\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cryptoGetAccountRecords =\n            /** @type {HashgraphProto.proto.ICryptoGetAccountRecordsResponse} */ (\n                response.cryptoGetAccountRecords\n            );\n        const records =\n            /** @type {HashgraphProto.proto.ITransactionRecord[]} */ (\n                cryptoGetAccountRecords.records\n            );\n\n        return Promise.resolve(\n            records.map((record) =>\n                TransactionRecord._fromProtobuf({ transactionRecord: record })\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HashgraphProto.proto.IQueryHeader} header\n     * @returns {HashgraphProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetAccountRecords: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `AccountRecordsQuery:${timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptoGetAccountRecords\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountRecordsQuery._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}