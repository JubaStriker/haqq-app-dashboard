{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"./AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport LiveHash from \"./LiveHash.js\";\nimport Hbar from \"../Hbar.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport TokenRelationshipMap from \"./TokenRelationshipMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"./TokenNftAllowance.js\").default} TokenNftAllowance\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * @typedef {object} AccountInfoJson\n * @property {string} accountId\n * @property {?string} contractAccountId\n * @property {boolean} isDeleted\n * @property {?string} proxyAccountId\n * @property {string} proxyReceived\n * @property {string} key\n * @property {string} balance\n * @property {string} sendRecordThreshold\n * @property {string} receiveRecordThreshold\n * @property {boolean} isReceiverSignatureRequired\n * @property {string} expirationTime\n * @property {string} autoRenewPeriod\n * @property {string} accountMemo\n * @property {string} ownedNfts\n * @property {string} maxAutomaticTokenAssociations\n * @property {?string} aliasKey\n * @property {?string} ledgerId\n * @property {?string} ethereumNonce\n * @property {?StakingInfoJson} stakingInfo\n */\n\n/**\n * Current information about an account, including the balance.\n */\n\nexport default class AccountInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {AccountId} props.accountId\n   * @param {?string} props.contractAccountId\n   * @param {boolean} props.isDeleted\n   * @param {?AccountId} props.proxyAccountId\n   * @param {Hbar} props.proxyReceived\n   * @param {Key} props.key\n   * @param {Hbar} props.balance\n   * @param {Hbar} props.sendRecordThreshold\n   * @param {Hbar} props.receiveRecordThreshold\n   * @param {boolean} props.isReceiverSignatureRequired\n   * @param {Timestamp} props.expirationTime\n   * @param {Duration} props.autoRenewPeriod\n   * @param {LiveHash[]} props.liveHashes\n   * @param {TokenRelationshipMap} props.tokenRelationships\n   * @param {string} props.accountMemo\n   * @param {Long} props.ownedNfts\n   * @param {Long} props.maxAutomaticTokenAssociations\n   * @param {PublicKey | null} props.aliasKey\n   * @param {LedgerId | null} props.ledgerId\n   * @param {HbarAllowance[]} props.hbarAllowances\n   * @param {TokenAllowance[]} props.tokenAllowances\n   * @param {TokenNftAllowance[]} props.nftAllowances\n   * @param {?Long} props.ethereumNonce\n   * @param {?StakingInfo} props.stakingInfo\n   */\n  constructor(props) {\n    /**\n     * The account ID for which this information applies.\n     *\n     * @readonly\n     */\n    this.accountId = props.accountId;\n    /**\n     * The Contract Account ID comprising of both the contract instance and the cryptocurrency\n     * account owned by the contract instance, in the format used by Solidity.\n     *\n     * @readonly\n     */\n\n    this.contractAccountId = props.contractAccountId;\n    /**\n     * If true, then this account has been deleted, it will disappear when it expires, and\n     * all transactions for it will fail except the transaction to extend its expiration date.\n     *\n     * @readonly\n     */\n\n    this.isDeleted = props.isDeleted;\n    /**\n     * @deprecated\n     *\n     * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,\n     * or is an invalid account, or is an account that isn't a node, then this account is\n     * automatically proxy staked to a node chosen by the network, but without earning payments.\n     * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently\n     * running a node, then it will behave as if proxyAccountID was null.\n     * @readonly\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n    this.proxyAccountId = props.proxyAccountId;\n    /**\n     * The total number of tinybars proxy staked to this account.\n     *\n     * @readonly\n     */\n\n    this.proxyReceived = props.proxyReceived;\n    /**\n     * The key for the account, which must sign in order to transfer out, or to modify the account\n     * in any way other than extending its expiration date.\n     *\n     * @readonly\n     */\n\n    this.key = props.key;\n    /**\n     * The current balance of account.\n     *\n     * @readonly\n     */\n\n    this.balance = props.balance;\n    /**\n     * The threshold amount (in tinybars) for which an account record is created (and this account\n     * charged for them) for any send/withdraw transaction.\n     *\n     * @readonly\n     */\n\n    this.sendRecordThreshold = props.sendRecordThreshold;\n    /**\n     * The threshold amount (in tinybars) for which an account record is created\n     * (and this account charged for them) for any transaction above this amount.\n     *\n     * @readonly\n     */\n\n    this.receiveRecordThreshold = props.receiveRecordThreshold;\n    /**\n     * If true, no transaction can transfer to this account unless signed by this account's key.\n     *\n     * @readonly\n     */\n\n    this.isReceiverSignatureRequired = props.isReceiverSignatureRequired;\n    /**\n     * The TimeStamp time at which this account is set to expire.\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * The duration for expiration time will extend every this many seconds. If there are\n     * insufficient funds, then it extends as long as possible. If it is empty when it\n     * expires, then it is deleted.\n     *\n     * @readonly\n     */\n\n    this.autoRenewPeriod = props.autoRenewPeriod;\n    /** @readonly */\n\n    this.liveHashes = props.liveHashes;\n    /** @readonly */\n\n    this.tokenRelationships = props.tokenRelationships;\n    /** @readonly */\n\n    this.accountMemo = props.accountMemo;\n    /** @readonly */\n\n    this.ownedNfts = props.ownedNfts;\n    /** @readonly */\n\n    this.maxAutomaticTokenAssociations = props.maxAutomaticTokenAssociations;\n    this.aliasKey = props.aliasKey;\n    this.ledgerId = props.ledgerId;\n    /*\n     * @deprecated - no longer supported\n     */\n\n    this.hbarAllowances = props.hbarAllowances;\n    /*\n     * @deprecated - no longer supported\n     */\n\n    this.tokenAllowances = props.tokenAllowances;\n    /*\n     * @deprecated - no longer supported\n     */\n\n    this.nftAllowances = props.nftAllowances;\n    /**\n     * The ethereum transaction nonce associated with this account.\n     */\n\n    this.ethereumNonce = props.ethereumNonce;\n    /**\n     * Staking metadata for this account.\n     */\n\n    this.stakingInfo = props.stakingInfo;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo} info\n   * @returns {AccountInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    let aliasKey = info.alias != null && info.alias.length > 0 ? Key._fromProtobufKey(HashgraphProto.proto.Key.decode(info.alias)) : null;\n\n    if (!(aliasKey instanceof PublicKey)) {\n      aliasKey = null;\n    }\n\n    const accountId = AccountId._fromProtobuf(\n    /** @type {HashgraphProto.proto.IAccountID} */\n    info.accountID);\n\n    return new AccountInfo({\n      accountId,\n      contractAccountId: info.contractAccountID != null ? info.contractAccountID : null,\n      isDeleted: info.deleted != null ? info.deleted : false,\n      key: Key._fromProtobufKey(\n      /** @type {HashgraphProto.proto.IKey} */\n      info.key),\n      balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n      sendRecordThreshold: Hbar.fromTinybars(info.generateSendRecordThreshold != null ? info.generateSendRecordThreshold : 0),\n      receiveRecordThreshold: Hbar.fromTinybars(info.generateReceiveRecordThreshold != null ? info.generateReceiveRecordThreshold : 0),\n      isReceiverSignatureRequired: info.receiverSigRequired != null ? info.receiverSigRequired : false,\n      expirationTime: Timestamp._fromProtobuf(\n      /** @type {HashgraphProto.proto.ITimestamp} */\n      info.expirationTime),\n      autoRenewPeriod: info.autoRenewPeriod != null ? new Duration(\n      /** @type {Long} */\n      info.autoRenewPeriod.seconds) : new Duration(0),\n      proxyAccountId: info.proxyAccountID != null && Long.fromValue(\n      /** @type {Long | number} */\n      info.proxyAccountID.shardNum).toInt() !== 0 && Long.fromValue(\n      /** @type {Long | number} */\n      info.proxyAccountID.realmNum).toInt() !== 0 && Long.fromValue(\n      /** @type {Long | number} */\n      info.proxyAccountID.accountNum).toInt() !== 0 ? AccountId._fromProtobuf(info.proxyAccountID) : null,\n      proxyReceived: Hbar.fromTinybars(info.proxyReceived != null ? info.proxyReceived : 0),\n      liveHashes: (info.liveHashes != null ? info.liveHashes : []).map(hash => LiveHash._fromProtobuf(hash)),\n      tokenRelationships: TokenRelationshipMap._fromProtobuf(info.tokenRelationships != null ? info.tokenRelationships : []),\n      accountMemo: info.memo != null ? info.memo : \"\",\n      ownedNfts: info.ownedNfts ? info.ownedNfts : Long.ZERO,\n      maxAutomaticTokenAssociations: info.maxAutomaticTokenAssociations ? Long.fromNumber(info.maxAutomaticTokenAssociations) : Long.ZERO,\n      aliasKey,\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null,\n      hbarAllowances: [],\n      tokenAllowances: [],\n      nftAllowances: [],\n      ethereumNonce: info.ethereumNonce != null ? info.ethereumNonce : null,\n      stakingInfo: info.stakingInfo != null ? StakingInfo._fromProtobuf(info.stakingInfo) : null\n    });\n  }\n  /**\n   * @returns {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      accountID: this.accountId._toProtobuf(),\n      contractAccountID: this.contractAccountId,\n      deleted: this.isDeleted,\n      proxyAccountID: // eslint-disable-next-line deprecation/deprecation\n      this.proxyAccountId != null ? // eslint-disable-next-line deprecation/deprecation\n      this.proxyAccountId._toProtobuf() : null,\n      proxyReceived: this.proxyReceived.toTinybars(),\n      key: this.key._toProtobufKey(),\n      balance: this.balance.toTinybars(),\n      generateSendRecordThreshold: this.sendRecordThreshold.toTinybars(),\n      generateReceiveRecordThreshold: this.receiveRecordThreshold.toTinybars(),\n      receiverSigRequired: this.isReceiverSignatureRequired,\n      expirationTime: this.expirationTime._toProtobuf(),\n      autoRenewPeriod: this.autoRenewPeriod._toProtobuf(),\n      liveHashes: this.liveHashes.map(hash => hash._toProtobuf()),\n      tokenRelationships: this.tokenRelationships != null ? this.tokenRelationships._toProtobuf() : null,\n      memo: this.accountMemo,\n      ownedNfts: this.ownedNfts,\n      maxAutomaticTokenAssociations: this.maxAutomaticTokenAssociations.toInt(),\n      alias: this.aliasKey != null ? HashgraphProto.proto.Key.encode(this.aliasKey._toProtobufKey()).finish() : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n      ethereumNonce: this.ethereumNonce,\n      stakingInfo: this.stakingInfo != null ? this.stakingInfo._toProtobuf() : null\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {AccountInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return AccountInfo._fromProtobuf(HashgraphProto.proto.CryptoGetInfoResponse.AccountInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return HashgraphProto.proto.CryptoGetInfoResponse.AccountInfo.encode(this._toProtobuf()).finish();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @returns {AccountInfoJson}\n   */\n\n\n  toJSON() {\n    return {\n      balance: this.balance.toString(),\n      accountId: this.accountId.toString(),\n      contractAccountId: this.contractAccountId,\n      isDeleted: this.isDeleted,\n      proxyAccountId: // eslint-disable-next-line deprecation/deprecation\n      this.proxyAccountId != null ? // eslint-disable-next-line deprecation/deprecation\n      this.proxyAccountId.toString() : null,\n      proxyReceived: this.proxyReceived.toString(),\n      key: this.key.toString(),\n      sendRecordThreshold: this.sendRecordThreshold.toString(),\n      receiveRecordThreshold: this.receiveRecordThreshold.toString(),\n      isReceiverSignatureRequired: this.isReceiverSignatureRequired,\n      expirationTime: this.expirationTime.toString(),\n      autoRenewPeriod: this.autoRenewPeriod.toString(),\n      accountMemo: this.accountMemo,\n      ownedNfts: this.ownedNfts.toString(),\n      maxAutomaticTokenAssociations: this.maxAutomaticTokenAssociations.toString(),\n      aliasKey: this.aliasKey != null ? this.aliasKey.toString() : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n      ethereumNonce: this.ethereumNonce != null ? this.ethereumNonce.toString() : null,\n      stakingInfo: this.stakingInfo != null ? this.stakingInfo.toJSON() : null\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/account/AccountInfo.js"],"names":["AccountId","StakingInfo","LiveHash","Hbar","Timestamp","Long","TokenRelationshipMap","HashgraphProto","Duration","Key","PublicKey","LedgerId","AccountInfo","constructor","props","accountId","contractAccountId","isDeleted","proxyAccountId","proxyReceived","key","balance","sendRecordThreshold","receiveRecordThreshold","isReceiverSignatureRequired","expirationTime","autoRenewPeriod","liveHashes","tokenRelationships","accountMemo","ownedNfts","maxAutomaticTokenAssociations","aliasKey","ledgerId","hbarAllowances","tokenAllowances","nftAllowances","ethereumNonce","stakingInfo","Object","freeze","_fromProtobuf","info","alias","length","_fromProtobufKey","proto","decode","accountID","contractAccountID","deleted","fromTinybars","generateSendRecordThreshold","generateReceiveRecordThreshold","receiverSigRequired","seconds","proxyAccountID","fromValue","shardNum","toInt","realmNum","accountNum","map","hash","memo","ZERO","fromNumber","fromBytes","_toProtobuf","toTinybars","_toProtobufKey","encode","finish","toBytes","bytes","CryptoGetInfoResponse","toString","JSON","stringify","toJSON"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,CAAkB;AAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,SAAL,GAAiBD,KAAK,CAACC,SAAvB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,iBAAL,GAAyBF,KAAK,CAACE,iBAA/B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBH,KAAK,CAACG,SAAvB;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;;AACA,SAAKC,cAAL,GAAsBJ,KAAK,CAACI,cAA5B;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,aAAL,GAAqBL,KAAK,CAACK,aAA3B;AAEA;AACR;AACA;AACA;AACA;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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"./AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport LiveHash from \"./LiveHash.js\";\nimport Hbar from \"../Hbar.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport TokenRelationshipMap from \"./TokenRelationshipMap.js\";\nimport * as HashgraphProto from \"@hashgraph/proto\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"./TokenNftAllowance.js\").default} TokenNftAllowance\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * @typedef {object} AccountInfoJson\n * @property {string} accountId\n * @property {?string} contractAccountId\n * @property {boolean} isDeleted\n * @property {?string} proxyAccountId\n * @property {string} proxyReceived\n * @property {string} key\n * @property {string} balance\n * @property {string} sendRecordThreshold\n * @property {string} receiveRecordThreshold\n * @property {boolean} isReceiverSignatureRequired\n * @property {string} expirationTime\n * @property {string} autoRenewPeriod\n * @property {string} accountMemo\n * @property {string} ownedNfts\n * @property {string} maxAutomaticTokenAssociations\n * @property {?string} aliasKey\n * @property {?string} ledgerId\n * @property {?string} ethereumNonce\n * @property {?StakingInfoJson} stakingInfo\n */\n\n/**\n * Current information about an account, including the balance.\n */\nexport default class AccountInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {AccountId} props.accountId\n     * @param {?string} props.contractAccountId\n     * @param {boolean} props.isDeleted\n     * @param {?AccountId} props.proxyAccountId\n     * @param {Hbar} props.proxyReceived\n     * @param {Key} props.key\n     * @param {Hbar} props.balance\n     * @param {Hbar} props.sendRecordThreshold\n     * @param {Hbar} props.receiveRecordThreshold\n     * @param {boolean} props.isReceiverSignatureRequired\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {LiveHash[]} props.liveHashes\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     * @param {string} props.accountMemo\n     * @param {Long} props.ownedNfts\n     * @param {Long} props.maxAutomaticTokenAssociations\n     * @param {PublicKey | null} props.aliasKey\n     * @param {LedgerId | null} props.ledgerId\n     * @param {HbarAllowance[]} props.hbarAllowances\n     * @param {TokenAllowance[]} props.tokenAllowances\n     * @param {TokenNftAllowance[]} props.nftAllowances\n     * @param {?Long} props.ethereumNonce\n     * @param {?StakingInfo} props.stakingInfo\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this information applies.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The Contract Account ID comprising of both the contract instance and the cryptocurrency\n         * account owned by the contract instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * If true, then this account has been deleted, it will disappear when it expires, and\n         * all transactions for it will fail except the transaction to extend its expiration date.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * @deprecated\n         *\n         * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,\n         * or is an invalid account, or is an account that isn't a node, then this account is\n         * automatically proxy staked to a node chosen by the network, but without earning payments.\n         * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently\n         * running a node, then it will behave as if proxyAccountID was null.\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.proxyAccountId = props.proxyAccountId;\n\n        /**\n         * The total number of tinybars proxy staked to this account.\n         *\n         * @readonly\n         */\n        this.proxyReceived = props.proxyReceived;\n\n        /**\n         * The key for the account, which must sign in order to transfer out, or to modify the account\n         * in any way other than extending its expiration date.\n         *\n         * @readonly\n         */\n        this.key = props.key;\n\n        /**\n         * The current balance of account.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created (and this account\n         * charged for them) for any send/withdraw transaction.\n         *\n         * @readonly\n         */\n        this.sendRecordThreshold = props.sendRecordThreshold;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created\n         * (and this account charged for them) for any transaction above this amount.\n         *\n         * @readonly\n         */\n        this.receiveRecordThreshold = props.receiveRecordThreshold;\n\n        /**\n         * If true, no transaction can transfer to this account unless signed by this account's key.\n         *\n         * @readonly\n         */\n        this.isReceiverSignatureRequired = props.isReceiverSignatureRequired;\n\n        /**\n         * The TimeStamp time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The duration for expiration time will extend every this many seconds. If there are\n         * insufficient funds, then it extends as long as possible. If it is empty when it\n         * expires, then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /** @readonly */\n        this.liveHashes = props.liveHashes;\n\n        /** @readonly */\n        this.tokenRelationships = props.tokenRelationships;\n\n        /** @readonly */\n        this.accountMemo = props.accountMemo;\n\n        /** @readonly */\n        this.ownedNfts = props.ownedNfts;\n\n        /** @readonly */\n        this.maxAutomaticTokenAssociations =\n            props.maxAutomaticTokenAssociations;\n\n        this.aliasKey = props.aliasKey;\n\n        this.ledgerId = props.ledgerId;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.hbarAllowances = props.hbarAllowances;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.tokenAllowances = props.tokenAllowances;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.nftAllowances = props.nftAllowances;\n\n        /**\n         * The ethereum transaction nonce associated with this account.\n         */\n        this.ethereumNonce = props.ethereumNonce;\n\n        /**\n         * Staking metadata for this account.\n         */\n        this.stakingInfo = props.stakingInfo;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo} info\n     * @returns {AccountInfo}\n     */\n    static _fromProtobuf(info) {\n        let aliasKey =\n            info.alias != null && info.alias.length > 0\n                ? Key._fromProtobufKey(\n                      HashgraphProto.proto.Key.decode(info.alias)\n                  )\n                : null;\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = null;\n        }\n\n        const accountId = AccountId._fromProtobuf(\n            /** @type {HashgraphProto.proto.IAccountID} */ (info.accountID)\n        );\n\n        return new AccountInfo({\n            accountId,\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : null,\n            isDeleted: info.deleted != null ? info.deleted : false,\n            key: Key._fromProtobufKey(\n                /** @type {HashgraphProto.proto.IKey} */ (info.key)\n            ),\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            sendRecordThreshold: Hbar.fromTinybars(\n                info.generateSendRecordThreshold != null\n                    ? info.generateSendRecordThreshold\n                    : 0\n            ),\n            receiveRecordThreshold: Hbar.fromTinybars(\n                info.generateReceiveRecordThreshold != null\n                    ? info.generateReceiveRecordThreshold\n                    : 0\n            ),\n            isReceiverSignatureRequired:\n                info.receiverSigRequired != null\n                    ? info.receiverSigRequired\n                    : false,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {HashgraphProto.proto.ITimestamp} */ (\n                    info.expirationTime\n                )\n            ),\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds)\n                      )\n                    : new Duration(0),\n            proxyAccountId:\n                info.proxyAccountID != null &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.shardNum)\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.realmNum)\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (\n                        info.proxyAccountID.accountNum\n                    )\n                ).toInt() !== 0\n                    ? AccountId._fromProtobuf(info.proxyAccountID)\n                    : null,\n            proxyReceived: Hbar.fromTinybars(\n                info.proxyReceived != null ? info.proxyReceived : 0\n            ),\n            liveHashes: (info.liveHashes != null ? info.liveHashes : []).map(\n                (hash) => LiveHash._fromProtobuf(hash)\n            ),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : []\n            ),\n            accountMemo: info.memo != null ? info.memo : \"\",\n            ownedNfts: info.ownedNfts ? info.ownedNfts : Long.ZERO,\n            maxAutomaticTokenAssociations: info.maxAutomaticTokenAssociations\n                ? Long.fromNumber(info.maxAutomaticTokenAssociations)\n                : Long.ZERO,\n            aliasKey,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            hbarAllowances: [],\n            tokenAllowances: [],\n            nftAllowances: [],\n            ethereumNonce:\n                info.ethereumNonce != null ? info.ethereumNonce : null,\n            stakingInfo:\n                info.stakingInfo != null\n                    ? StakingInfo._fromProtobuf(info.stakingInfo)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {HashgraphProto.proto.CryptoGetInfoResponse.IAccountInfo}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            deleted: this.isDeleted,\n            proxyAccountID:\n                // eslint-disable-next-line deprecation/deprecation\n                this.proxyAccountId != null\n                    ? // eslint-disable-next-line deprecation/deprecation\n                      this.proxyAccountId._toProtobuf()\n                    : null,\n            proxyReceived: this.proxyReceived.toTinybars(),\n            key: this.key._toProtobufKey(),\n            balance: this.balance.toTinybars(),\n            generateSendRecordThreshold: this.sendRecordThreshold.toTinybars(),\n            generateReceiveRecordThreshold:\n                this.receiveRecordThreshold.toTinybars(),\n            receiverSigRequired: this.isReceiverSignatureRequired,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod: this.autoRenewPeriod._toProtobuf(),\n            liveHashes: this.liveHashes.map((hash) => hash._toProtobuf()),\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n            memo: this.accountMemo,\n            ownedNfts: this.ownedNfts,\n            maxAutomaticTokenAssociations:\n                this.maxAutomaticTokenAssociations.toInt(),\n            alias:\n                this.aliasKey != null\n                    ? HashgraphProto.proto.Key.encode(\n                          this.aliasKey._toProtobufKey()\n                      ).finish()\n                    : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            ethereumNonce: this.ethereumNonce,\n            stakingInfo:\n                this.stakingInfo != null\n                    ? this.stakingInfo._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountInfo}\n     */\n    static fromBytes(bytes) {\n        return AccountInfo._fromProtobuf(\n            HashgraphProto.proto.CryptoGetInfoResponse.AccountInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HashgraphProto.proto.CryptoGetInfoResponse.AccountInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {AccountInfoJson}\n     */\n    toJSON() {\n        return {\n            balance: this.balance.toString(),\n            accountId: this.accountId.toString(),\n            contractAccountId: this.contractAccountId,\n            isDeleted: this.isDeleted,\n            proxyAccountId:\n                // eslint-disable-next-line deprecation/deprecation\n                this.proxyAccountId != null\n                    ? // eslint-disable-next-line deprecation/deprecation\n                      this.proxyAccountId.toString()\n                    : null,\n            proxyReceived: this.proxyReceived.toString(),\n            key: this.key.toString(),\n            sendRecordThreshold: this.sendRecordThreshold.toString(),\n            receiveRecordThreshold: this.receiveRecordThreshold.toString(),\n            isReceiverSignatureRequired: this.isReceiverSignatureRequired,\n            expirationTime: this.expirationTime.toString(),\n            autoRenewPeriod: this.autoRenewPeriod.toString(),\n            accountMemo: this.accountMemo,\n            ownedNfts: this.ownedNfts.toString(),\n            maxAutomaticTokenAssociations:\n                this.maxAutomaticTokenAssociations.toString(),\n            aliasKey: this.aliasKey != null ? this.aliasKey.toString() : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n            ethereumNonce:\n                this.ethereumNonce != null\n                    ? this.ethereumNonce.toString()\n                    : null,\n            stakingInfo:\n                this.stakingInfo != null ? this.stakingInfo.toJSON() : null,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}