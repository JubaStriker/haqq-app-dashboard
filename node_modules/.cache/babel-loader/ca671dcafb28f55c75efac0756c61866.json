{"ast":null,"code":"/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\nimport AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport FileId from \"../file/FileId.js\";\nimport CACHE from \"../Cache.js\";\nimport Logger from \"js-logger\";\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../address_book/NodeAddressBook.js\").default} NodeAddressBook\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | string} network\n * @property {string[] | string} [mirrorNetwork]\n * @property {Operator} [operator]\n * @property {boolean} [scheduleNetworkUpdate]\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\n\nexport default class Client {\n  /**\n   * @protected\n   * @hideconstructor\n   * @param {ClientConfiguration} [props]\n   */\n  constructor(props) {\n    /**\n     * List of mirror network URLs.\n     *\n     * @internal\n     * @type {MirrorNetwork}\n     */\n    this._mirrorNetwork = new MirrorNetwork(this._createMirrorNetworkChannel());\n    /**\n     * Map of node account ID (as a string)\n     * to the node URL.\n     *\n     * @internal\n     * @type {Network}\n     */\n\n    this._network = new Network(this._createNetworkChannel());\n    /**\n     * @internal\n     * @type {?ClientOperator}\n     */\n\n    this._operator = null;\n    /**\n     * @private\n     * @type {?Hbar}\n     */\n\n    this._defaultMaxTransactionFee = null;\n    /**\n     * @private\n     * @type {Hbar}\n     */\n\n    this._maxQueryPayment = new Hbar(1);\n\n    if (props != null) {\n      if (props.operator != null) {\n        this.setOperator(props.operator.accountId, props.operator.privateKey);\n      }\n    }\n    /** @type {number | null} */\n\n\n    this._maxAttempts = null;\n    /** @private */\n\n    this._signOnDemand = false;\n    /** @private */\n\n    this._autoValidateChecksums = false;\n    /** @private */\n\n    this._minBackoff = 250;\n    /** @private */\n\n    this._maxBackoff = 8000;\n    /** @private */\n\n    this._defaultRegenerateTransactionId = true;\n    /** @private */\n\n    this._requestTimeout = null;\n    /** @private */\n\n    this._networkUpdatePeriod = 10000;\n    /** @private */\n\n    this._isShutdown = false;\n\n    if (props != null && props.scheduleNetworkUpdate !== false) {\n      this._scheduleNetworkUpdate();\n    }\n  }\n  /**\n   * @deprecated\n   * @param {NetworkName} networkName\n   * @returns {this}\n   */\n\n\n  setNetworkName(networkName) {\n    // uses custom NetworkName type\n    // remove if phasing out set|get NetworkName\n    console.warn(\"Deprecated: Use `setLedgerId` instead\");\n    return this.setLedgerId(networkName);\n  }\n  /**\n   * @deprecated\n   * @returns {string | null}\n   */\n\n\n  get networkName() {\n    console.warn(\"Deprecated: Use `ledgerId` instead\");\n    return this.ledgerId != null ? this.ledgerId.toString() : null;\n  }\n  /**\n   * @param {string|LedgerId} ledgerId\n   * @returns {this}\n   */\n\n\n  setLedgerId(ledgerId) {\n    this._network.setLedgerId(typeof ledgerId === \"string\" ? LedgerId.fromString(ledgerId) : ledgerId);\n\n    return this;\n  }\n  /**\n   * @returns {LedgerId | null}\n   */\n\n\n  get ledgerId() {\n    return this._network._ledgerId != null ? this._network.ledgerId : null;\n  }\n  /**\n   * @param {{[key: string]: (string | AccountId)} | string} network\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setNetwork(network) {\n    // TODO: This logic _can_ be de-duplicated and likely should\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @param {NodeAddressBook} addressBook\n   * @returns {this}\n   */\n\n\n  setNetworkFromAddressBook(addressBook) {\n    this._network.setNetworkFromAddressBook(addressBook);\n\n    return this;\n  }\n  /**\n   * @returns {{[key: string]: (string | AccountId)}}\n   */\n\n\n  get network() {\n    return this._network.network;\n  }\n  /**\n   * @param {string[] | string} mirrorNetwork\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setMirrorNetwork(mirrorNetwork) {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @returns {string[]}\n   */\n\n\n  get mirrorNetwork() {\n    return this._mirrorNetwork.network;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get signOnDemand() {\n    return this._signOnDemand;\n  }\n  /**\n   * @param {boolean} signOnDemand\n   */\n\n\n  setSignOnDemand(signOnDemand) {\n    this._signOnDemand = signOnDemand;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isTransportSecurity() {\n    return this._network.isTransportSecurity();\n  }\n  /**\n   * @param {boolean} transportSecurity\n   * @returns {this}\n   */\n\n\n  setTransportSecurity(transportSecurity) {\n    this._network.setTransportSecurity(transportSecurity);\n\n    this._mirrorNetwork.setTransportSecurity(transportSecurity);\n\n    return this;\n  }\n  /**\n   * Set the account that will, by default, pay for transactions and queries built with this client.\n   *\n   * @param {AccountId | string} accountId\n   * @param {PrivateKey | string} privateKey\n   * @returns {this}\n   */\n\n\n  setOperator(accountId, privateKey) {\n    const key = typeof privateKey === \"string\" ? PrivateKey.fromString(privateKey) : privateKey;\n    return this.setOperatorWith(accountId, key.publicKey, message => Promise.resolve(key.sign(message)));\n  }\n  /**\n   * Sets the account that will, by default, pay for transactions and queries built with\n   * this client.\n   *\n   * @param {AccountId | string} accountId\n   * @param {PublicKey | string} publicKey\n   * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n   * @returns {this}\n   */\n\n\n  setOperatorWith(accountId, publicKey, transactionSigner) {\n    const accountId_ = accountId instanceof AccountId ? accountId : AccountId.fromString(accountId);\n\n    if (this._network._ledgerId != null) {\n      accountId_.validateChecksum(this);\n    }\n\n    this._operator = {\n      transactionSigner,\n      accountId: accountId_,\n      publicKey: publicKey instanceof PublicKey ? publicKey : PublicKey.fromString(publicKey)\n    };\n    return this;\n  }\n  /**\n   * @param {boolean} value\n   * @returns {this}\n   */\n\n\n  setAutoValidateChecksums(value) {\n    this._autoValidateChecksums = value;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isAutoValidateChecksumsEnabled() {\n    return this._autoValidateChecksums;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get operatorAccountId() {\n    return this._operator != null ? this._operator.accountId : null;\n  }\n  /**\n   * @returns {?PublicKey}\n   */\n\n\n  get operatorPublicKey() {\n    return this._operator != null ? this._operator.publicKey : null;\n  }\n  /**\n   * @deprecated - Use `defaultMaxTransactionFee` instead\n   * @returns {?Hbar}\n   */\n\n\n  get maxTransactionFee() {\n    return this._defaultMaxTransactionFee;\n  }\n  /**\n   * @deprecated - Use `setDefaultMaxTransactionFee()` instead\n   * Set the maximum fee to be paid for transactions\n   * executed by this client.\n   * @param {Hbar} maxTransactionFee\n   * @returns {this}\n   */\n\n\n  setMaxTransactionFee(maxTransactionFee) {\n    this._defaultMaxTransactionFee = maxTransactionFee;\n    return this;\n  }\n  /**\n   * @returns {?Hbar}\n   */\n\n\n  get defaultMaxTransactionFee() {\n    return this._defaultMaxTransactionFee;\n  }\n  /**\n   * Set the defaultimum fee to be paid for transactions\n   * executed by this client.\n   *\n   * @param {Hbar} defaultMaxTransactionFee\n   * @returns {this}\n   */\n\n\n  setDefaultMaxTransactionFee(defaultMaxTransactionFee) {\n    this._defaultMaxTransactionFee = defaultMaxTransactionFee;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get defaultRegenerateTransactionId() {\n    return this._defaultRegenerateTransactionId;\n  }\n  /**\n   * Set if a new transaction ID should be generated when a `TRANSACTION_EXPIRED` status\n   * is returned.\n   *\n   * @param {boolean} defaultRegenerateTransactionId\n   * @returns {this}\n   */\n\n\n  setDefaultRegenerateTransactionId(defaultRegenerateTransactionId) {\n    this._defaultRegenerateTransactionId = defaultRegenerateTransactionId;\n    return this;\n  }\n  /**\n   * @returns {Hbar}\n   */\n\n\n  get maxQueryPayment() {\n    return this._maxQueryPayment;\n  }\n  /**\n   * Set the maximum payment allowable for queries.\n   *\n   * @param {Hbar} maxQueryPayment\n   * @returns {Client<ChannelT, MirrorChannelT>}\n   */\n\n\n  setMaxQueryPayment(maxQueryPayment) {\n    this._maxQueryPayment = maxQueryPayment;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxAttempts() {\n    return this._maxAttempts != null ? this._maxAttempts : 10;\n  }\n  /**\n   * @param {number} maxAttempts\n   * @returns {this}\n   */\n\n\n  setMaxAttempts(maxAttempts) {\n    this._maxAttempts = maxAttempts;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxNodeAttempts() {\n    return this._network.maxNodeAttempts;\n  }\n  /**\n   * @param {number} maxNodeAttempts\n   * @returns {this}\n   */\n\n\n  setMaxNodeAttempts(maxNodeAttempts) {\n    this._network.setMaxNodeAttempts(maxNodeAttempts);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeWaitTime() {\n    return this._network.minBackoff;\n  }\n  /**\n   * @param {number} nodeWaitTime\n   * @returns {this}\n   */\n\n\n  setNodeWaitTime(nodeWaitTime) {\n    this._network.setMinBackoff(nodeWaitTime);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxNodesPerTransaction() {\n    return this._network.maxNodesPerTransaction;\n  }\n  /**\n   * @param {number} maxNodesPerTransaction\n   * @returns {this}\n   */\n\n\n  setMaxNodesPerTransaction(maxNodesPerTransaction) {\n    this._network.setMaxNodesPerTransaction(maxNodesPerTransaction);\n\n    return this;\n  }\n  /**\n   * @param {?number} minBackoff\n   * @returns {this}\n   */\n\n\n  setMinBackoff(minBackoff) {\n    if (minBackoff == null) {\n      throw new Error(\"minBackoff cannot be null.\");\n    }\n\n    if (minBackoff > this._maxBackoff) {\n      throw new Error(\"minBackoff cannot be larger than maxBackoff.\");\n    }\n\n    this._minBackoff = minBackoff;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get minBackoff() {\n    return this._minBackoff;\n  }\n  /**\n   * @param {?number} maxBackoff\n   * @returns {this}\n   */\n\n\n  setMaxBackoff(maxBackoff) {\n    if (maxBackoff == null) {\n      throw new Error(\"maxBackoff cannot be null.\");\n    } else if (maxBackoff < this._minBackoff) {\n      throw new Error(\"maxBackoff cannot be smaller than minBackoff.\");\n    }\n\n    this._maxBackoff = maxBackoff;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxBackoff() {\n    return this._maxBackoff;\n  }\n  /**\n   * @param {number} nodeMinBackoff\n   * @returns {this}\n   */\n\n\n  setNodeMinBackoff(nodeMinBackoff) {\n    this._network.setMinBackoff(nodeMinBackoff);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeMinBackoff() {\n    return this._network.minBackoff;\n  }\n  /**\n   * @param {number} nodeMaxBackoff\n   * @returns {this}\n   */\n\n\n  setNodeMaxBackoff(nodeMaxBackoff) {\n    this._network.setMaxBackoff(nodeMaxBackoff);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeMaxBackoff() {\n    return this._network.maxBackoff;\n  }\n  /**\n   * @param {number} nodeMinReadmitPeriod\n   * @returns {this}\n   */\n\n\n  setNodeMinReadmitPeriod(nodeMinReadmitPeriod) {\n    this._network.setNodeMinReadmitPeriod(nodeMinReadmitPeriod);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeMinReadmitPeriod() {\n    return this._network.nodeMinReadmitPeriod;\n  }\n  /**\n   * @param {number} nodeMaxReadmitPeriod\n   * @returns {this}\n   */\n\n\n  setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod) {\n    this._network.setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeMaxReadmitPeriod() {\n    return this._network.nodeMaxReadmitPeriod;\n  }\n  /**\n   * @param {number} requestTimeout - Number of milliseconds\n   * @returns {this}\n   */\n\n\n  setRequestTimeout(requestTimeout) {\n    this._requestTimeout = requestTimeout;\n    return this;\n  }\n  /**\n   * @returns {?number}\n   */\n\n\n  get requestTimeout() {\n    return this._requestTimeout;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get networkUpdatePeriod() {\n    return this._networkUpdatePeriod;\n  }\n  /**\n   * @param {number} networkUpdatePeriod\n   * @returns {this}\n   */\n\n\n  setNetworkUpdatePeriod(networkUpdatePeriod) {\n    this._networkUpdatePeriod = networkUpdatePeriod;\n    return this;\n  }\n  /**\n   * @param {AccountId | string} accountId\n   */\n\n\n  async ping(accountId) {\n    try {\n      await new AccountBalanceQuery({\n        accountId\n      }).setNodeAccountIds([accountId instanceof AccountId ? accountId : AccountId.fromString(accountId)]).execute(this);\n    } catch (_) {// Do nothing\n    }\n  }\n\n  async pingAll() {\n    for (const nodeAccountId of Object.values(this._network.network)) {\n      await this.ping(nodeAccountId);\n    }\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  close() {\n    this._network.close();\n\n    this._mirrorNetwork.close();\n\n    this._isShutdown = true;\n  }\n  /**\n   * @abstract\n   * @returns {(address: string) => ChannelT}\n   */\n\n\n  _createNetworkChannel() {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @abstract\n   * @returns {(address: string) => MirrorChannelT}\n   */\n\n\n  _createMirrorNetworkChannel() {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @private\n   */\n\n\n  _scheduleNetworkUpdate() {\n    // This is the automatic network update promise that _eventually_ completes\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises,@typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      try {\n        const addressBook = await CACHE.addressBookQueryConstructor().setFileId(FileId.ADDRESS_BOOK).execute(this);\n        this.setNetworkFromAddressBook(addressBook);\n\n        if (!this._isShutdown) {\n          // Recall this method to continuously update the network\n          // every `networkUpdatePeriod` amount of itme\n          this._scheduleNetworkUpdate();\n        }\n      } catch (error) {\n        Logger.trace(`failed to update client address book: ${\n        /** @type {Error} */\n        error.toString()}`);\n      }\n    }, this._networkUpdatePeriod);\n  }\n\n}","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/node_modules/@hashgraph/sdk/src/client/Client.js"],"names":["AccountId","AccountBalanceQuery","Hbar","Network","MirrorNetwork","PublicKey","PrivateKey","LedgerId","FileId","CACHE","Logger","Client","constructor","props","_mirrorNetwork","_createMirrorNetworkChannel","_network","_createNetworkChannel","_operator","_defaultMaxTransactionFee","_maxQueryPayment","operator","setOperator","accountId","privateKey","_maxAttempts","_signOnDemand","_autoValidateChecksums","_minBackoff","_maxBackoff","_defaultRegenerateTransactionId","_requestTimeout","_networkUpdatePeriod","_isShutdown","scheduleNetworkUpdate","_scheduleNetworkUpdate","setNetworkName","networkName","console","warn","setLedgerId","ledgerId","toString","fromString","_ledgerId","setNetwork","network","Error","setNetworkFromAddressBook","addressBook","setMirrorNetwork","mirrorNetwork","signOnDemand","setSignOnDemand","isTransportSecurity","setTransportSecurity","transportSecurity","key","setOperatorWith","publicKey","message","Promise","resolve","sign","transactionSigner","accountId_","validateChecksum","setAutoValidateChecksums","value","isAutoValidateChecksumsEnabled","operatorAccountId","operatorPublicKey","maxTransactionFee","setMaxTransactionFee","defaultMaxTransactionFee","setDefaultMaxTransactionFee","defaultRegenerateTransactionId","setDefaultRegenerateTransactionId","maxQueryPayment","setMaxQueryPayment","maxAttempts","setMaxAttempts","maxNodeAttempts","setMaxNodeAttempts","nodeWaitTime","minBackoff","setNodeWaitTime","setMinBackoff","maxNodesPerTransaction","setMaxNodesPerTransaction","setMaxBackoff","maxBackoff","setNodeMinBackoff","nodeMinBackoff","setNodeMaxBackoff","nodeMaxBackoff","setNodeMinReadmitPeriod","nodeMinReadmitPeriod","setNodeMaxReadmitPeriod","nodeMaxReadmitPeriod","setRequestTimeout","requestTimeout","networkUpdatePeriod","setNetworkUpdatePeriod","ping","setNodeAccountIds","execute","_","pingAll","nodeAccountId","Object","values","close","setTimeout","addressBookQueryConstructor","setFileId","ADDRESS_BOOK","error","trace"],"mappings":"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","sourcesContent":["/*-\n * ‌\n * Hedera JavaScript SDK\n * ​\n * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍\n */\n\nimport AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport FileId from \"../file/FileId.js\";\nimport CACHE from \"../Cache.js\";\nimport Logger from \"js-logger\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../address_book/NodeAddressBook.js\").default} NodeAddressBook\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | string} network\n * @property {string[] | string} [mirrorNetwork]\n * @property {Operator} [operator]\n * @property {boolean} [scheduleNetworkUpdate]\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\nexport default class Client {\n    /**\n     * @protected\n     * @hideconstructor\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        /**\n         * List of mirror network URLs.\n         *\n         * @internal\n         * @type {MirrorNetwork}\n         */\n        this._mirrorNetwork = new MirrorNetwork(\n            this._createMirrorNetworkChannel()\n        );\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Network}\n         */\n        this._network = new Network(this._createNetworkChannel());\n\n        /**\n         * @internal\n         * @type {?ClientOperator}\n         */\n        this._operator = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._defaultMaxTransactionFee = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxQueryPayment = new Hbar(1);\n\n        if (props != null) {\n            if (props.operator != null) {\n                this.setOperator(\n                    props.operator.accountId,\n                    props.operator.privateKey\n                );\n            }\n        }\n\n        /** @type {number | null} */\n        this._maxAttempts = null;\n\n        /** @private */\n        this._signOnDemand = false;\n\n        /** @private */\n        this._autoValidateChecksums = false;\n\n        /** @private */\n        this._minBackoff = 250;\n\n        /** @private */\n        this._maxBackoff = 8000;\n\n        /** @private */\n        this._defaultRegenerateTransactionId = true;\n\n        /** @private */\n        this._requestTimeout = null;\n\n        /** @private */\n        this._networkUpdatePeriod = 10000;\n\n        /** @private */\n        this._isShutdown = false;\n\n        if (props != null && props.scheduleNetworkUpdate !== false) {\n            this._scheduleNetworkUpdate();\n        }\n    }\n\n    /**\n     * @deprecated\n     * @param {NetworkName} networkName\n     * @returns {this}\n     */\n    setNetworkName(networkName) {\n        // uses custom NetworkName type\n        // remove if phasing out set|get NetworkName\n        console.warn(\"Deprecated: Use `setLedgerId` instead\");\n        return this.setLedgerId(networkName);\n    }\n\n    /**\n     * @deprecated\n     * @returns {string | null}\n     */\n    get networkName() {\n        console.warn(\"Deprecated: Use `ledgerId` instead\");\n        return this.ledgerId != null ? this.ledgerId.toString() : null;\n    }\n\n    /**\n     * @param {string|LedgerId} ledgerId\n     * @returns {this}\n     */\n    setLedgerId(ledgerId) {\n        this._network.setLedgerId(\n            typeof ledgerId === \"string\"\n                ? LedgerId.fromString(ledgerId)\n                : ledgerId\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {LedgerId | null}\n     */\n    get ledgerId() {\n        return this._network._ledgerId != null ? this._network.ledgerId : null;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNetwork(network) {\n        // TODO: This logic _can_ be de-duplicated and likely should\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @param {NodeAddressBook} addressBook\n     * @returns {this}\n     */\n    setNetworkFromAddressBook(addressBook) {\n        this._network.setNetworkFromAddressBook(addressBook);\n        return this;\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    get network() {\n        return this._network.network;\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    get mirrorNetwork() {\n        return this._mirrorNetwork.network;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get signOnDemand() {\n        return this._signOnDemand;\n    }\n\n    /**\n     * @param {boolean} signOnDemand\n     */\n    setSignOnDemand(signOnDemand) {\n        this._signOnDemand = signOnDemand;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTransportSecurity() {\n        return this._network.isTransportSecurity();\n    }\n\n    /**\n     * @param {boolean} transportSecurity\n     * @returns {this}\n     */\n    setTransportSecurity(transportSecurity) {\n        this._network.setTransportSecurity(transportSecurity);\n        this._mirrorNetwork.setTransportSecurity(transportSecurity);\n        return this;\n    }\n\n    /**\n     * Set the account that will, by default, pay for transactions and queries built with this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @returns {this}\n     */\n    setOperator(accountId, privateKey) {\n        const key =\n            typeof privateKey === \"string\"\n                ? PrivateKey.fromString(privateKey)\n                : privateKey;\n\n        return this.setOperatorWith(accountId, key.publicKey, (message) =>\n            Promise.resolve(key.sign(message))\n        );\n    }\n\n    /**\n     * Sets the account that will, by default, pay for transactions and queries built with\n     * this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PublicKey | string} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    setOperatorWith(accountId, publicKey, transactionSigner) {\n        const accountId_ =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        if (this._network._ledgerId != null) {\n            accountId_.validateChecksum(this);\n        }\n\n        this._operator = {\n            transactionSigner,\n\n            accountId: accountId_,\n\n            publicKey:\n                publicKey instanceof PublicKey\n                    ? publicKey\n                    : PublicKey.fromString(publicKey),\n        };\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} value\n     * @returns {this}\n     */\n    setAutoValidateChecksums(value) {\n        this._autoValidateChecksums = value;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isAutoValidateChecksumsEnabled() {\n        return this._autoValidateChecksums;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get operatorAccountId() {\n        return this._operator != null ? this._operator.accountId : null;\n    }\n\n    /**\n     * @returns {?PublicKey}\n     */\n    get operatorPublicKey() {\n        return this._operator != null ? this._operator.publicKey : null;\n    }\n\n    /**\n     * @deprecated - Use `defaultMaxTransactionFee` instead\n     * @returns {?Hbar}\n     */\n    get maxTransactionFee() {\n        return this._defaultMaxTransactionFee;\n    }\n\n    /**\n     * @deprecated - Use `setDefaultMaxTransactionFee()` instead\n     * Set the maximum fee to be paid for transactions\n     * executed by this client.\n     * @param {Hbar} maxTransactionFee\n     * @returns {this}\n     */\n    setMaxTransactionFee(maxTransactionFee) {\n        this._defaultMaxTransactionFee = maxTransactionFee;\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get defaultMaxTransactionFee() {\n        return this._defaultMaxTransactionFee;\n    }\n\n    /**\n     * Set the defaultimum fee to be paid for transactions\n     * executed by this client.\n     *\n     * @param {Hbar} defaultMaxTransactionFee\n     * @returns {this}\n     */\n    setDefaultMaxTransactionFee(defaultMaxTransactionFee) {\n        this._defaultMaxTransactionFee = defaultMaxTransactionFee;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get defaultRegenerateTransactionId() {\n        return this._defaultRegenerateTransactionId;\n    }\n\n    /**\n     * Set if a new transaction ID should be generated when a `TRANSACTION_EXPIRED` status\n     * is returned.\n     *\n     * @param {boolean} defaultRegenerateTransactionId\n     * @returns {this}\n     */\n    setDefaultRegenerateTransactionId(defaultRegenerateTransactionId) {\n        this._defaultRegenerateTransactionId = defaultRegenerateTransactionId;\n        return this;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get maxQueryPayment() {\n        return this._maxQueryPayment;\n    }\n\n    /**\n     * Set the maximum payment allowable for queries.\n     *\n     * @param {Hbar} maxQueryPayment\n     * @returns {Client<ChannelT, MirrorChannelT>}\n     */\n    setMaxQueryPayment(maxQueryPayment) {\n        this._maxQueryPayment = maxQueryPayment;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxAttempts() {\n        return this._maxAttempts != null ? this._maxAttempts : 10;\n    }\n\n    /**\n     * @param {number} maxAttempts\n     * @returns {this}\n     */\n    setMaxAttempts(maxAttempts) {\n        this._maxAttempts = maxAttempts;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodeAttempts() {\n        return this._network.maxNodeAttempts;\n    }\n\n    /**\n     * @param {number} maxNodeAttempts\n     * @returns {this}\n     */\n    setMaxNodeAttempts(maxNodeAttempts) {\n        this._network.setMaxNodeAttempts(maxNodeAttempts);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeWaitTime() {\n        return this._network.minBackoff;\n    }\n\n    /**\n     * @param {number} nodeWaitTime\n     * @returns {this}\n     */\n    setNodeWaitTime(nodeWaitTime) {\n        this._network.setMinBackoff(nodeWaitTime);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodesPerTransaction() {\n        return this._network.maxNodesPerTransaction;\n    }\n\n    /**\n     * @param {number} maxNodesPerTransaction\n     * @returns {this}\n     */\n    setMaxNodesPerTransaction(maxNodesPerTransaction) {\n        this._network.setMaxNodesPerTransaction(maxNodesPerTransaction);\n        return this;\n    }\n\n    /**\n     * @param {?number} minBackoff\n     * @returns {this}\n     */\n    setMinBackoff(minBackoff) {\n        if (minBackoff == null) {\n            throw new Error(\"minBackoff cannot be null.\");\n        }\n        if (minBackoff > this._maxBackoff) {\n            throw new Error(\"minBackoff cannot be larger than maxBackoff.\");\n        }\n        this._minBackoff = minBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get minBackoff() {\n        return this._minBackoff;\n    }\n\n    /**\n     * @param {?number} maxBackoff\n     * @returns {this}\n     */\n    setMaxBackoff(maxBackoff) {\n        if (maxBackoff == null) {\n            throw new Error(\"maxBackoff cannot be null.\");\n        } else if (maxBackoff < this._minBackoff) {\n            throw new Error(\"maxBackoff cannot be smaller than minBackoff.\");\n        }\n        this._maxBackoff = maxBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxBackoff() {\n        return this._maxBackoff;\n    }\n\n    /**\n     * @param {number} nodeMinBackoff\n     * @returns {this}\n     */\n    setNodeMinBackoff(nodeMinBackoff) {\n        this._network.setMinBackoff(nodeMinBackoff);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMinBackoff() {\n        return this._network.minBackoff;\n    }\n\n    /**\n     * @param {number} nodeMaxBackoff\n     * @returns {this}\n     */\n    setNodeMaxBackoff(nodeMaxBackoff) {\n        this._network.setMaxBackoff(nodeMaxBackoff);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMaxBackoff() {\n        return this._network.maxBackoff;\n    }\n\n    /**\n     * @param {number} nodeMinReadmitPeriod\n     * @returns {this}\n     */\n    setNodeMinReadmitPeriod(nodeMinReadmitPeriod) {\n        this._network.setNodeMinReadmitPeriod(nodeMinReadmitPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMinReadmitPeriod() {\n        return this._network.nodeMinReadmitPeriod;\n    }\n\n    /**\n     * @param {number} nodeMaxReadmitPeriod\n     * @returns {this}\n     */\n    setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod) {\n        this._network.setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMaxReadmitPeriod() {\n        return this._network.nodeMaxReadmitPeriod;\n    }\n\n    /**\n     * @param {number} requestTimeout - Number of milliseconds\n     * @returns {this}\n     */\n    setRequestTimeout(requestTimeout) {\n        this._requestTimeout = requestTimeout;\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get requestTimeout() {\n        return this._requestTimeout;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get networkUpdatePeriod() {\n        return this._networkUpdatePeriod;\n    }\n\n    /**\n     * @param {number} networkUpdatePeriod\n     * @returns {this}\n     */\n    setNetworkUpdatePeriod(networkUpdatePeriod) {\n        this._networkUpdatePeriod = networkUpdatePeriod;\n        return this;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     */\n    async ping(accountId) {\n        try {\n            await new AccountBalanceQuery({ accountId })\n                .setNodeAccountIds([\n                    accountId instanceof AccountId\n                        ? accountId\n                        : AccountId.fromString(accountId),\n                ])\n                .execute(this);\n        } catch (_) {\n            // Do nothing\n        }\n    }\n\n    async pingAll() {\n        for (const nodeAccountId of Object.values(this._network.network)) {\n            await this.ping(nodeAccountId);\n        }\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._network.close();\n        this._mirrorNetwork.close();\n        this._isShutdown = true;\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => ChannelT}\n     */\n    _createNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => MirrorChannelT}\n     */\n    _createMirrorNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @private\n     */\n    _scheduleNetworkUpdate() {\n        // This is the automatic network update promise that _eventually_ completes\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises,@typescript-eslint/no-misused-promises\n        setTimeout(async () => {\n            try {\n                const addressBook = await CACHE.addressBookQueryConstructor()\n                    .setFileId(FileId.ADDRESS_BOOK)\n                    .execute(this);\n                this.setNetworkFromAddressBook(addressBook);\n\n                if (!this._isShutdown) {\n                    // Recall this method to continuously update the network\n                    // every `networkUpdatePeriod` amount of itme\n                    this._scheduleNetworkUpdate();\n                }\n            } catch (error) {\n                Logger.trace(\n                    `failed to update client address book: ${\n                        /** @type {Error} */ (error).toString()\n                    }`\n                );\n            }\n        }, this._networkUpdatePeriod);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}