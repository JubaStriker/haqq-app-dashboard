{"ast":null,"code":"import { HashConnectConnectionState } from \"../types\";\nimport { RelayMessageType } from \".\";\nexport class MessageHandler {\n  async onPayload(message, hc) {\n    const parsedData = message.data;\n    if (message.origin) parsedData.origin = message.origin;\n    if (hc.debug) console.log(`hashconnect - Message Received of type ${message.type}, sent at ${message.timestamp.toString()}`, parsedData); // Should always have a topic\n\n    if (!parsedData.topic) {\n      console.error(\"hashconnect - no topic in message\");\n    }\n\n    switch (message.type) {\n      case RelayMessageType.ApprovePairing:\n        if (hc.debug) console.log(\"hashconnect - approved\", message.data);\n        let approval_data = message.data;\n        let newPairingData = {\n          accountIds: approval_data.accountIds,\n          metadata: approval_data.metadata,\n          network: approval_data.network,\n          topic: approval_data.topic,\n          origin: approval_data.origin,\n          encryptionKey: hc.hcData.encryptionKey,\n          lastUsed: new Date().getTime()\n        };\n        approval_data.pairingData = newPairingData;\n        hc.pairingEvent.emit(approval_data);\n        hc.connectionStatusChangeEvent.emit(HashConnectConnectionState.Paired);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[approval_data.topic], approval_data.id);\n        break;\n\n      case RelayMessageType.Acknowledge:\n        let ack_data = message.data;\n        if (hc.debug) console.log(\"hashconnect - acknowledged - id: \" + ack_data.msg_id);\n        hc.acknowledgeMessageEvent.emit(ack_data);\n        break;\n\n      case RelayMessageType.Transaction:\n        if (hc.debug) console.log(\"hashconnect - Got transaction\", message);\n        let transaction_data = message.data;\n        transaction_data.byteArray = new Uint8Array(Buffer.from(transaction_data.byteArray, 'base64'));\n        hc.transactionEvent.emit(transaction_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[transaction_data.topic], transaction_data.id);\n        break;\n\n      case RelayMessageType.TransactionResponse:\n        if (hc.debug) console.log(\"hashconnect - Got transaction response\", message);\n        let transaction_response_data = message.data;\n        if (transaction_response_data.signedTransaction) transaction_response_data.signedTransaction = new Uint8Array(Buffer.from(transaction_response_data.signedTransaction, 'base64'));\n        if (transaction_response_data.receipt) transaction_response_data.receipt = new Uint8Array(Buffer.from(transaction_response_data.receipt, 'base64'));\n        if (transaction_response_data.response) transaction_response_data.response = JSON.parse(transaction_response_data.response);\n        hc.transactionResolver(transaction_response_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[transaction_response_data.topic], transaction_response_data.id);\n        break;\n\n      case RelayMessageType.AdditionalAccountRequest:\n        if (hc.debug) console.log(\"hashconnect - Got account info request\", message);\n        let request_data = message.data;\n        hc.additionalAccountRequestEvent.emit(request_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[request_data.topic], request_data.id);\n        break;\n\n      case RelayMessageType.AdditionalAccountResponse:\n        if (hc.debug) console.log(\"hashconnect - Got account info response\", message);\n        let response_data = message.data;\n        hc.additionalAccountResolver(response_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[response_data.topic], response_data.id);\n        break;\n      //auth\n\n      case RelayMessageType.AuthenticationRequest:\n        if (hc.debug) console.log(\"hashconnect - Got auth request\", message);\n        let auth_request_data = message.data;\n        auth_request_data.serverSignature = new Uint8Array(Buffer.from(auth_request_data.serverSignature, 'base64'));\n        hc.authRequestEvent.emit(auth_request_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[auth_request_data.topic], auth_request_data.id);\n        break;\n\n      case RelayMessageType.AuthenticationResponse:\n        if (hc.debug) console.log(\"hashconnect - Got auth response\", message);\n        let auth_response_data = message.data;\n        if (auth_response_data.userSignature) auth_response_data.userSignature = new Uint8Array(Buffer.from(auth_response_data.userSignature, 'base64'));\n        if (auth_response_data.signedPayload && auth_response_data.signedPayload.serverSignature) auth_response_data.signedPayload.serverSignature = new Uint8Array(Buffer.from(auth_response_data.signedPayload.serverSignature, 'base64'));\n        hc.authResolver(auth_response_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[auth_response_data.topic], auth_response_data.id);\n        break;\n      //signing\n\n      case RelayMessageType.SigningRequest:\n        if (hc.debug) console.log(\"hashconnect - Got sign request\", message);\n        let sign_request_data = message.data;\n        hc.signRequestEvent.emit(sign_request_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[sign_request_data.topic], sign_request_data.id);\n        break;\n\n      case RelayMessageType.SigningResponse:\n        if (hc.debug) console.log(\"hashconnect - Got sign response\", message);\n        let sign_response_data = message.data;\n        if (sign_response_data.userSignature) sign_response_data.userSignature = new Uint8Array(Buffer.from(sign_response_data.userSignature, 'base64'));\n        hc.signResolver(sign_response_data);\n        await hc.acknowledge(parsedData.topic, hc.encryptionKeys[sign_response_data.topic], sign_response_data.id);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["HashConnectConnectionState","RelayMessageType","MessageHandler","onPayload","message","hc","parsedData","data","origin","debug","console","log","type","timestamp","toString","topic","error","ApprovePairing","approval_data","newPairingData","accountIds","metadata","network","encryptionKey","hcData","lastUsed","Date","getTime","pairingData","pairingEvent","emit","connectionStatusChangeEvent","Paired","acknowledge","encryptionKeys","id","Acknowledge","ack_data","msg_id","acknowledgeMessageEvent","Transaction","transaction_data","byteArray","Uint8Array","Buffer","from","transactionEvent","TransactionResponse","transaction_response_data","signedTransaction","receipt","response","JSON","parse","transactionResolver","AdditionalAccountRequest","request_data","additionalAccountRequestEvent","AdditionalAccountResponse","response_data","additionalAccountResolver","AuthenticationRequest","auth_request_data","serverSignature","authRequestEvent","AuthenticationResponse","auth_response_data","userSignature","signedPayload","authResolver","SigningRequest","sign_request_data","signRequestEvent","SigningResponse","sign_response_data","signResolver"],"sourceRoot":"","sources":["../../../src/message/message-handler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}