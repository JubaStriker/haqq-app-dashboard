{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n/**\n* Check if an address is valid\n*\n* @param {string} _address - An address\n*\n* @return {boolean} - True if address is valid, false otherwise\n*/\n\n\nvar isValidAddress = function (_address) {\n  var address = _address.toString().toUpperCase().replace(/-/g, '');\n\n  if (!address || address.length !== 40) {\n    return false;\n  }\n\n  var decoded = cryptoUtils.toHex(cryptoUtils.base32.b32decode(address));\n  var stepThreeChecksum = cryptoUtils.keccak256Checksum(Buffer.from(decoded.slice(0, 42), 'hex'));\n  return stepThreeChecksum === decoded.slice(42);\n};\n\nmodule.exports = {\n  isValidAddress: isValidAddress\n};","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/node_modules/multicoin-address-validator/src/nem_validator.js"],"names":["cryptoUtils","require","isValidAddress","_address","address","toString","toUpperCase","replace","length","decoded","toHex","base32","b32decode","stepThreeChecksum","keccak256Checksum","Buffer","from","slice","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,cAAc,GAAG,UAASC,QAAT,EAAmB;AACpC,MAAIC,OAAO,GAAGD,QAAQ,CAACE,QAAT,GAAoBC,WAApB,GAAkCC,OAAlC,CAA0C,IAA1C,EAAgD,EAAhD,CAAd;;AACA,MAAI,CAACH,OAAD,IAAYA,OAAO,CAACI,MAAR,KAAmB,EAAnC,EAAuC;AACnC,WAAO,KAAP;AACH;;AACD,MAAIC,OAAO,GAAGT,WAAW,CAACU,KAAZ,CAAkBV,WAAW,CAACW,MAAZ,CAAmBC,SAAnB,CAA6BR,OAA7B,CAAlB,CAAd;AACA,MAAIS,iBAAiB,GAAGb,WAAW,CAACc,iBAAZ,CAA8BC,MAAM,CAACC,IAAP,CAAYP,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAZ,EAAkC,KAAlC,CAA9B,CAAxB;AAEA,SAAOJ,iBAAiB,KAAKJ,OAAO,CAACQ,KAAR,CAAc,EAAd,CAA7B;AACH,CATD;;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACbjB,EAAAA,cAAc,EAAEA;AADH,CAAjB","sourcesContent":["var cryptoUtils = require('./crypto/utils');\n\n /**\n* Check if an address is valid\n*\n* @param {string} _address - An address\n*\n* @return {boolean} - True if address is valid, false otherwise\n*/\nvar isValidAddress = function(_address) {\n    var address = _address.toString().toUpperCase().replace(/-/g, '');\n    if (!address || address.length !== 40) {\n        return false;\n    }\n    var decoded = cryptoUtils.toHex(cryptoUtils.base32.b32decode(address));\n    var stepThreeChecksum = cryptoUtils.keccak256Checksum(Buffer.from(decoded.slice(0, 42), 'hex'));\n\n    return stepThreeChecksum === decoded.slice(42);\n};\n\nmodule.exports = {\n    isValidAddress: isValidAddress,\n}\n"]},"metadata":{},"sourceType":"script"}