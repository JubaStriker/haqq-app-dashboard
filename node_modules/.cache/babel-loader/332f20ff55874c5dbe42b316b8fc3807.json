{"ast":null,"code":"import * as rlp from \"@ethersproject/rlp\";\nimport * as hex from \"./encoding/hex.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport CACHE from \"./Cache.js\";\n/**\n * @typedef {object} EthereumTransactionDataEip1559JSON\n * @property {string} chainId\n * @property {string} nonce\n * @property {string} maxPriorityGas\n * @property {string} maxGas\n * @property {string} gasLimit\n * @property {string} to\n * @property {string} value\n * @property {string} callData\n * @property {string[]} accessList\n * @property {string} recId\n * @property {string} r\n * @property {string} s\n */\n\nexport default class EthereumTransactionDataEip1559 extends EthereumTransactionData {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Uint8Array} props.chainId\n   * @param {Uint8Array} props.nonce\n   * @param {Uint8Array} props.maxPriorityGas\n   * @param {Uint8Array} props.maxGas\n   * @param {Uint8Array} props.gasLimit\n   * @param {Uint8Array} props.to\n   * @param {Uint8Array} props.value\n   * @param {Uint8Array} props.callData\n   * @param {Uint8Array[]} props.accessList\n   * @param {Uint8Array} props.recId\n   * @param {Uint8Array} props.r\n   * @param {Uint8Array} props.s\n   */\n  constructor(props) {\n    super(props);\n    this.chainId = props.chainId;\n    this.nonce = props.nonce;\n    this.maxPriorityGas = props.maxPriorityGas;\n    this.maxGas = props.maxGas;\n    this.gasLimit = props.gasLimit;\n    this.to = props.to;\n    this.value = props.value;\n    this.accessList = props.accessList;\n    this.recId = props.recId;\n    this.r = props.r;\n    this.s = props.s;\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {EthereumTransactionData}\n   */\n\n\n  static fromBytes(bytes) {\n    if (bytes.length === 0) {\n      throw new Error(\"empty bytes\");\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n    const decoded =\n    /** @type {string[]} */\n    rlp.decode(bytes.subarray(1));\n\n    if (!Array.isArray(decoded)) {\n      throw new Error(\"ethereum data is not a list\");\n    }\n\n    if (decoded.length != 12) {\n      throw new Error(\"invalid ethereum transaction data\");\n    } // TODO\n\n\n    return new EthereumTransactionDataEip1559({\n      chainId: hex.decode(\n      /** @type {string} */\n      decoded[0]),\n      nonce: hex.decode(\n      /** @type {string} */\n      decoded[1]),\n      maxPriorityGas: hex.decode(\n      /** @type {string} */\n      decoded[2]),\n      maxGas: hex.decode(\n      /** @type {string} */\n      decoded[3]),\n      gasLimit: hex.decode(\n      /** @type {string} */\n      decoded[4]),\n      to: hex.decode(\n      /** @type {string} */\n      decoded[5]),\n      value: hex.decode(\n      /** @type {string} */\n      decoded[6]),\n      callData: hex.decode(\n      /** @type {string} */\n      decoded[7]),\n      // @ts-ignore\n      accessList:\n      /** @type {string[]} */\n      decoded[8].map(v => hex.decode(v)),\n      recId: hex.decode(\n      /** @type {string} */\n      decoded[9]),\n      r: hex.decode(\n      /** @type {string} */\n      decoded[10]),\n      s: hex.decode(\n      /** @type {string} */\n      decoded[11])\n    });\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    const encoded = rlp.encode([this.chainId, this.nonce, this.maxPriorityGas, this.maxGas, this.gasLimit, this.to, this.value, this.callData, this.accessList, this.recId, this.r, this.s]);\n    return hex.decode(\"02\" + encoded.substring(2));\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2);\n  }\n  /**\n   * @returns {EthereumTransactionDataEip1559JSON}\n   */\n\n\n  toJSON() {\n    return {\n      chainId: hex.encode(this.chainId),\n      nonce: hex.encode(this.nonce),\n      maxPriorityGas: hex.encode(this.maxPriorityGas),\n      maxGas: hex.encode(this.maxGas),\n      gasLimit: hex.encode(this.gasLimit),\n      to: hex.encode(this.to),\n      value: hex.encode(this.value),\n      callData: hex.encode(this.callData),\n      accessList: this.accessList.map(v => hex.encode(v)),\n      recId: hex.encode(this.recId),\n      r: hex.encode(this.r),\n      s: hex.encode(this.s)\n    };\n  }\n\n}\nCACHE.setEthereumTransactionDataEip1559FromBytes(bytes => EthereumTransactionDataEip1559.fromBytes(bytes));","map":{"version":3,"sources":["/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/node_modules/@hashgraph/sdk/src/EthereumTransactionDataEip1559.js"],"names":["rlp","hex","EthereumTransactionData","CACHE","EthereumTransactionDataEip1559","constructor","props","chainId","nonce","maxPriorityGas","maxGas","gasLimit","to","value","accessList","recId","r","s","fromBytes","bytes","length","Error","decoded","decode","subarray","Array","isArray","callData","map","v","toBytes","encoded","encode","substring","toString","JSON","stringify","toJSON","setEthereumTransactionDataEip1559FromBytes"],"mappings":"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","sourcesContent":["import * as rlp from \"@ethersproject/rlp\";\nimport * as hex from \"./encoding/hex.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport CACHE from \"./Cache.js\";\n\n/**\n * @typedef {object} EthereumTransactionDataEip1559JSON\n * @property {string} chainId\n * @property {string} nonce\n * @property {string} maxPriorityGas\n * @property {string} maxGas\n * @property {string} gasLimit\n * @property {string} to\n * @property {string} value\n * @property {string} callData\n * @property {string[]} accessList\n * @property {string} recId\n * @property {string} r\n * @property {string} s\n */\n\nexport default class EthereumTransactionDataEip1559 extends EthereumTransactionData {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Uint8Array} props.chainId\n     * @param {Uint8Array} props.nonce\n     * @param {Uint8Array} props.maxPriorityGas\n     * @param {Uint8Array} props.maxGas\n     * @param {Uint8Array} props.gasLimit\n     * @param {Uint8Array} props.to\n     * @param {Uint8Array} props.value\n     * @param {Uint8Array} props.callData\n     * @param {Uint8Array[]} props.accessList\n     * @param {Uint8Array} props.recId\n     * @param {Uint8Array} props.r\n     * @param {Uint8Array} props.s\n     */\n    constructor(props) {\n        super(props);\n\n        this.chainId = props.chainId;\n        this.nonce = props.nonce;\n        this.maxPriorityGas = props.maxPriorityGas;\n        this.maxGas = props.maxGas;\n        this.gasLimit = props.gasLimit;\n        this.to = props.to;\n        this.value = props.value;\n        this.accessList = props.accessList;\n        this.recId = props.recId;\n        this.r = props.r;\n        this.s = props.s;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {EthereumTransactionData}\n     */\n    static fromBytes(bytes) {\n        if (bytes.length === 0) {\n            throw new Error(\"empty bytes\");\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const decoded = /** @type {string[]} */ (rlp.decode(bytes.subarray(1)));\n\n        if (!Array.isArray(decoded)) {\n            throw new Error(\"ethereum data is not a list\");\n        }\n\n        if (decoded.length != 12) {\n            throw new Error(\"invalid ethereum transaction data\");\n        }\n\n        // TODO\n        return new EthereumTransactionDataEip1559({\n            chainId: hex.decode(/** @type {string} */ (decoded[0])),\n            nonce: hex.decode(/** @type {string} */ (decoded[1])),\n            maxPriorityGas: hex.decode(/** @type {string} */ (decoded[2])),\n            maxGas: hex.decode(/** @type {string} */ (decoded[3])),\n            gasLimit: hex.decode(/** @type {string} */ (decoded[4])),\n            to: hex.decode(/** @type {string} */ (decoded[5])),\n            value: hex.decode(/** @type {string} */ (decoded[6])),\n            callData: hex.decode(/** @type {string} */ (decoded[7])),\n            // @ts-ignore\n            accessList: /** @type {string[]} */ (decoded[8]).map((v) =>\n                hex.decode(v)\n            ),\n            recId: hex.decode(/** @type {string} */ (decoded[9])),\n            r: hex.decode(/** @type {string} */ (decoded[10])),\n            s: hex.decode(/** @type {string} */ (decoded[11])),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const encoded = rlp.encode([\n            this.chainId,\n            this.nonce,\n            this.maxPriorityGas,\n            this.maxGas,\n            this.gasLimit,\n            this.to,\n            this.value,\n            this.callData,\n            this.accessList,\n            this.recId,\n            this.r,\n            this.s,\n        ]);\n        return hex.decode(\"02\" + encoded.substring(2));\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON(), null, 2);\n    }\n\n    /**\n     * @returns {EthereumTransactionDataEip1559JSON}\n     */\n    toJSON() {\n        return {\n            chainId: hex.encode(this.chainId),\n            nonce: hex.encode(this.nonce),\n            maxPriorityGas: hex.encode(this.maxPriorityGas),\n            maxGas: hex.encode(this.maxGas),\n            gasLimit: hex.encode(this.gasLimit),\n            to: hex.encode(this.to),\n            value: hex.encode(this.value),\n            callData: hex.encode(this.callData),\n            accessList: this.accessList.map((v) => hex.encode(v)),\n            recId: hex.encode(this.recId),\n            r: hex.encode(this.r),\n            s: hex.encode(this.s),\n        };\n    }\n}\n\nCACHE.setEthereumTransactionDataEip1559FromBytes((bytes) =>\n    EthereumTransactionDataEip1559.fromBytes(bytes)\n);\n"]},"metadata":{},"sourceType":"module"}