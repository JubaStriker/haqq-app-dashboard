{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleCrypto = void 0;\n/**\n * SimpleCryptoJS\n *\n * Simplified AES cryptography for safer and easier encryption and decryption processes\n * of any JavaScript objects.\n **/\n\nvar crypto_js_1 = require(\"crypto-js\");\n/**\n * SimpleCrypto\n *\n * @class\n */\n\n\nvar SimpleCrypto =\n/** @class */\nfunction () {\n  /**\n   * Represent a SimpleCrypto instance\n   *\n   * @constructor\n   * @param\t{string}\tsecret\t\tThe secret key for cryptographic process.\n   */\n  function SimpleCrypto(secret) {\n    if (secret === void 0) {\n      throw new Error(\"SimpleCrypto object MUST BE initialised with a SECRET KEY.\");\n    }\n\n    this._dataBuffer = \"\";\n    this._encoder = crypto_js_1.enc.Utf8;\n    this._secret = (0, crypto_js_1.SHA3)(typeof secret === \"string\" ? secret : secret.toString());\n    this._keySize = 256;\n    this._iterations = 100;\n  }\n\n  SimpleCrypto.sanitiseData = function (data) {\n    if (data === void 0 || data === null) {\n      throw new Error(\"There is no data provided. Process halted.\");\n    }\n\n    var sanitised = typeof data === \"object\" ? JSON.stringify(data) : typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\" ? data.toString() : null;\n\n    if (null === sanitised) {\n      throw new Error(\"Invalid data type. Only object, string, number and boolean data types are allowed.\");\n    }\n\n    return sanitised;\n  };\n\n  SimpleCrypto.transform = function (src) {\n    if (src.toLowerCase() === \"true\" || src.toLowerCase() === \"false\") {\n      return src.toLowerCase() === \"true\";\n    }\n\n    try {\n      return JSON.parse(src);\n    } catch (jsonError) {\n      return /^-?[\\d.]+(?:e-?\\d+)?$/.test(src) && !isNaN(parseFloat(src)) ? parseFloat(src) : src;\n    }\n  };\n\n  Object.defineProperty(SimpleCrypto, \"encoders\", {\n    /**\n     * Encoders\n     *\n     * Get Encoder instance available.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @return  {Encoders}  Returns object of Encoder instances.\n     */\n    get: function () {\n      return __assign({\n        Default: crypto_js_1.enc.Utf8\n      }, crypto_js_1.enc);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Generate Random\n   *\n   * Generate a random string or WordArray.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   * @param   {boolean}   expectsWordArray\tSet to true to return WordArray instance.\n   * Default is false and return a string.\n   *\n   * @return  {string | WordArray}  Returns a random string or WordArray.\n   */\n\n  SimpleCrypto.generateRandom = function (length, expectsWordArray) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    if (expectsWordArray === void 0) {\n      expectsWordArray = false;\n    }\n\n    var random = crypto_js_1.lib.WordArray.random(length / 8);\n    return expectsWordArray ? random : random.toString();\n  };\n  /**\n   * Generate Random String\n   *\n   * Generate a random string\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random string.\n   */\n\n\n  SimpleCrypto.generateRandomString = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    return SimpleCrypto.generateRandom(length, false);\n  };\n  /**\n   * Generate Random Word Array\n   *\n   * Generate a random WordArray.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random WordArray.\n   */\n\n\n  SimpleCrypto.generateRandomWordArray = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    return SimpleCrypto.generateRandom(length, true);\n  };\n\n  SimpleCrypto.prototype._decrypt = function () {\n    if (this._dataBuffer.length <= 64) {\n      throw new Error(\"Invalid cipher text. Decryption halted.\");\n    }\n\n    var salt = crypto_js_1.enc.Hex.parse(this._dataBuffer.substring(0, 32));\n    var initialVector = crypto_js_1.enc.Hex.parse(this._dataBuffer.substring(32, 64));\n\n    var encrypted = this._dataBuffer.substring(64, this._dataBuffer.length - 64);\n\n    var key = (0, crypto_js_1.PBKDF2)(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n\n    var hashedCipherText = this._dataBuffer.substring(this._dataBuffer.length - 64);\n\n    var cipherText = this._dataBuffer.substring(0, this._dataBuffer.length - 64);\n\n    if (hashedCipherText != (0, crypto_js_1.HmacSHA256)(cipherText, key).toString()) {\n      throw new Error(\"Invalid encrypted text received. Decryption halted.\");\n    }\n\n    var decrypted = crypto_js_1.AES.decrypt(encrypted, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    });\n    return SimpleCrypto.transform(decrypted.toString(SimpleCrypto.encoders.Default));\n  };\n\n  SimpleCrypto.prototype._encrypt = function () {\n    var salt = SimpleCrypto.generateRandom(128, true);\n    var initialVector = SimpleCrypto.generateRandom(128, true);\n    var key = (0, crypto_js_1.PBKDF2)(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n    var encrypted = crypto_js_1.AES.encrypt(this._dataBuffer, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    }); // Combining the encrypted string with salt and IV to form cipher-text\n\n    var cipherText = salt.toString() + initialVector.toString() + encrypted.toString(); // Generate authentication tag and append that to the cipher-text using the key derived from PBKDF2.\n    // (Optional TODO: Include a module to generate authentication key. Possibly HKDF-SHA256.)\n\n    var hashedCipherText = (0, crypto_js_1.HmacSHA256)(cipherText, key).toString();\n    return cipherText + hashedCipherText;\n  };\n\n  SimpleCrypto.prototype.decrypt = function (cipher, secondArg, thirdArg) {\n    var _this = this;\n\n    var setDecryptionOption = function (arg) {\n      if (typeof arg !== \"boolean\") _this.setEncoder(arg);\n    };\n\n    try {\n      if (cipher !== void 0) {\n        this.update(cipher);\n      }\n\n      if (secondArg !== void 0) {\n        setDecryptionOption(secondArg);\n      }\n\n      if (thirdArg !== void 0) {\n        setDecryptionOption(thirdArg);\n      }\n\n      return this._decrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  SimpleCrypto.prototype.encrypt = function (data) {\n    try {\n      if (data !== void 0) {\n        this.update(data);\n      }\n\n      return this._encrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Decrypt Object\n   *\n   * Decrypt a encrypted string and try to convert it back to object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use decrypt(cipher: CipherText) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tdecrypt\n   *\n   * @param   {string}\tcipher\t\tThe encrypted string of the data.\n   *\n   * @return  {string}\tThe decrypted data of the encrypted string in the form\n   * of object.\n   */\n\n\n  SimpleCrypto.prototype.decryptObject = function (cipher) {\n    return this.update(cipher).decrypt();\n  };\n  /**\n   * Encrypt Object\n   *\n   * Encrypt an object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use encrypt(data: PlainData) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tencrypt\n   *\n   * @param   {object}\tobject\t\tThe object to be encrypted.\n   *\n   * @return  {string}\tThe encrypted string of the object.\n   */\n\n\n  SimpleCrypto.prototype.encryptObject = function (object) {\n    return this.update(object).encrypt();\n  };\n  /**\n   * Append\n   *\n   * Append the data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.append = function (data) {\n    try {\n      this._dataBuffer = this._dataBuffer + SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Update\n   *\n   * Change data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.update = function (data) {\n    try {\n      this._dataBuffer = SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Set Encoder\n   *\n   * Change the default encoding type for the decryption process.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {Encoder}\tencoder\t\tThe new Encoder object.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.setEncoder = function (encoder) {\n    /*\n     * TODO: Encoding support is dropped at the moment, both for encryption\n     *  and decryption. We should figure out how we have to implement encoding\n     *  support in the simplest way possible.\n     * */\n    this._encoder = encoder;\n    return this;\n  };\n  /**\n   * Set Secret\n   *\n   * Change the secret key by setting a new one. By changing the secret key,\n   * any encrypted string that encrypted by previous secret key will not be\n   * able to decrypted, unless the secret key is set to the one used to\n   * encrypt the data.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {string}\tsecret\t\tThe new secret key as string.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.setSecret = function (secret) {\n    this._secret = (0, crypto_js_1.SHA3)(typeof secret === \"string\" ? secret : secret.toString());\n    return this;\n  };\n\n  return SimpleCrypto;\n}();\n\nexports.SimpleCrypto = SimpleCrypto;\nexports.default = SimpleCrypto;","map":{"version":3,"mappings":"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","names":["secret","Error","_dataBuffer","_encoder","crypto_js_1","Utf8","_secret","toString","_keySize","_iterations","SimpleCrypto","data","sanitised","JSON","stringify","src","toLowerCase","parse","jsonError","test","isNaN","parseFloat","Object","Default","length","expectsWordArray","random","WordArray","generateRandom","salt","Hex","substring","initialVector","encrypted","key","keySize","iterations","hashedCipherText","cipherText","decrypted","decrypt","iv","padding","Pkcs7","mode","CBC","transform","encoders","encrypt","cipher","secondArg","thirdArg","setDecryptionOption","arg","_this","setEncoder","update","_decrypt","error","_encrypt","object","sanitiseData","encoder","exports"],"sourceRoot":"","sources":["../src/SimpleCrypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}