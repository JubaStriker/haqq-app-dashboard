[{"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/index.js":"1","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/index.js":"2","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/context/index.js":"3","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/utils/url/index.js":"4","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/App.js":"5","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/shopify/Authorize.js":"6","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/look/index.js":"7","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/settings/index.js":"8","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/embed/index.js":"9","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/looks/index.js":"10","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/navbar/index.js":"11","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/carousel/index.js":"12","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/upload/index.js":"13","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/looks/index.js":"14","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/views/index.js":"15","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/products/index.js":"16","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/scripts/index.js":"17","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/constants/strings/index.js":"18","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/charges/index.js":"19","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/files/index.js":"20","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/utils/media/index.js":"21","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/wallet/index.js":"22","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/transaction/index.js":"23","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/transaction/index.js":"24","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/currency-exchage/index.js":"25","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/index.js":"26","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/index.js":"27","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/context/index.js":"28","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/utils/url/index.js":"29","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/App.js":"30","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/shopify/Authorize.js":"31","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/embed/index.js":"32","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/transaction/index.js":"33","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/look/index.js":"34","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/settings/index.js":"35","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/looks/index.js":"36","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/navbar/index.js":"37","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/upload/index.js":"38","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/wallet/index.js":"39","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/scripts/index.js":"40","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/currency-exchage/index.js":"41","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/files/index.js":"42","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/constants/strings/index.js":"43","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/looks/index.js":"44","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/charges/index.js":"45","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/views/index.js":"46","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/carousel/index.js":"47","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/utils/media/index.js":"48","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/transaction/index.js":"49","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/products/index.js":"50","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/index.js":"51","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/index.js":"52","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/context/index.js":"53","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/utils/url/index.js":"54","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/App.js":"55","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/shopify/Authorize.js":"56","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/embed/index.js":"57","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/look/index.js":"58","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/settings/index.js":"59","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/transaction/index.js":"60","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/looks/index.js":"61","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/navbar/index.js":"62","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/upload/index.js":"63","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/scripts/index.js":"64","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/transaction/index.js":"65","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/wallet/index.js":"66","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/looks/index.js":"67","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/currency-exchage/index.js":"68","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/constants/strings/index.js":"69","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/views/index.js":"70","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/charges/index.js":"71","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/carousel/index.js":"72","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/files/index.js":"73","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/utils/media/index.js":"74","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/products/index.js":"75"},{"size":1463,"mtime":1663305888721,"results":"76","hashOfConfig":"77"},{"size":1541,"mtime":1663305888723,"results":"78","hashOfConfig":"77"},{"size":77,"mtime":1663305888720,"results":"79","hashOfConfig":"77"},{"size":346,"mtime":1663305888728,"results":"80","hashOfConfig":"77"},{"size":3987,"mtime":1663305888717,"results":"81","hashOfConfig":"77"},{"size":1971,"mtime":1663305888725,"results":"82","hashOfConfig":"77"},{"size":19542,"mtime":1663413411373,"results":"83","hashOfConfig":"77"},{"size":7559,"mtime":1663417116455,"results":"84","hashOfConfig":"77"},{"size":9851,"mtime":1663305888722,"results":"85","hashOfConfig":"77"},{"size":16433,"mtime":1663305888724,"results":"86","hashOfConfig":"77"},{"size":7859,"mtime":1663305888719,"results":"87","hashOfConfig":"77"},{"size":3422,"mtime":1663305888719,"results":"88","hashOfConfig":"77"},{"size":3885,"mtime":1663305888720,"results":"89","hashOfConfig":"77"},{"size":4667,"mtime":1663409719541,"results":"90","hashOfConfig":"77"},{"size":3158,"mtime":1663305888727,"results":"91","hashOfConfig":"77"},{"size":1480,"mtime":1663305888726,"results":"92","hashOfConfig":"77"},{"size":3419,"mtime":1663310160278,"results":"93","hashOfConfig":"77"},{"size":70,"mtime":1663305888720,"results":"94","hashOfConfig":"77"},{"size":4619,"mtime":1663305888725,"results":"95","hashOfConfig":"77"},{"size":5451,"mtime":1663305888726,"results":"96","hashOfConfig":"77"},{"size":269,"mtime":1663305888728,"results":"97","hashOfConfig":"77"},{"size":2871,"mtime":1663394974393,"results":"98","hashOfConfig":"77"},{"size":2833,"mtime":1663417808369,"results":"99","hashOfConfig":"77"},{"size":1790,"mtime":1663403217613,"results":"100","hashOfConfig":"77"},{"size":1717,"mtime":1663410391194,"results":"101","hashOfConfig":"77"},{"size":1463,"mtime":1663305888721,"results":"102","hashOfConfig":"103"},{"size":1541,"mtime":1663305888723,"results":"104","hashOfConfig":"103"},{"size":77,"mtime":1663305888720,"results":"105","hashOfConfig":"103"},{"size":346,"mtime":1663305888728,"results":"106","hashOfConfig":"103"},{"size":3987,"mtime":1663305888717,"results":"107","hashOfConfig":"103"},{"size":1971,"mtime":1663305888725,"results":"108","hashOfConfig":"103"},{"size":9851,"mtime":1664001291335,"results":"109","hashOfConfig":"103"},{"size":3306,"mtime":1663932412021,"results":"110","hashOfConfig":"103"},{"size":20099,"mtime":1664176735904,"results":"111","hashOfConfig":"103"},{"size":7657,"mtime":1664177821131,"results":"112","hashOfConfig":"103"},{"size":16438,"mtime":1664172247206,"results":"113","hashOfConfig":"103"},{"size":7859,"mtime":1663305888719,"results":"114","hashOfConfig":"103"},{"size":3885,"mtime":1663305888720,"results":"115","hashOfConfig":"103"},{"size":4360,"mtime":1664009575324,"results":"116","hashOfConfig":"103"},{"size":3419,"mtime":1663310160278,"results":"117","hashOfConfig":"103"},{"size":1698,"mtime":1664172896334,"results":"118","hashOfConfig":"103"},{"size":5451,"mtime":1663305888726,"results":"119","hashOfConfig":"103"},{"size":70,"mtime":1663305888720,"results":"120","hashOfConfig":"103"},{"size":4567,"mtime":1664176731594,"results":"121","hashOfConfig":"103"},{"size":4619,"mtime":1663305888725,"results":"122","hashOfConfig":"103"},{"size":3158,"mtime":1663305888727,"results":"123","hashOfConfig":"103"},{"size":3422,"mtime":1663305888719,"results":"124","hashOfConfig":"103"},{"size":269,"mtime":1663305888728,"results":"125","hashOfConfig":"103"},{"size":1784,"mtime":1663930067301,"results":"126","hashOfConfig":"103"},{"size":1480,"mtime":1663305888726,"results":"127","hashOfConfig":"103"},{"size":1463,"mtime":1663305888721,"results":"128","hashOfConfig":"129"},{"size":1541,"mtime":1663305888723,"results":"130","hashOfConfig":"129"},{"size":77,"mtime":1663305888720,"results":"131","hashOfConfig":"129"},{"size":346,"mtime":1663305888728,"results":"132","hashOfConfig":"129"},{"size":3987,"mtime":1663305888717,"results":"133","hashOfConfig":"129"},{"size":1971,"mtime":1663305888725,"results":"134","hashOfConfig":"129"},{"size":9847,"mtime":1664347189477,"results":"135","hashOfConfig":"129"},{"size":20099,"mtime":1664176735904,"results":"136","hashOfConfig":"129"},{"size":7681,"mtime":1664431261728,"results":"137","hashOfConfig":"129"},{"size":3306,"mtime":1663932412021,"results":"138","hashOfConfig":"129"},{"size":16432,"mtime":1664347217851,"results":"139","hashOfConfig":"129"},{"size":7859,"mtime":1663305888719,"results":"140","hashOfConfig":"129"},{"size":3885,"mtime":1663305888720,"results":"141","hashOfConfig":"129"},{"size":3419,"mtime":1663310160278,"results":"142","hashOfConfig":"129"},{"size":1736,"mtime":1664432386716,"results":"143","hashOfConfig":"129"},{"size":4708,"mtime":1664432422755,"results":"144","hashOfConfig":"129"},{"size":4567,"mtime":1664176731594,"results":"145","hashOfConfig":"129"},{"size":1698,"mtime":1664172896334,"results":"146","hashOfConfig":"129"},{"size":70,"mtime":1663305888720,"results":"147","hashOfConfig":"129"},{"size":3158,"mtime":1663305888727,"results":"148","hashOfConfig":"129"},{"size":4619,"mtime":1663305888725,"results":"149","hashOfConfig":"129"},{"size":3422,"mtime":1663305888719,"results":"150","hashOfConfig":"129"},{"size":5451,"mtime":1663305888726,"results":"151","hashOfConfig":"129"},{"size":269,"mtime":1663305888728,"results":"152","hashOfConfig":"129"},{"size":1480,"mtime":1663305888726,"results":"153","hashOfConfig":"129"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"p8k24r",{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"156"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"156"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"156"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"156"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"156"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"156"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"156"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"156"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"156"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"156"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"156"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"156"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"156"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"156"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},"1511w1q",{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"224"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"224"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"224"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"224"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"224"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"224"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"224"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"224"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"224"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"224"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"224"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"224"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"224"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"224"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"224"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},"ng5wqu",{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"283"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"283"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"283"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"283"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"283"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"283"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"283"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"283"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"283"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"283"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"283"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"283"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"283"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"283"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"283"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"283"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"283"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"283"},"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/index.js",[],["335","336"],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/index.js",["337","338","339","340","341","342"],"import React, { useEffect } from 'react';\nimport {\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport App from '../App';\nimport LookRoute from \"./look\";\nimport Authorize from \"./shopify/Authorize\"; \nimport SettingsRoute from \"./settings\";\nimport EmbedRoute from './embed';\n// You should always import these components even without using else app back navigation will break\nimport { ClientRouter, useClientRouting, useRoutePropagation, RoutePropagator } from '@shopify/app-bridge-react';\nimport TransactionRoute from './transaction';\nconst AppRoutes = (props) => {\n\n\n\treturn (\n\t\t<>\n\t\t<Routes>\n\t\t\t{/* <Route path=\"/shopify\" element={<Authorize />} />\n\t\t\t<Route path=\"/shopify/callback\" element={<Authorize />} />\n\t\t\t<Route\n\t\t\t\t\tpath=\"/install\"\n\t\t\t\t\telement={<Navigate to={{\n\t\t\t\t\t\tpathname: \"/shopify/authorize\",\n\t\t\t\t\t\tsearch: window.location.search,\n\t\t\t\t\t}} replace={true} />}\n\t\t\t\t/>\n\t\t\t<Route path=\"/shopify/authorize\" element={<Authorize />} /> */}\n\t\t\t<Route path=\"/embed\" element={<EmbedRoute />} />\n\t\t\t<Route path=\"/settings\" element={<SettingsRoute />} />\n\t\t\t<Route path='/transaction' element={<TransactionRoute />} />\n\t\t\t<Route path=\"/looks\" element={<App />} />\n\t\t\t<Route path=\"/looks/:id\" element={<LookRoute />} />\n\t\t\t<Route path=\"/looks/create\" element={<LookRoute />} />\n\t\t\t<Route path=\"/shopify\" element={<App />} />\n\t\t\t<Route path=\"/shopify/callback\" element={<App />} />\n\t\t\t<Route path=\"/authorize\" element={<Authorize />} />\n\t\t\t<Route path=\"/\" element={<App />} />\n\t\t</Routes>\n\t\t</>\n\t)\n}\n\nexport default AppRoutes","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/context/index.js",[],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/utils/url/index.js",[],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/App.js",["343","344"],"import { useState, useEffect } from \"react\";\nimport { Flex, Skeleton, Box, Container, Text } from \"@chakra-ui/react\";\nimport { Navigate } from \"react-router-dom\";\nimport NavBar from \"./components/navbar\";\nimport LooksRoute from \"./routes/looks\";\nimport { parseQuery } from \"./utils/url\";\nimport Authorize from \"./routes/shopify/Authorize\";\nimport Parse from \"parse\";\nfunction App() {\n  const [shopifySessionAvailable, setShopifySessionAvailable] = useState(false);\n  const [shopifyHmacAvailable, setShopifyHmacAvailable] = useState(false);\n  const [shopifyCodeAvailable, setShopifyCodeAvailable] = useState(false);\n  const [shopifyHostAvailable, setShopifyHostAvailable] = useState(false);\n\n  // if ('storage' in navigator && 'estimate' in navigator.storage) {\n  //   navigator.storage.estimate().then(data => {\n  //     const {usage, quota} = data;\n  //     console.log(`Using ${usage} out of ${quota} bytes.`);\n  //     if(quota <= 1003575331){\n  //       console.log('Incognito')\n  //   } else {\n  //       try {\n  //         Parse.User.logOut();\n  //       } catch (e) {\n\n  //       }\n  //   }\n  //   })\n  // } else {\n  //     console.log('Can not detect incognito')\n  // }\n\n  const [isEmbed, setIsEmbed] = useState(false);\n  useEffect(() => {\n    const {\n      code,\n      session,\n      hmac,\n      embed,\n      host = \"\",\n      userToken,\n    } = parseQuery(window.location.search);\n    window.lookbook = parseQuery(window.location.search);\n    if (session) {\n      setShopifySessionAvailable(true);\n      setShopifyHmacAvailable(false);\n      setShopifyCodeAvailable(false);\n      setShopifyHostAvailable(false);\n    } else if (code) {\n      setShopifySessionAvailable(false);\n      setShopifyHmacAvailable(false);\n      setShopifyCodeAvailable(true);\n      setShopifyHostAvailable(false);\n      window.location.replace(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/shopify/callback${document.location.search}`\n      );\n    } else if (hmac) {\n      setShopifySessionAvailable(false);\n      setShopifyHmacAvailable(true);\n      setShopifyCodeAvailable(false);\n      setShopifyHostAvailable(false);\n      window.location.replace(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/shopify${document.location.search}`\n      );\n    } else if (host && !code && !hmac) {\n      setShopifyHostAvailable(true);\n      setShopifySessionAvailable(false);\n      setShopifyHmacAvailable(false);\n      setShopifyCodeAvailable(false);\n    } else if (embed) {\n      setIsEmbed(true);\n      setShopifySessionAvailable(false);\n      setShopifyHmacAvailable(false);\n      setShopifyCodeAvailable(false);\n      setShopifyHostAvailable(false);\n    }\n\n    if (userToken) {\n      // if (Parse.User.current()) {\n      //   if (Parse.User.current().get('sessionToken') !== userToken) {\n      //     Parse.User.logOut().then(() => Parse.User.become(userToken)).catch(() => Parse.User.become(userToken))\n      //   }\n      // } else {\n      //   Parse.User.become(userToken);\n      // }\n    } else {\n    }\n  }, []);\n\n  if (shopifySessionAvailable) {\n    return (\n      <Box bg=\"#f6f6f7\">\n        <NavBar />\n        <LooksRoute />\n      </Box>\n    );\n  } else if (isEmbed) {\n    return <Navigate to=\"/embed\" replace />;\n  } else if (\n    shopifyHmacAvailable ||\n    shopifyCodeAvailable ||\n    shopifyHostAvailable\n  ) {\n    return (\n      <Container maxW={\"7xl\"} p=\"12\">\n        <Flex alignItems=\"flex-start\" flexDirection=\"row\">\n          <Skeleton>\n            <Box></Box>\n          </Skeleton>\n          <Flex direction=\"column\" width=\"90%\" marginLeft=\"5\">\n            <Skeleton width=\"100%\" height=\"40px\"></Skeleton>\n            <br />\n            <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n            <br />\n            <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n            <br />\n            <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n          </Flex>\n        </Flex>\n      </Container>\n    );\n  } else {\n    return <Authorize />;\n  }\n}\n\nexport default App;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/shopify/Authorize.js",["345"],"import { useState } from \"react\";\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Button,\n  Input,\n  InputLeftAddon,\n  InputGroup,\n  Divider,\n  Text,\n  Image,\n  VStack,\n  Heading,\n} from \"@chakra-ui/react\";\n// import FlagImage from \"../../assets/shopify/images/flag.svg\";\n\nexport default function Authorize() {\n  const [storeDomain, setStoreDomain] = useState(\"\");\n  const [isShopifySiteURLInvalid, setIsShopifySiteURLInvalid] = useState(false);\n\n  const onAuthorize = () => {\n    if (!storeDomain) {\n      setIsShopifySiteURLInvalid(true);\n      return false;\n    }\n    window.location.href = `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/shopify?shop=${storeDomain}`;\n  };\n  return (\n    <Box marginTop=\"24\">\n      <VStack>\n        <Box boxSize=\"lg\">\n          <VStack spacing=\"3\">\n            {/* <Image boxSize=\"200px\" src={FlagImage}/> */}\n            <Heading as=\"h1\" size=\"md\">\n              Shopify Store Authentication\n            </Heading>\n            <Text>The access data to your Shopify site has expired.</Text>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <FormControl\n              id=\"shopify-site\"\n              isRequired\n              isInvalid={isShopifySiteURLInvalid}\n            >\n              <FormLabel>Shopify site sub domain</FormLabel>\n              <InputGroup>\n                <InputLeftAddon children=\"https://\" />\n                <Input\n                  onChange={(e) => setStoreDomain(e.target.value)}\n                  type=\"text\"\n                  value={storeDomain}\n                  placeholder=\"yourstore.myshopify.com\"\n                />\n              </InputGroup>\n              <FormErrorMessage>This is required</FormErrorMessage>\n            </FormControl>\n            <Button onClick={onAuthorize} isFullWidth>\n              Authorize\n            </Button>\n          </VStack>\n        </Box>\n      </VStack>\n    </Box>\n  );\n}\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/look/index.js",["346","347","348","349","350","351","352","353","354","355","356","357","358"],"import { useEffect, useState, useContext } from \"react\";\nimport {\n  Box,\n  Flex,\n  Stack,\n  Heading,\n  Text,\n  Container,\n  Input,\n  Button,\n  SimpleGrid,\n  useBreakpointValue,\n  FormControl,\n  FormLabel,\n  Icon,\n  StackDivider,\n  useColorModeValue,\n  Image,\n  useDisclosure,\n  chakra,\n  toast,\n  useToast,\n  Avatar,\n  AvatarGroup,\n  SkeletonText,\n  SkeletonCircle,\n  Skeleton,\n  VStack,\n  Divider,\n  AvatarBadge,\n  ButtonGroup,\n  InputGroup,\n  InputLeftAddon,\n  Grid,\n  GridItem,\n  TableContainer,\n  Table,\n  Tbody,\n  Tr,\n  Td,\n  TableCaption,\n  Thead,\n  Th,\n  Tfoot,\n  FormHelperText,\n  Alert,\n  AlertIcon,\n  InputRightAddon,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { IoClose, IoAddOutline, IoCloseCircleOutline } from \"react-icons/io5\";\nimport { ResourcePicker } from \"@shopify/app-bridge-react\";\nimport NavBar from \"../../components/navbar\";\n\nimport useFilesStore from \"../../store/files\";\nimport useScriptsStore from \"../../store/scripts\";\n\nimport Upload from \"../../components/upload\";\nimport useLooksStore from \"../../store/looks\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { ShopContext } from \"../../context\";\nimport useCurrencyExchangeStore from \"../../store/currency-exchage\";\n\nconst renderSkeleton = () => {\n  return (\n    <Flex direction=\"column\" width=\"100%\">\n      <Skeleton width=\"100%\" height=\"40px\">\n        {\" \"}\n      </Skeleton>\n      <SkeletonText mt=\"4\" noOfLines={1} spacing=\"4\" />\n      <br />\n      <br />\n      <Box>\n        <SkeletonCircle size=\"20\" />\n        <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n      </Box>\n    </Flex>\n  );\n};\n\nfunction CreateLooks(props) {\n  const shop = useContext(ShopContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: isResourcePickerOpen,\n    onOpen: onResourcePickerOpen,\n    onClose: onResourcePickerClose,\n  } = useDisclosure();\n  const looks = useLooksStore((state) => state.looks);\n  const files = useFilesStore((state) => state.files);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const postLooks = useLooksStore((state) => state.postLooks);\n  const destroyLooks = useLooksStore((state) => state.destroyLooks);\n  const patchLooks = useLooksStore((state) => state.patchLooks);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n\n  const currencyExchangeState = useCurrencyExchangeStore(\n    (state) => state.currencyExchangeState\n  );\n  const getCurrencyExchangeState = useCurrencyExchangeStore(\n    (state) => state.getCurrencyExchangeState\n  );\n\n  const { id = \"\" } = useParams();\n  const toast = useToast();\n  const navigate = useNavigate();\n  const colorMode = useColorModeValue(\"gray.100\", \"gray.700\");\n  const [looksName, setLooksName] = useState(props.looks.name);\n  const [looksPrice, setLooksPrice] = useState(props.looks.price);\n  const [lookXrpPrice, setLookXrpPrice] = useState();\n  const [uploads, setUploads] = useState(props.looks.files || []);\n  const [products, setProducts] = useState(props.looks.products || []);\n  const [exchangeRate, setExchageRate] = useState();\n\n  const [totalProductsPrice, setTotlaProductsPrice] = useState(\"\");\n  const onUploadWidgetClose = (data = []) => {\n    setUploads([...uploads, ...data]);\n    onClose();\n  };\nconsole.log(currencyExchangeState.get.success.data.xrp)\n  console.log(exchangeRate);\n  const getExchangeRate = (data) => {\n    console.log(data);\n    setLookXrpPrice(\n      (currencyExchangeState.get.success.data.xrp * data).toFixed(2)\n    );\n  };\n\n  const onResourcePickerDone = (data = {}) => {\n    console.log(data);\n    setProducts([\n      // ...products.filter(Boolean),\n      ...data?.selection\n        ?.map((d) => {\n          return {\n            title: d.title,\n            image: (d.images[0] && d.images[0]?.originalSrc) || \"\",\n            id: d.id,\n            price: parseInt(d.variants[0]?.price) || 0,\n          };\n        })\n        .filter(Boolean),\n    ]);\n    onResourcePickerClose();\n    let productSum = 0;\n    const result = data.selection.reduce((p, n) => {\n      productSum = p + parseFloat(n.variants[0].price);\n      return productSum;\n    }, 0);\n    setTotlaProductsPrice(result);\n  };\n\n  const getLooskById = async () => {\n    if (id) {\n      const data = await getLooks({ id });\n      if (data) {\n        setLooksName(data?.name);\n        setUploads([...uploads, ...data?.medias]);\n        setLooksPrice([data?.price]);\n        // console.log(\"asdf \", data.products);\n        setProducts([\n          ...products,\n          ...data?.products.map((p) => ({\n            id: p.admin_graphql_api_id,\n            title: p.title,\n            image: p?.image?.src,\n            price: parseInt(p.variants[0]?.price) || 0,\n          })),\n        ]);\n        let productSum = 0;\n        const result = data.products.reduce((p, n) => {\n          productSum = p + parseFloat(n.variants[0].price);\n          return productSum;\n        }, 0);\n        setTotlaProductsPrice(result);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getLooskById();\n    getCurrencyExchangeState();\n  }, []);\n\n  const removeUpload = (upload, index) => {\n    uploads.splice(index, 1);\n    setUploads([...uploads.filter(Boolean)]);\n  };\n\n  const removeProduct = (index) => {\n    products.splice(index, 1);\n    setProducts([...products.filter(Boolean)]);\n    // console.log(products);\n    let productSum = 0;\n    const result = products.reduce((p, n) => {\n      productSum = p + parseFloat(n.price);\n      return productSum;\n    }, 0);\n    setTotlaProductsPrice(result);\n  };\n\n  const onDestroyLook = async (lookId) => {\n    try {\n      await destroyLooks(lookId);\n      toast({\n        title: `Look deleted!`,\n        status: \"success\",\n      });\n      window.history.back();\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n  const renderProducts = () => {\n    return products.map((product, index) => (\n      <Tr>\n        <Td>\n          <Image\n            objectFit=\"contain\"\n            boxSize=\"50px\"\n            src={product.image}\n            color={\"yellow.500\"}\n          />\n        </Td>\n        <Td>{product.title}</Td>\n        <Td isNumeric>{product.price}</Td>\n        <Td textAlign={\"center\"}>\n          <Icon\n            as={IoClose}\n            color={\"red.500\"}\n            w={5}\n            h={5}\n            onClick={() => removeProduct(index)}\n          />\n        </Td>\n      </Tr>\n    ));\n  };\n  const renderLooks = () => {\n    if (currencyExchangeState.get.loading) {\n      return renderSkeleton();\n    } else if (currencyExchangeState.get.failure.error) {\n      <Box>\n      <Flex direction=\"column\" align=\"center\">\n        <VStack spacing=\"3\">\n          <Heading as=\"h1\" size=\"md\">\n            {currencyExchangeState.get.failure.message}\n          </Heading>\n        </VStack>\n        <br />\n        <Divider />\n        <br />\n        <VStack spacing=\"3\">\n          <Button onClick={() => getCurrencyExchangeState()}>Try Again</Button>\n        </VStack>\n      </Flex>\n    </Box>\n  } else {\n    if (looks.get.loading) {\n      return renderSkeleton();\n    } else if (looks.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {looks.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button onClick={() => getLooskById()}>Try Again</Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else {\n      const { data } = looks?.get?.success;\n      return (\n        <>\n          <Stack spacing={4}>\n            <Heading\n              color={\"gray.800\"}\n              lineHeight={1.1}\n              fontSize={{ base: \"2xl\", sm: \"3xl\", md: \"4xl\" }}\n            >\n              {data && data.name ? data.name : \"Create a look\"}\n            </Heading>\n            <Text color={\"gray.500\"} fontSize={{ base: \"sm\", sm: \"md\" }}></Text>\n          </Stack>\n          <Box mt={10}>\n            <chakra.form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                try {\n                  if (id) {\n                    await patchLooks({\n                      id,\n                      name: looksName,\n                      price: looksPrice,\n                      xrpPrice: lookXrpPrice,\n                      medias: uploads,\n                      products: products.map((product) => product.id),\n                    });\n                  } else {\n                    await postLooks({\n                      name: looksName,\n                      price: looksPrice,\n                      xrpPrice: lookXrpPrice,\n                      medias: uploads,\n                      products: products.map((product) => product.id),\n                    });\n                    try {\n                      const scriptsOnStore = await getScripts(shop);\n                      if (scriptsOnStore && scriptsOnStore.length) {\n                        // already has a script tag, do nothing.\n                      } else {\n                        await postScripts(shop);\n                      }\n                      window.history.back();\n                    } catch (e) {\n                      window.history.back();\n                    }\n                  }\n                  toast({\n                    title: `Looks ${id ? \"updated\" : \"created\"} successfully!`,\n                    status: \"success\",\n                  });\n                } catch (e) {\n                  toast({\n                    title: e.message || INTERNAL_SERVER_ERROR,\n                    status: \"error\",\n                  });\n                }\n              }}\n              {...props}\n            >\n              <Stack spacing={4}>\n                <FormControl id=\"look-name\">\n                  <FormLabel>Look name</FormLabel>\n                  <Input\n                    placeholder=\"Winter Fashion Look\"\n                    name=\"look_name\"\n                    type=\"text\"\n                    value={looksName}\n                    onChange={(e) => setLooksName(e.target.value)}\n                    required\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel>Add medias to this look</FormLabel>\n                  <AvatarGroup>\n                    {uploads.map((upload, index) => (\n                      <Avatar\n                        key={(upload._name || upload.name) + index}\n                        name={upload._name || upload.name}\n                        src={upload._url || upload.url}\n                        size=\"lg\"\n                        // size={useBreakpointValue({ base: 'md', md: 'lg' })}\n                        position={\"relative\"}\n                        zIndex={2}\n                        _before={{\n                          content: '\"\"',\n                          width: \"full\",\n                          height: \"full\",\n                          rounded: \"full\",\n                          transform: \"scale(1.125)\",\n                          bgGradient: \"linear(to-bl, red.400,pink.400)\",\n                          position: \"absolute\",\n                          zIndex: -1,\n                          top: 0,\n                          left: 0,\n                        }}\n                      >\n                        <AvatarBadge\n                          boxSize=\"1.25em\"\n                          bg=\"red.500\"\n                          onClick={() => removeUpload(upload, index)}\n                        >\n                          <Icon\n                            as={IoCloseCircleOutline}\n                            color={\"white.500\"}\n                            w={5}\n                            h={5}\n                          />\n                        </AvatarBadge>\n                      </Avatar>\n                    ))}\n                    <Avatar\n                      onClick={onOpen}\n                      size=\"lg\"\n                      bg={\"pink.400\"}\n                      _hover={{ bg: \"pink.300\" }}\n                      cursor=\"pointer\"\n                      icon={<IoAddOutline size=\"2em\" color=\"white\" />}\n                      _before={{\n                        content: '\"\"',\n                        width: \"full\",\n                        height: \"full\",\n                        rounded: \"full\",\n                        transform: \"scale(1.2)\",\n                        bgGradient: \"linear(to-bl, red.400,pink.400)\",\n                        position: \"absolute\",\n                        zIndex: -1,\n                        top: 0,\n                        left: 0,\n                      }}\n                    ></Avatar>\n                  </AvatarGroup>\n                  <Upload isOpen={isOpen} onClose={onUploadWidgetClose} />\n                </FormControl>\n                <br />\n                <br />\n                <FormControl id=\"look-products\">\n                  <FormLabel>Add products for this look</FormLabel>\n\n                  <TableContainer pb={\"10px\"}>\n                    <Table variant=\"striped\" colorScheme={\"gray\"}>\n                      <Thead>\n                        <Tr>\n                          <Th>Product Image</Th>\n                          <Th>Product Name</Th>\n                          <Th isNumeric>Product Price</Th>\n                          <Th>Action</Th>\n                        </Tr>\n                      </Thead>\n                      <Tbody>\n                        {renderProducts()}\n                        <Tr>\n                          <Td></Td>\n                          <Td isNumeric fontWeight={\"bold\"}>\n                            Total Product Price\n                          </Td>\n                          <Td isNumeric>\n                            <Text size=\"14px\" fontWeight={\"bold\"}>\n                              {totalProductsPrice}\n                            </Text>\n                          </Td>\n                          <Td></Td>\n                        </Tr>\n                      </Tbody>\n                    </Table>\n                  </TableContainer>\n                  <Button\n                    fontFamily={\"heading\"}\n                    bg={\"gray.200\"}\n                    color={\"gray.800\"}\n                    onClick={onResourcePickerOpen}\n                  >\n                    Link products +\n                  </Button>\n                  <ResourcePicker\n                    onSelection={onResourcePickerDone}\n                    onCancel={onResourcePickerClose}\n                    selectMultiple\n                    showVariants={false}\n                    resourceType=\"Product\"\n                    open={isResourcePickerOpen}\n                    initialSelectionIds={products\n                      .map((product) => ({ id: product.id }))\n                      .filter(Boolean)}\n                  />\n                </FormControl>\n                <FormControl id=\"look-price\">\n                  <FormLabel>Add Price in USD for the above products</FormLabel>\n                  <InputGroup>\n                    <InputLeftAddon children=\"USD\" />\n                    <Input\n                      placeholder=\"100\"\n                      name=\"look_price\"\n                      type=\"text\"\n                      value={looksPrice}\n                      onChange={(e) => {\n                        setLooksPrice(e.target.value)\n                      }}\n                      onBlur={(e) => getExchangeRate(e.target.value)}\n                      required\n                    />\n                    <InputRightAddon w={\"50%\"}>\n                      {currencyExchangeState.get.loading ? (\n                        <Spinner />\n                      ) : (\n                        `${lookXrpPrice ? lookXrpPrice : \"0\"} XRP`\n                      )}\n                    </InputRightAddon>\n                  </InputGroup>\n                  <FormHelperText>\n                    The total number of XRP user has to pay to shop all of the\n                    above products in this look\n                  </FormHelperText>\n                </FormControl>\n              </Stack>\n              <ButtonGroup mt={8} width=\"full\">\n                {data && data.objectId ? (\n                  <Button\n                    isLoading={looks.destroy.loading}\n                    onClick={() => onDestroyLook(data.objectId)}\n                    isFullWidth\n                    variant=\"ghost\"\n                    colorScheme=\"red\"\n                  >\n                    Delete Look\n                  </Button>\n                ) : null}\n                <Button\n                  isLoading={\n                    looks.post.loading ||\n                    looks.patch.loading ||\n                    scripts.get.loading ||\n                    scripts.post.loading\n                  }\n                  disabled={\n                    looks.post.loading ||\n                    looks.patch.loading ||\n                    scripts.get.loading ||\n                    scripts.post.loading\n                  }\n                  loadingText={`${id ? \"Updating\" : \"Saving\"} look`}\n                  type=\"submit\"\n                  fontFamily={\"heading\"}\n                  isFullWidth\n                  w={\"full\"}\n                  bgGradient=\"linear(to-r, red.400,pink.400)\"\n                  color={\"white\"}\n                  _hover={{\n                    bgGradient: \"linear(to-r, red.400,pink.400)\",\n                    boxShadow: \"xl\",\n                  }}\n                >\n                  {`${id ? \"Update\" : \"Save\"} look`}\n                </Button>\n              </ButtonGroup>\n            </chakra.form>\n          </Box>\n        </>\n      );\n    }\n  }\n  };\n\n\n  return (\n    <>\n      <NavBar />\n      <Box position={\"relative\"} bg=\"#ccc\">\n        <Container\n          as={SimpleGrid}\n          maxW={\"7xl\"}\n          columns={{ base: 1, md: 1 }}\n          spacing={{ base: 10, lg: 32 }}\n          py={{ base: 10, sm: 15, lg: 20 }}\n        >\n          <Stack\n            bg={\"gray.50\"}\n            rounded={\"xl\"}\n            p={{ base: 4, sm: 6, md: 8 }}\n            spacing={{ base: 8 }}\n            maxW=\"3xl\"\n            zIndex=\"9\"\n            margin=\"0 auto\"\n            width=\"100%\"\n          >\n            {renderLooks()}\n          </Stack>\n        </Container>\n        <Blur\n          position={\"absolute\"}\n          top={30}\n          left={-10}\n          style={{ filter: \"blur(70px)\" }}\n        />\n      </Box>\n    </>\n  );\n}\n\nexport const Blur = (props) => {\n  return (\n    <Icon\n      width={useBreakpointValue({ base: \"100%\", md: \"40vw\", lg: \"30vw\" })}\n      zIndex={useBreakpointValue({ base: -1, md: -1, lg: 0 })}\n      height=\"560px\"\n      viewBox=\"0 0 528 560\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle cx=\"71\" cy=\"61\" r=\"111\" fill=\"#F56565\" />\n      <circle cx=\"244\" cy=\"106\" r=\"139\" fill=\"#ED64A6\" />\n      <circle cy=\"291\" r=\"139\" fill=\"#ED64A6\" />\n      <circle cx=\"80.5\" cy=\"189.5\" r=\"101.5\" fill=\"#ED8936\" />\n      <circle cx=\"196.5\" cy=\"317.5\" r=\"101.5\" fill=\"#ECC94B\" />\n      <circle cx=\"70.5\" cy=\"458.5\" r=\"101.5\" fill=\"#48BB78\" />\n      <circle cx=\"426.5\" cy=\"-0.5\" r=\"101.5\" fill=\"#4299E1\" />\n    </Icon>\n  );\n};\n\nCreateLooks.defaultProps = {\n  looks: {\n    name: \"\",\n  },\n};\n\nexport default CreateLooks;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/settings/index.js",["359","360","361","362","363","364","365","366","367","368","369"],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/embed/index.js",["370","371","372","373"],"import { useEffect, useState, useContext } from \"react\";\nimport {\n  Container,\n  Box,\n  Center,\n  useColorModeValue,\n  Heading,\n  Text,\n  Stack,\n  Link,\n  Button,\n  Flex,\n  SimpleGrid,\n  VStack,\n  Divider,\n  Skeleton,\n  useDisclosure,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalOverlay,\n  ModalHeader,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport Carousel from \"../../components/carousel\";\nimport useLooksStore from \"../../store/looks\";\nimport useProductsStore from \"../../store/products\";\nimport useViewsStore from \"../../store/views\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { ShopContext } from \"../../context\";\nimport \"../../embed.css\";\n\nconst ProductsModal = (props) => {\n  const { isOpen, onClose, productIds = [], lookId } = props;\n  const products = useProductsStore((state) => state.products);\n  const getProducts = useProductsStore((state) => state.getProducts);\n  const shop = useContext(ShopContext);\n\n  useEffect(() => {\n    getProducts({ products: productIds, shop });\n  }, []);\n\n  const renderProducts = () => {\n    if (products.get.loading) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {[1, 2, 3].map((e, i) => (\n            <Center p={4} key={i}>\n              <Skeleton width=\"330px\" height=\"330px\" />\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else if (products.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {products.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button\n                onClick={() => getProducts({ products: productIds, shop })}\n              >\n                Try Again\n              </Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (products.get.success.data.length) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {products.get.success.data.map((product) => (\n            <Center py={8} key={product.admin_graphql_api_id || product.id}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  <Carousel medias={product.images} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {product.variants && product.variants.length\n                      ? `${product.variants.length} variants available`\n                      : null}\n                  </Text>\n                  <Heading\n                    textAlign=\"center\"\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {product.title}\n                  </Heading>\n                  <Link\n                    marginTop={\"10px\"}\n                    href={`http://${shop}/products/${product.handle}?app=shoplook&lookid=${lookId}`}\n                    target=\"_blank\"\n                    width=\"full\"\n                  >\n                    <Button isFullWidth rightIcon={<ExternalLinkIcon />}>\n                      View Product\n                    </Button>\n                  </Link>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else {\n      return null;\n    }\n  };\n  return (\n    <>\n      <Modal\n        isCentered\n        scrollBehavior={\"inside\"}\n        closeOnOverlayClick\n        blockScrollOnMount={false}\n        preserveScrollBarGap\n        lockFocusAcrossFrames={false}\n        isOpen={isOpen}\n        onClose={onClose}\n        size=\"xl\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Shop the products in this look</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{renderProducts()}</ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nconst EmbedRoute = (props) => {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [productIds, setProductIds] = useState([]);\n  const [isModalvis, setIsModalvis] = useState(false);\n  const [currentLookId, setCurrentLookId] = useState(\"\");\n  const getViews = useViewsStore((state) => state.getViews);\n  const viewsState = useViewsStore((state) => state.viewsState);\n\n  useEffect(() => {\n    getViews({ shop });\n    getLooks({ shop });\n  }, []);\n\n  const onLooksClick = ({ lookId, products }) => {\n    setProductIds(products);\n    setCurrentLookId(lookId);\n    setIsModalvis(true);\n    onOpen();\n  };\n\n  const onModalClose = () => {\n    setCurrentLookId(\"\");\n    setProductIds([]);\n    setIsModalvis(false);\n    onClose();\n  };\n\n  const renderList = () => {\n    if (looks.get.loading) {\n      return [1, 2, 3].map((e, i) => (\n        <Center key={i}>\n          <Skeleton width=\"330px\" height=\"330px\" />\n        </Center>\n      ));\n    } else if (looks.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {looks.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button onClick={() => getLooks({ shop })}>Try Again</Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (looks.get.success.data.length) {\n      return (\n        <>\n          {isModalvis ? (\n            <ProductsModal\n              isOpen={isOpen}\n              onClose={onModalClose}\n              lookId={currentLookId}\n              productIds={productIds}\n            />\n          ) : null}\n          {looks.get.success.data.map((look) => (\n            <Center py={8} key={look.id || look.objectId}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                bg={bgColor}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  // _after={{\n                  // \ttransition: 'all .3s ease',\n                  // \tcontent: '\"\"',\n                  // \tw: 'full',\n                  // \th: 'full',\n                  // \tpos: 'absolute',\n                  // \ttop: 5,\n                  // \tleft: 0,\n                  // \tbackgroundImage: `url(${look.get('medias')[0].url()})`,\n                  // \tfilter: 'blur(15px)',\n                  // \tzIndex: -1,\n                  // }}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  {/* <Image\n\t\t\t\t\t\t\t\t\t\t\trounded={'lg'}\n\t\t\t\t\t\t\t\t\t\t\theight={230} \n\t\t\t\t\t\t\t\t\t\t\twidth={282}\n\t\t\t\t\t\t\t\t\t\t\tobjectFit={'cover'}\n\t\t\t\t\t\t\t\t\t\t\tsrc={'https://images.unsplash.com/photo-1518051870910-a46e30d9db16?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80'}\n\t\t\t\t\t\t\t\t\t\t/> */}\n                  <Carousel medias={look.medias} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {look.products.length} products in this look\n                  </Text>\n                  <Heading\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {look.name}\n                  </Heading>\n                  <Button\n                    marginTop={\"10px\"}\n                    onClick={() =>\n                      onLooksClick({\n                        lookId: look.id || look.objectId,\n                        products: look.products,\n                      })\n                    }\n                    isFullWidth\n                  >\n                    Shop The Look\n                  </Button>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </>\n      );\n    }\n  };\n\n  return (\n    <Container maxW={\"7xl\"} p=\"12\">\n      <Center>\n        <Heading>Shop The Look</Heading>\n      </Center>\n      <br />\n      <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n        {renderList()}\n      </SimpleGrid>\n    </Container>\n  );\n};\n\nexport default EmbedRoute;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/looks/index.js",["374","375","376","377"],"import { useEffect, useContext } from \"react\";\nimport {\n  Box,\n  Heading,\n  Icon,\n  Text,\n  Divider,\n  HStack,\n  Flex,\n  SimpleGrid,\n  Stack,\n  Button,\n  useColorModeValue,\n  Container,\n  VStack,\n  useToast,\n  Skeleton,\n  Alert,\n  Code,\n  ButtonGroup,\n  useDisclosure,\n  Link as ChakraLink,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogBody,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n} from \"@chakra-ui/react\";\nimport { DateTime } from \"luxon\";\nimport Carousel from \"../../components/carousel\";\nimport {\n  IoCaretForwardOutline,\n  IoHandLeftSharp,\n  IoEye,\n  IoCartSharp,\n  IoLogoUsd,\n  IoWallet\n} from \"react-icons/io5\";\n\nimport { Link } from \"react-router-dom\";\nimport useLooksStore from \"../../store/looks\";\nimport useScriptsStore from \"../../store/scripts\";\nimport useViewsStore from \"../../store/views\";\nimport useChargesStore from \"../../store/charges\";\nimport { ShopContext } from \"../../context\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { LinkIcon } from \"@chakra-ui/icons\";\n\nconst renderSkeleton = (looks) => {\n  return (\n    <Flex alignItems=\"flex-start\" flexDirection=\"row\">\n      <Skeleton>\n        <Carousel medias={[]} />\n      </Skeleton>\n      <Flex direction=\"column\" width=\"90%\" marginLeft=\"5\">\n        <Skeleton width=\"100%\" height=\"40px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst renderLookPoints = ({ look }) => {\n  return (\n    <SimpleGrid columns={2} spacing={5} marginTop=\"5\">\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoEye} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Views</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total views\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoHandLeftSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Clicks</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total clicks\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoCartSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Add to Cart</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Cart revenue\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoWallet} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Conversion</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total revenue\n          </Text>\n        </VStack>\n      </HStack>\n    </SimpleGrid>\n  );\n};\n\nconst renderCarousel = ({ orangeColorMode, look }) => {\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"1\"\n      marginRight=\"3\"\n      position=\"relative\"\n      alignItems=\"center\"\n    >\n      <Box zIndex=\"1\" width=\"100%\" position=\"absolute\" height=\"100%\">\n        <Box\n          bgGradient={orangeColorMode}\n          backgroundSize=\"20px 20px\"\n          opacity=\"0.4\"\n          height=\"100%\"\n        />\n      </Box>\n      <Box width={{ base: \"100%\" }} zIndex=\"2\">\n        <Carousel medias={look.medias} />\n      </Box>\n      \n    </Box>\n  );\n};\n\nexport const LooksCreatedDate = (props) => {\n  return (\n    <HStack display=\"flex\" alignItems=\"center\">\n      <Text fontWeight=\"light\" fontSize=\"sm\">\n        Created at:\n      </Text>\n      <Text fontSize=\"sm\">\n        {props.date.toLocaleString(DateTime.DATETIME_MED)}\n      </Text>\n    </HStack>\n  );\n};\n\nexport const renderLooks = ({ looks, orangeColorMode, getLooks }) => {\n  if (looks.get.loading) {\n    return renderSkeleton(looks);\n  } else if (looks.get.failure.error) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              {looks.get.failure.message}\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Button onClick={() => getLooks()}>Try Again</Button>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  } else if (looks.get.success.data.length) {\n    return looks.get.success.data.map((look) => (\n      <Box key={look.objectId} >\n        <Box\n          marginTop={{ base: \"1\", sm: \"5\" }}\n          marginBottom={{ base: \"1\", sm: \"5\" }}\n          display=\"flex\"\n          flexDirection={{ base: \"column\", sm: \"row\" }}\n          justifyContent=\"space-between\"\n          key={look.objectId}\n          padding=\"20px\"\n          boxShadow={'md'}\n          borderRadius={'10px'}\n          bg={'white'}\n        >\n          {renderCarousel({ orangeColorMode, look })}\n          <Box\n            display=\"flex\"\n            flex=\"1\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            marginTop={{ base: \"3\", sm: \"0\" }}\n          >\n            {/* <BlogTags tags={['Engineering', 'Product']} /> */}\n            <Skeleton isLoaded={!looks.get.loading}>\n              <Text fontSize='3xl' marginTop=\"1\" textTransform={'capitalize'}>\n                <Link\n                  textDecoration=\"none\"\n                  _hover={{ textDecoration: \"none\" }}\n                  to={`looks/${look.objectId}`}\n                >\n                  {look.name}\n                </Link>\n              </Text>\n              \n              <LooksCreatedDate date={look.createdAt} />\n            </Skeleton>\n            {renderLookPoints({ look })}\n            <Stack direction=\"row\" spacing={4} marginTop=\"5\">\n              <Link to={`looks/${look.objectId}`}>\n                <Button\n                  colorScheme=\"blue\"\n                  isFullWidth\n                  leftIcon={<IoCaretForwardOutline />}\n                  variant=\"solid\"\n                >\n                  View / Modify\n                </Button>\n              </Link>\n            </Stack>\n          </Box>\n        </Box>\n        <Divider marginTop=\"1em\" marginBottom=\"1em\" />\n      </Box>\n    ));\n  } else if (!looks.get.success.data.length) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              You have not created any looks yet\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Link to=\"/looks/create\">\n              <Button>Create Look</Button>\n            </Link>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  }\n  return null;\n};\n\nfunction Looks(props) {\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n  const destroyScripts = useScriptsStore((state) => state.destroyScripts);\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const orangeColorMode = useColorModeValue(\n    \"radial(orange.600 1px, transparent 1px)\",\n    \"radial(orange.300 1px, transparent 1px)\"\n  );\n  // const getViews = useViewsStore((state) => state.getViews);\n  // const viewsState = useViewsStore((state) => state.viewsState);\n  const getCharges = useChargesStore((state) => state.getCharges);\n  const postCharges = useChargesStore((state) => state.postCharges);\n  const chargesState = useChargesStore((state) => state.chargesState);\n  const destroyCharges = useChargesStore((state) => state.destroyCharges);\n  const postViews = useViewsStore((state) => state.postViews);\n\n  const udpateSubscribedState = async () => {\n    try {\n      const chargesData = await getCharges({ shop }); // this api  will return both charges and views\n      console.log(chargesData);\n      const activeCharge = chargesData.recurringApplicationCharges.find(\n        (charge) => charge.status === \"active\"\n      );\n      if (activeCharge) {\n        postViews({ shop, subscribed: true });\n      } else {\n        postViews({ shop, subscribed: false });\n      }\n    } catch (e) {}\n  };\n  useEffect(async () => {\n    getLooks();\n    getScripts(shop);\n    // getViews({ shop });\n    udpateSubscribedState();\n  }, []);\n\n  const renderWidgetStatusAlert = ({ looks }) => {\n    if (!looks.get.success.data.length) {\n      return null;\n    }\n\n    const enableWidget = async () => {\n      try {\n        await postScripts(shop);\n        toast({\n          title: `Widget added successfully! Please visit your online store after 30 seconds to check the widget.`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const disableWidget = async () => {\n      try {\n        await destroyScripts(shop);\n        toast({\n          title: `Widget removed successfully!`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const renderButton = () => {\n      if (scripts.get.loading) {\n        return (\n          <Button colorScheme=\"gray\" isLoading isDisabled>\n            Loading ...\n          </Button>\n        );\n      } else if (scripts.get.success.data.length) {\n        return (\n          <>\n            <ChakraLink\n              target=\"_blank\"\n              href={`http://${shop}#frangout-shop-look-app-wrapper`}\n            >\n              <Button\n                fontWeight=\"bold\"\n                size=\"md\"\n                colorScheme=\"green\"\n                variant=\"ghost\"\n                leftIcon={<LinkIcon />}\n              >\n                Preview Widget\n              </Button>\n            </ChakraLink>\n            <Button\n              isLoading={scripts.destroy.loading || scripts.get.loading}\n              fontWeight=\"bold\"\n              size=\"md\"\n              colorScheme=\"red\"\n              onClick={disableWidget}\n            >\n              Remove Widget\n            </Button>\n          </>\n        );\n      } else {\n        return (\n          <Button\n            isLoading={scripts.post.loading || scripts.get.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={enableWidget}\n          >\n            Add Widget To Your Store\n          </Button>\n        );\n      }\n    };\n\n    const renderScriptStatusText = () => {\n      if (scripts.get.loading) {\n        return null;\n      } else if (scripts.get.success.data.length) {\n        return (\n          <Flex direction=\"column\">\n            <Text>\n              \"Shop The Look\" widget <b>has been added</b> to your store page.\n              &nbsp;\n            </Text>\n            <Text\n              cursor=\"pointer\"\n              onClick={onOpen}\n              style={{ textDecoration: \"underline\" }}\n            >\n              For custom widget position instructions <b>click here.</b>\n            </Text>\n          </Flex>\n        );\n      } else {\n        return (\n          <Text>\n            \"Shop The Look\" widget is <b>not added</b> to your store page.\n          </Text>\n        );\n      }\n    };\n    return (\n      <Alert status=\"info\" boxShadow='md'>\n        <Flex\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          width=\"100%\"\n          alignItems=\"center\"\n          height=\"100%\"\n          \n        >\n          <Stack>{renderScriptStatusText()}</Stack>\n          <ButtonGroup variant=\"outline\" spacing=\"6\">\n            {renderButton()}\n          </ButtonGroup>\n        </Flex>\n      </Alert>\n    );\n  };\n\n  const renderChargesStatusAlert = () => {\n    const renderSubscribeButton = () => {\n      const activeCharge =\n        chargesState.get.success.data.recurringApplicationCharges.find(\n          (charge) => charge.status === \"active\"\n        );\n      if (activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.destroy.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"red\"\n            onClick={async () => {\n              const data = await destroyCharges({\n                chargeId: activeCharge.id,\n              });\n              getCharges({ shop });\n              udpateSubscribedState();\n            }}\n          >\n            Cancel Paid Plan\n          </Button>\n        );\n      } else if (!activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.post.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={async () => {\n              const data = await postCharges({\n                returnURL: `https://${shop}/admin/apps/${process.env.REACT_APP_SHOPIFY_APP_NAME}`,\n              });\n              if (data) {\n                if (window.self !== window.top) {\n                  // checking if it is an iframe\n                  window.parent.location.href = data.confirmation_url;\n                } else {\n                  window.location.href = data.confirmation_url;\n                }\n              }\n            }}\n          >\n            $4.99/month for unlimited views\n          </Button>\n        );\n      }\n    };\n\n    if (chargesState.get.loading) {\n      return null;\n    } else if (chargesState.get.success.ok) {\n      return (\n        <Alert status=\"info\">\n          <Flex\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            width=\"100%\"\n            alignItems=\"center\"\n            height=\"100%\"\n          >\n            <Stack>\n              <Text>\n                The Lookbook widget on your store has{\" \"}\n                <b>{chargesState.get.success.data.views.count}</b> views{\" \"}\n              </Text>\n              <Text>\n                The first 1000 views are free. Please subscribe to our flat\n                $4.99/month paid plan for unlimited views.\n              </Text>\n            </Stack>\n            <ButtonGroup variant=\"outline\" spacing=\"6\">\n              {renderSubscribeButton()}\n            </ButtonGroup>\n          </Flex>\n        </Alert>\n      );\n    } else if (chargesState.get.failure.error) {\n      return null;\n    }\n  };\n\n  return (\n    <>\n    \n      {renderWidgetStatusAlert({ looks })}\n      <Divider />\n      {renderChargesStatusAlert()}\n      <Container maxW={\"3xl\"}>\n        {renderLooks({ looks, orangeColorMode, getLooks })}\n      </Container>\n      <AlertDialog onClose={onClose} isOpen={isOpen} isCentered size=\"3xl\">\n        <AlertDialogOverlay />\n\n        <AlertDialogContent>\n          <AlertDialogHeader>Custom Widget Position</AlertDialogHeader>\n          <AlertDialogCloseButton />\n          <AlertDialogBody textAlign=\"center\">\n            If you want the widget only on certain pages or only in certain\n            positions please add the following html tag to custom liquid or\n            custom html section.\n            <br />\n            <br />\n            <b>\n              <Code\n                size=\"xl\"\n                children={`<div id=\"frangout-shop-look-app\"> </div>`}\n              ></Code>\n            </b>\n            <br />\n            <br />\n            <iframe\n              width=\"720\"\n              height=\"405\"\n              src=\"https://www.youtube.com/embed/poWt-ssYDM8\"\n              title=\"YouTube video player\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowfullscreen\n            ></iframe>\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button onClick={onClose}>Ok</Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n\nLooks.defaultProps = {};\n\nexport default Looks;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/navbar/index.js",["378","379"],"import {\n    Box,\n    Flex,\n    Text,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    Icon,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    useColorModeValue,\n    useBreakpointValue,\n    useDisclosure,\n  } from '@chakra-ui/react';\n  import {\n    HamburgerIcon,\n    CloseIcon,\n    ChevronDownIcon,\n    ChevronRightIcon,\n    ArrowBackIcon\n  } from '@chakra-ui/icons';\n  import { Link } from \"react-router-dom\"\n  \n  export default function WithSubnavigation() {\n    const { isOpen, onToggle } = useDisclosure();\n  \n    return (\n      <Box>\n        <Flex\n          bg={useColorModeValue('#f6f6f7', 'gray.800')}\n          color={useColorModeValue('gray.600', '#f6f6f7')}\n          minH={'60px'}\n          py={{ base: 2 }}\n          px={{ base: 4 }}\n          borderBottom={1}\n          borderStyle={'solid'}\n          borderColor={useColorModeValue('gray.200', 'gray.900')}\n          align={'center'}>\n          <Flex\n            flex={{ base: 1, md: 'auto' }}\n            alignItems=\"center\"\n            ml={{ base: -2 }}\n            display={{ base: 'flex', md: 'none' }}>\n            <ArrowBackIcon onClick={() => window.history.back()} justifyContent=\"center\" alignItems=\"center\" boxSize={6} />\n            <IconButton\n              onClick={onToggle}\n              icon={\n                isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n              }\n              variant={'ghost'}\n              aria-label={'Toggle Navigation'}\n            />\n          </Flex>\n          <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>  \n          <ArrowBackIcon cursor=\"pointer\" onClick={() => window.history.back()} display={{ base: 'none', md: 'flex' }}  justifyContent=\"center\" alignItems=\"center\" boxSize={6} />\n            <Flex display={{ base: 'none', md: 'flex' }} ml={10} alignItems=\"center\" >\n              <DesktopNav />\n            </Flex>\n          </Flex>\n            {/* <Link to=\"/looks/create\">\n            <Stack\n              flex={{ base: 1, md: 0 }}\n              justify={'flex-end'}\n              direction={'row'}\n              spacing={6}>\n              <Button\n                display={{ base: 'none', md: 'inline-flex' }}\n                fontSize={'sm'}\n                fontWeight={600}\n                color={'white'}\n                bg={'pink.400'}\n                href={'#'}\n                _hover={{\n                  bg: 'pink.300',\n                }}>\n                Create Look\n              </Button>\n            </Stack>\n          </Link> */}\n        </Flex>\n  \n        <Collapse in={isOpen} animateOpacity>\n          <MobileNav />\n        </Collapse>\n      </Box>\n    );\n  }\n  \n  const DesktopNav = () => {\n    const linkColor = useColorModeValue('gray.600', 'gray.200');\n    const linkHoverColor = useColorModeValue('gray.800', 'white');\n    const popoverContentBgColor = useColorModeValue('white', 'gray.800');\n  \n    return (\n      <Stack direction={'row'} spacing={4}>\n        {NAV_ITEMS.map((navItem) => (\n          <Box key={navItem.label}>\n            <Popover trigger={'hover'} placement={'bottom-start'}>\n              <PopoverTrigger>\n                <Link\n                  p={2}\n                  to={navItem.href ?? '#'}\n                  fontSize={'sm'}\n                  fontWeight={500}\n                  color={linkColor}\n                  _hover={{\n                    textDecoration: 'none',\n                    color: linkHoverColor,\n                  }}>\n                  {navItem.label}\n                </Link>\n              </PopoverTrigger>\n  \n              {navItem.children && (\n                <PopoverContent\n                  border={0}\n                  boxShadow={'xl'}\n                  bg={popoverContentBgColor}\n                  p={4}\n                  rounded={'xl'}\n                  minW={'sm'}>\n                  <Stack>\n                    {navItem.children.map((child) => (\n                      <DesktopSubNav key={child.label} {...child} />\n                    ))}\n                  </Stack>\n                </PopoverContent>\n              )}\n            </Popover>\n          </Box>\n        ))}\n      </Stack>\n    );\n  };\n  \n  const DesktopSubNav = ({ label, href, subLabel }) => {\n    return (\n      <Link\n        to={href}\n        role={'group'}\n        display={'block'}\n        p={2}\n        rounded={'md'}\n        _hover={{ bg: useColorModeValue('pink.50', 'gray.900') }}>\n        <Stack direction={'row'} align={'center'}>\n          <Box>\n            <Text\n              transition={'all .3s ease'}\n              _groupHover={{ color: 'pink.400' }}\n              fontWeight={500}>\n              {label}\n            </Text>\n            <Text fontSize={'sm'}>{subLabel}</Text>\n          </Box>\n          <Flex\n            transition={'all .3s ease'}\n            transform={'translateX(-10px)'}\n            opacity={0}\n            _groupHover={{ opacity: '100%', transform: 'translateX(0)' }}\n            justify={'flex-end'}\n            align={'center'}\n            flex={1}>\n            <Icon color={'pink.400'} w={5} h={5} as={ChevronRightIcon} />\n          </Flex>\n        </Stack>\n      </Link>\n    );\n  };\n  \n  const MobileNav = () => {\n    return (\n      <Stack\n        bg={useColorModeValue('white', 'gray.800')}\n        p={4}\n        display={{ md: 'none' }}>\n        {NAV_ITEMS.map((navItem) => (\n          <MobileNavItem key={navItem.label} {...navItem} />\n        ))}\n      </Stack>\n    );\n  };\n  \n  const MobileNavItem = ({ label, children, href }) => {\n    const { isOpen, onToggle } = useDisclosure();\n  \n    return (\n      <Stack spacing={4} onClick={children && onToggle}>\n        <Flex\n          py={2}\n          as={Link}\n          to={href ?? '#'}\n          justify={'space-between'}\n          align={'center'}\n          _hover={{\n            textDecoration: 'none',\n          }}>\n          <Text\n            fontWeight={600}\n            color={useColorModeValue('gray.600', 'gray.200')}>\n            {label}\n          </Text>\n          {children && (\n            <Icon\n              as={ChevronDownIcon}\n              transition={'all .25s ease-in-out'}\n              transform={isOpen ? 'rotate(180deg)' : ''}\n              w={6}\n              h={6}\n            />\n          )}\n        </Flex>\n  \n        <Collapse in={isOpen} animateOpacity style={{ marginTop: '0!important' }}>\n          <Stack\n            mt={2}\n            pl={4}\n            borderLeft={1}\n            borderStyle={'solid'}\n            borderColor={useColorModeValue('gray.200', 'gray.700')}\n            align={'start'}>\n            {children &&\n              children.map((child) => (\n                <Link key={child.label} py={2} to={child.href}>\n                  {child.label}\n                </Link>\n              ))}\n          </Stack>\n        </Collapse>\n      </Stack>\n    );\n  };\n\n  const NAV_ITEMS = [\n    // {\n    //   label: 'Home',\n    //   children: [\n    //     {\n    //       label: 'Explore Design Work',\n    //       subLabel: 'Trending Design to inspire you',\n    //       href: '#',\n    //     },\n    //     {\n    //       label: 'New & Noteworthy',\n    //       subLabel: 'Up-and-coming Designers',\n    //       href: '#',\n    //     },\n    //   ],\n    // },\n    // {\n    //   label: 'Find Work',\n    //   children: [\n    //     {\n    //       label: 'Job Board',\n    //       subLabel: 'Find your dream design job',\n    //       href: '#',\n    //     },\n    //     {\n    //       label: 'Freelance Projects',\n    //       subLabel: 'An exclusive list for contract work',\n    //       href: '#',\n    //     },\n    //   ],\n    // },\n    // {\n    //   label: 'Looks',\n    //   href: '/looks',\n    // },\n    {\n      label: 'Add New Look',\n      href: '/looks/create',\n    },\n    {\n      label: 'Settings',\n      href: '/settings'\n    },\n    {\n      label: 'Transaction Deatails',\n      href: '/transaction'\n    }\n  ];","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/carousel/index.js",["380","381"],"import React from \"react\";\nimport {\n  Box,\n  IconButton,\n  useBreakpointValue,\n  Stack,\n  Heading,\n  Text,\n  Container,\n} from \"@chakra-ui/react\";\n// Here we have used react-icons package for the icons\nimport { BiLeftArrowAlt, BiRightArrowAlt } from \"react-icons/bi\";\n// And react-slick as our Carousel Lib\nimport Slider from \"react-slick\";\n\n// Settings for the slider\nconst settings = {\n  dots: true,\n  arrows: false,\n  fade: true,\n  infinite: true,\n  autoplay: true,\n  speed: 500,\n  autoplaySpeed: 5000,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n};\n\nexport default function CaptionCarousel(props) {\n  // As we have used custom buttons, we need a reference variable to\n  // change the state\n  const [slider, setSlider] = React.useState(null);\n\n  // These are the breakpoints which changes the position of the\n  // buttons as the screen size changes\n  const top = useBreakpointValue({ base: \"90%\", md: \"50%\" });\n  const side = useBreakpointValue({ base: \"30%\", md: \"40px\" });\n\n  const { medias = [] } = props;\n  // This list contains all the data for carousels\n  // This can be static or loaded from a server\n  return (\n    <Box\n      position={\"relative\"}\n      height={props.height || \"300px\"}\n      width={props.width || \"300px\"}\n      overflow={\"hidden\"}\n      borderWidth=\"1px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n      margin=\"0 auto\"\n    >\n      {/* Left Icon */}\n      <IconButton\n        aria-label=\"left-arrow\"\n        variant=\"ghost\"\n        position=\"absolute\"\n        left={side}\n        top={top}\n        transform={\"translate(-50%, -50%)\"}\n        zIndex={2}\n        onClick={() => slider?.slickPrev()}\n      >\n        <BiLeftArrowAlt size=\"40px\" />\n      </IconButton>\n      {/* Right Icon */}\n      <IconButton\n        aria-label=\"right-arrow\"\n        variant=\"ghost\"\n        position=\"absolute\"\n        right={side}\n        top={top}\n        transform={\"translate(50%, -50%)\"}\n        zIndex={2}\n        onClick={() => slider?.slickNext()}\n      >\n        <BiRightArrowAlt size=\"40px\" />\n      </IconButton>\n      {/* Slider */}\n      <Slider\n        autoplay={false}\n        {...settings}\n        ref={(slider) => setSlider(slider)}\n      >\n        {medias.map((media, index) => (\n          <Box\n            key={index}\n            // height={'6xl'}\n            position=\"relative\"\n            backgroundPosition=\"center\"\n            backgroundRepeat=\"no-repeat\"\n            backgroundSize=\"cover\"\n            backgroundImage={`url(${media.url ? media.url : media.src})`}\n          >\n            {/* This is the block you need to change, to customize the caption */}\n            <Container\n              padding=\"0\"\n              size=\"container.lg\"\n              height={props.height || \"400px\"}\n              position=\"relative\"\n            >\n              <Stack\n                padding=\"0\"\n                w={\"full\"}\n                position=\"absolute\"\n                bottom=\"0\"\n                background=\"#00000094\"\n              >\n                {/* <Heading padding=\"1\" textAlign=\"center\" color=\"white\" fontSize={{ base: 'md', md: 'xl', lg: '2xl' }}>\n                  {card.title}\n                </Heading>\n                <Text margin=\"0\" padding=\"0\" fontSize={{ base: 'md', lg: 'lg' }} color=\"GrayText\">\n                  {card.text}\n                </Text> */}\n                \n              </Stack>\n            </Container>\n          </Box>\n        ))}\n      </Slider>\n    </Box>\n  );\n}\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/components/upload/index.js",["382","383","384"],"import { useCallback, useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  SimpleGrid,\n  Button,\n  Center,\n  useColorModeValue,\n  Text,\n  Image,\n  VStack,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useDropzone } from \"react-dropzone\";\nimport useFilesStore from \"../../store/files\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nfunction Upload(props = {}) {\n  const { isOpen = false, onClose, on } = props;\n  const files = useFilesStore((state) => state.files);\n  const postFiles = useFilesStore((state) => state.postFiles);\n  const toast = useToast();\n  const [uploads, setUploads] = useState([]);\n\n  const onDrop = useCallback(async (acceptedUploads) => {\n    setUploads(\n      acceptedUploads.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  });\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n    maxFiles: 3,\n    multiple: true,\n  });\n  useEffect(() => {\n    setUploads([]);\n  }, []);\n  useEffect(\n    () => () => {\n      uploads.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [uploads]\n  );\n\n  const saveUploads = async () => {\n    try {\n      const data = await postFiles(uploads);\n      setUploads([]);\n      onClose(data || []);\n    } catch (e) {\n      toast({\n        title:\n          \"Incognito mode is not allowed. \" +\n          (e.message || INTERNAL_SERVER_ERROR),\n        status: \"error\",\n      });\n    }\n  };\n\n  const dropText = isDragActive\n    ? \"Drop upto 3 png, jpeg or gifs here ...\"\n    : \"Drag 'n' drop upto 3 png, jpeg or gifs files here, or click to select uploads\";\n  const activeBg = useColorModeValue(\"gray.100\", \"gray.600\");\n  const borderColor = useColorModeValue(\n    isDragActive ? \"teal.300\" : \"gray.300\",\n    isDragActive ? \"teal.500\" : \"gray.500\"\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      closeOnOverlayClick={false}\n      onEsc={() => setUploads([])}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add images for this look.</ModalHeader>\n        <ModalBody>\n          <Center\n            p={10}\n            cursor=\"pointer\"\n            bg={isDragActive ? activeBg : \"transparent\"}\n            _hover={{ bg: activeBg }}\n            transition=\"background-color 0.2s ease\"\n            borderRadius={4}\n            border=\"3px dashed\"\n            borderColor={borderColor}\n            {...getRootProps()}\n          >\n            <VStack>\n              <div>\n                <input {...getInputProps()} />\n                <Text textAlign=\"center\">{dropText}</Text>\n              </div>\n            </VStack>\n          </Center>\n          <Center>\n            <SimpleGrid spacing={5} columns={3} marginTop=\"5\">\n              {uploads.map((file) => (\n                <Image\n                  key={file.name}\n                  src={file.preview}\n                  width={100}\n                  height={100}\n                  objectFit=\"cover\"\n                  borderRadius=\"5\"\n                  borderColor=\"gray\"\n                  borderWidth=\"2\"\n                />\n              ))}\n            </SimpleGrid>\n          </Center>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            variant=\"ghost\"\n            onClick={() => {\n              setUploads([]);\n              onClose([]);\n            }}\n            colorScheme=\"red\"\n          >\n            Close\n          </Button>\n          <Button\n            colorScheme=\"teal\"\n            mr={3}\n            onClick={saveUploads}\n            loadingText=\"Uploading...\"\n            isLoading={files.post.loading}\n          >\n            Upload\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default Upload;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/looks/index.js",[],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/views/index.js",["385"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport Parse from \"parse\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_VIEWS_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useViewsStore = create((set, get) => ({\n  viewsState: INITIAL_VIEWS_STATE,\n  getViews: async ({ shop = window.lookbook.shop } = {}) => {\n    console.log(\"ererereerer\");\n    set(\n      produce((state) => ({\n        ...state,\n        viewsState: {\n          ...state.viewsState,\n          get: {\n            ...INITIAL_VIEWS_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      // Parse.Cloud.run('get_views', {\n      // \tshop, id\n      // })\n\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_views?shop=${shop}`\n      );\n      console.log(data);\n\n      set(\n        produce((state) => ({\n          ...state,\n          viewsState: {\n            ...state.viewsState,\n            get: {\n              ...INITIAL_VIEWS_STATE.get,\n              success: {\n                ok: true,\n                data: data,\n              },\n            },\n          },\n        }))\n      );\n\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          viewsState: {\n            ...state.viewsState,\n            get: {\n              ...INITIAL_VIEWS_STATE.get,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n  postViews: async ({ shop = window.lookbook.shop, subscribed } = {}) => {\n    set(\n      produce((state) => ({\n        ...state,\n        viewsState: {\n          ...state.viewsState,\n          post: {\n            ...INITIAL_VIEWS_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/post_views?shop=${shop}&subscribed=${subscribed}`\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          viewsState: {\n            ...state.viewsState,\n            post: {\n              ...INITIAL_VIEWS_STATE.post,\n              success: {\n                ok: true,\n                data: data,\n              },\n            },\n          },\n        }))\n      );\n\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          viewsState: {\n            ...state.viewsState,\n            post: {\n              ...INITIAL_VIEWS_STATE.post,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n}));\n\nexport default useViewsStore;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/products/index.js",["386"],"import create from \"zustand\";\nimport produce from \"immer\";\nimport Parse from \"parse\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport axios from \"axios\";\n\nconst INITIAL_PRODUCTS_STATE = {\n\tget: {\n\t\tloading: false,\n\t\tsuccess: {\n\t\t\tok: false,\n\t\t\tdata: [],\n\t\t},\n\t\tfailure: {\n\t\t\terror: false,\n\t\t\tmessage: \"\",\n\t\t}\n\t},\n};\n\nconst useProductsStore = create((set, get) => ({\n\tproducts: INITIAL_PRODUCTS_STATE,\n\tgetProducts: async({ products = [], shop } = {}) => {\n\t\tset(produce(state => ({\n\t\t\t...state,\n\t\t\tproducts: {\n\t\t\t\t...state.products,\n\t\t\t\tget: {\n\t\t\t\t\t...INITIAL_PRODUCTS_STATE.get,\n\t\t\t\t\tloading: true,\n\t\t\t\t}\n\t\t\t}\n\t\t})))\n\n\t\ttry {\n\t\t\tconst ids = products.map(p => {\n\t\t\t\tif (typeof p === \"string\") {\n\t\t\t\t\treturn p.split('/')?.pop()\n\t\t\t\t}\n\t\t\t\treturn undefined\n\t\t\t}).filter(Boolean);\n\n\t\t\tconst { data } = await axios.get(\n\t\t\t\t`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_products?shop=${shop}&ids=${ids}`\n\t\t\t);\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tproducts: {\n\t\t\t\t\t...state.products,\n\t\t\t\t\tget: {\n\t\t\t\t\t\t...INITIAL_PRODUCTS_STATE.get,\n\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\tok: true,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})));\n\n\t\t\treturn data;\n\n\t\t} catch (e) {\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tproducts: {\n\t\t\t\t\t...state.products,\n\t\t\t\t\tget: {\n\t\t\t\t\t\t...INITIAL_PRODUCTS_STATE.get,\n\t\t\t\t\t\tfailure: {\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: e.message || INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t}\n\t},\n}));\n\nexport default useProductsStore;\n\t\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/scripts/index.js",["387"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport Parse from \"parse\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_SCRIPTS_STATE = {\n\tget: {\n\t\tloading: false,\n\t\tsuccess: {\n\t\t\tok: false,\n\t\t\tdata: [],\n\t\t},\n\t\tfailure: {\n\t\t\terror: false,\n\t\t\tmessage: \"\",\n\t\t}\n\t},\n\tpost: {\n\t\tloading: false,\n\t\tsuccess: {\n\t\t\tok: false,\n\t\t\tdata: null,\n\t\t},\n\t\tfailure: {\n\t\t\terror: false,\n\t\t\tmessage: \"\",\n\t\t}\n\t},\n\tpatch: {\n\t\tloading: false,\n\t\tsuccess: {\n\t\t\tok: false,\n\t\t\tdata: null,\n\t\t},\n\t\tfailure: {\n\t\t\terror: false,\n\t\t\tmessage: \"\",\n\t\t}\n\t},\n\tdestroy: {\n\t\tloading: false,\n\t\tsuccess: {\n\t\t\tok: false,\n\t\t\tdata: null,\n\t\t},\n\t\tfailure: {\n\t\t\terror: false,\n\t\t\tmessage: \"\",\n\t\t}\n\t}\n};\n\nconst useScriptsStore = create((set, get) => ({\n\tscripts: INITIAL_SCRIPTS_STATE,\n\tgetScripts: async (shop = window.lookbook.shop) => {\n\t\tset(produce(state => ({\n\t\t\t...state,\n\t\t\tscripts: {\n\t\t\t\t...state.scripts,\n\t\t\t\tget: {\n\t\t\t\t\t...INITIAL_SCRIPTS_STATE.get,\n\t\t\t\t\tloading: true,\n\t\t\t\t}\n\t\t\t}\n\t\t})))\n\t\n\t\ttry {\n\t\t\tconst { data } = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_scripts?shop=${shop}`);\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tget: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.get,\n\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\tok: true,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\treturn data;\n\t\n\t\t} catch (e) {\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tget: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.get,\n\t\t\t\t\t\tfailure: {\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: e.message || INTERNAL_SERVER_ERROR\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\tthrow e;\n\t\t}\n\t},\n\tpostScripts: async (shop = window.lookbook.shop) => {\n\t\tset(produce(state => ({\n\t\t\t...state,\n\t\t\tscripts: {\n\t\t\t\t...state.scripts,\n\t\t\t\tpost: {\n\t\t\t\t\t...INITIAL_SCRIPTS_STATE.post,\n\t\t\t\t\tloading: true,\n\t\t\t\t}\n\t\t\t}\n\t\t})))\n\n\t\ttry {\n\t\t\tconst { data } = await axios.post(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/post_scripts`, { shop });\n\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tpost: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.post,\n\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\tok: true,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\treturn data;\n\n\t\t} catch (e) {\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tpost: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.post,\n\t\t\t\t\t\tfailure: {\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: e.message || INTERNAL_SERVER_ERROR\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\tthrow e;\n\t\t}\n\t},\n\tdestroyScripts: async (shop = window.lookbook.shop) => {\n\t\tset(produce(state => ({\n\t\t\t...state,\n\t\t\tscripts: {\n\t\t\t\t...state.scripts,\n\t\t\t\tdestroy: {\n\t\t\t\t\t...INITIAL_SCRIPTS_STATE.destroy,\n\t\t\t\t\tloading: true,\n\t\t\t\t}\n\t\t\t}\n\t\t})))\n\n\t\ttry {\n\t\t\tconst { data } = await axios.delete(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/destroy_scripts?shop=${shop}`);\n\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tdestroy: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.destroy,\n\t\t\t\t\t\tsuccess: {\n\t\t\t\t\t\t\tok: true,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\treturn data;\n\n\t\t} catch (e) {\n\t\t\tset(produce(state => ({\n\t\t\t\t...state,\n\t\t\t\tscripts: {\n\t\t\t\t\t...state.scripts,\n\t\t\t\t\tdestroy: {\n\t\t\t\t\t\t...INITIAL_SCRIPTS_STATE.destroy,\n\t\t\t\t\t\tfailure: {\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: e.message || INTERNAL_SERVER_ERROR\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})))\n\t\t\tthrow e;\n\t\t}\n\t}\n}));\n\nexport default useScriptsStore;\n\t\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/constants/strings/index.js",[],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/charges/index.js",["388"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport Parse from \"parse\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_CHARGES_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  destroy: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useChargesStore = create((set, get) => ({\n  chargesState: INITIAL_CHARGES_STATE,\n  getCharges: async ({ shop = window.lookbook.shop } = {}) => {\n    set(\n      produce((state) => ({\n        ...state,\n        chargesState: {\n          ...state.chargesState,\n          get: {\n            ...INITIAL_CHARGES_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      // Parse.Cloud.run('get_views', {\n      // \tshop, id\n      // })\n\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_charges?shop=${shop}`\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            get: {\n              ...INITIAL_CHARGES_STATE.get,\n              success: {\n                ok: true,\n                data: data,\n              },\n            },\n          },\n        }))\n      );\n\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            get: {\n              ...INITIAL_CHARGES_STATE.get,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n  postCharges: async ({ shop = window.lookbook.shop, returnURL }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        chargesState: {\n          ...state.chargesState,\n          post: {\n            ...INITIAL_CHARGES_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/post_charges`,\n        {\n          shop,\n          returnURL,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            post: {\n              ...INITIAL_CHARGES_STATE.post,\n              success: {\n                ok: true,\n                data,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            post: {\n              ...INITIAL_CHARGES_STATE.post,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n      throw e;\n    }\n  },\n  destroyCharges: async ({ shop = window.lookbook.shop, chargeId }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        chargesState: {\n          ...state.chargesState,\n          destroy: {\n            ...INITIAL_CHARGES_STATE.destroy,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/delete_charges`,\n        {\n          shop,\n          chargeId,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            destroy: {\n              ...INITIAL_CHARGES_STATE.destroy,\n              success: {\n                ok: true,\n                data,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          chargesState: {\n            ...state.chargesState,\n            destroy: {\n              ...INITIAL_CHARGES_STATE.destroy,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n      throw e;\n    }\n  },\n}));\n\nexport default useChargesStore;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/files/index.js",["389"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport Parse from \"parse\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { getBase64 } from \"../../utils/media\";\n\nconst INITIAL_FILES_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  destroy: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useFilesStore = create((set, get) => ({\n  files: INITIAL_FILES_STATE,\n  getFiles: async () => {\n    set(\n      produce((state) => ({\n        ...state,\n        files: {\n          ...state.files,\n          get: {\n            ...INITIAL_FILES_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.get(``, {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\n            \"thinkificAccessToken\"\n          )}`,\n          accept: \"application/json\",\n        },\n      });\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            get: {\n              ...INITIAL_FILES_STATE.get,\n              success: {\n                ok: true,\n                data: [],\n              },\n            },\n          },\n        }))\n      );\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            get: {\n              ...INITIAL_FILES_STATE.get,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n    }\n  },\n  postFiles: async (uploads) => {\n    set(\n      produce((state) => ({\n        ...state,\n        files: {\n          ...state.files,\n          post: {\n            ...INITIAL_FILES_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const base64s = await Promise.all(\n        uploads.map(async (upload) => {\n          return {\n            data: await getBase64(upload),\n            type: upload.type,\n          };\n        })\n      );\n      const savedFiles = await Promise.all(\n        base64s.map(async (base64) => {\n          const parseFile = new Parse.File(\n            \"looks\",\n            { base64: base64.data },\n            base64.type\n          );\n          // const savedFile = await parseFile.save();\n          const { data } = await axios.post(\n            `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/parse/files/looks`,\n            {\n              base64: parseFile?._source?.base64 || parseFile._data,\n              _ApplicationId: Parse.applicationId,\n              _ClientVersion: \"js3.4.1\",\n              _ContentType: parseFile?._source?.type,\n              _JavaScriptKey: Parse.javaScriptKey,\n              fileData: { metadata: {}, tags: {} },\n            },\n            {\n              headers: {\n                \"content-type\": \"text/plain\",\n              },\n            }\n          );\n          return data;\n        })\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            post: {\n              ...INITIAL_FILES_STATE.post,\n              success: {\n                ok: true,\n                data: savedFiles,\n              },\n            },\n          },\n        }))\n      );\n      return savedFiles;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            post: {\n              ...INITIAL_FILES_STATE.post,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n      throw e;\n    }\n  },\n  destroyFiles: async (id) => {\n    set(\n      produce((state) => ({\n        ...state,\n        files: {\n          ...state.files,\n          destroy: {\n            ...INITIAL_FILES_STATE.destroy,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const { data } = await axios.delete(``, {\n        headers: {\n          Authorization: `Bearer ${window.localStorage.getItem(\n            \"thinkificAccessToken\"\n          )}`,\n          accept: \"*/*\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            destroy: {\n              ...INITIAL_FILES_STATE.destroy,\n              success: {\n                ok: true,\n                data,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      set(\n        produce((state) => ({\n          ...state,\n          files: {\n            ...state.files,\n            destroy: {\n              ...INITIAL_FILES_STATE.destroy,\n              failure: {\n                error: true,\n                message: e.message || INTERNAL_SERVER_ERROR,\n              },\n            },\n          },\n        }))\n      );\n      throw e;\n    }\n  },\n}));\n\nexport default useFilesStore;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/utils/media/index.js",[],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/wallet/index.js",["390","391"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\n\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useWalletStore = create((set, address) => ({\n  walletState: INITIAL_WALLET_STATE,\n  getWalletAddress: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      // console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              success: {\n                ok: true,\n                data: data,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  },\n  postWalletAddress: async ({ shop, walletAddress }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          post: {\n            ...INITIAL_WALLET_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`,\n        {\n          shop,\n          walletAddress,\n        }\n      );\n      console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: false,\n              },\n              failure: {\n                error: false,\n                message: \"Please Verify the Wallet Address\",\n              },\n            },\n          },\n        }))\n      );\n      throw error;\n    }\n  },\n}));\n\nexport default useWalletStore;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/routes/transaction/index.js",["392","393","394","395","396","397"],"/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/transaction/index.js",["398"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_TRANSACTION_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useTransactionStore = create((set) => ({\n  transactionState: INITIAL_TRANSACTION_STATE,\n  getTransactionState: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.transactionState,\n          get: {\n            ...INITIAL_TRANSACTION_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      const walletAddress = data.walletAddress;\n  //  console.log(walletAddress);\n      const client = new window.xrpl.Client(`${process.env.REACT_APP_XRP_TRANSACTION_FETCH_UTL}`);\n      await client.connect();\n      const response = await client.request({\n        command: \"account_tx\",\n        account: walletAddress,\n      });\n\n      set(\n        produce((state) => ({\n          ...state,\n          transactionState: {\n            ...state.transactionState,\n            get: {\n              ...INITIAL_TRANSACTION_STATE.get,\n              success: {\n                ok: true,\n                data: response,\n              },\n            },\n          },\n        }))\n      );\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  },\n}));\n\nexport default useTransactionStore;\n","/Users/jithendra/Desktop/Work/meta-soft-xrp/xrp-shopify-coupon-client/src/store/currency-exchage/index.js",["399"],"import create from 'zustand';\nimport produce from 'immer';\nimport axios from 'axios';\nimport { INTERNAL_SERVER_ERROR } from '../../constants/strings';\n\nconst INITIAL_CURRENCY_EXCHANGE_SATAE = {\n    get:{\n        loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n    }\n}\n\nconst useCurrencyExchangeStore = create((set) => ({\n    currencyExchangeState: INITIAL_CURRENCY_EXCHANGE_SATAE,\n    getCurrencyExchangeState: async () => {\n        set(\n            produce((state) => ({\n                ...state,\n                currencyExchangeState: {\n                    ...state.currencyExchangeState,\n                    get: {\n                        ...INITIAL_CURRENCY_EXCHANGE_SATAE.get,\n                        loading: true,\n                    }\n                }\n            }))\n        )\n\n        try{ \n            const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=usd&vs_currencies=xrp')\n            // console.log(response);\n            set(\n                produce((state) => ({\n                    ...state,\n                    currencyExchangeState: {\n                        ...state.currencyExchangeState,\n                        get: {\n                            ...INITIAL_CURRENCY_EXCHANGE_SATAE.get,\n                            success: {\n                                ok: true,\n                                data: response.data.usd,\n                            }\n                        }\n                    }\n                }))\n            )\n            return response;\n        } catch (e){\n            console.log(e);\n        }\n    }\n}))\n\nexport default useCurrencyExchangeStore","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/index.js",[],["400","401"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/index.js",["402","403","404","405","406","407"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/context/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/utils/url/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/App.js",["408","409"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/shopify/Authorize.js",["410"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/embed/index.js",["411","412","413","414"],"import { useEffect, useState, useContext } from \"react\";\nimport {\n  Container,\n  Box,\n  Center,\n  useColorModeValue,\n  Heading,\n  Text,\n  Stack,\n  Link,\n  Button,\n  Flex,\n  SimpleGrid,\n  VStack,\n  Divider,\n  Skeleton,\n  useDisclosure,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalOverlay,\n  ModalHeader,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport Carousel from \"../../components/carousel\";\nimport useLooksStore from \"../../store/looks\";\nimport useProductsStore from \"../../store/products\";\nimport useViewsStore from \"../../store/views\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { ShopContext } from \"../../context\";\nimport \"../../embed.css\";\n\nconst ProductsModal = (props) => {\n  const { isOpen, onClose, productIds = [], lookId } = props;\n  const products = useProductsStore((state) => state.products);\n  const getProducts = useProductsStore((state) => state.getProducts);\n  const shop = useContext(ShopContext);\n\n  useEffect(() => {\n    getProducts({ products: productIds, shop });\n  }, []);\n\n  const renderProducts = () => {\n    if (products.get.loading) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {[1, 2, 3].map((e, i) => (\n            <Center p={4} key={i}>\n              <Skeleton width=\"330px\" height=\"330px\" />\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else if (products.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {products.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button\n                onClick={() => getProducts({ products: productIds, shop })}\n              >\n                Try Again\n              </Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (products.get.success.data.length) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {products.get.success.data.map((product) => (\n            <Center py={8} key={product.admin_graphql_api_id || product.id}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  <Carousel medias={product.images} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {product.variants && product.variants.length\n                      ? `${product.variants.length} variants available`\n                      : null}\n                  </Text>\n                  <Heading\n                    textAlign=\"center\"\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {product.title}\n                  </Heading>\n                  <Link\n                    marginTop={\"10px\"}\n                    href={`http://${shop}/products/${product.handle}?app=shoplook&lookid=${lookId}`}\n                    target=\"_blank\"\n                    width=\"full\"\n                  >\n                    <Button isFullWidth rightIcon={<ExternalLinkIcon />}>\n                      View Product\n                    </Button>\n                  </Link>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else {\n      return null;\n    }\n  };\n  return (\n    <>\n      <Modal\n        isCentered\n        scrollBehavior={\"inside\"}\n        closeOnOverlayClick\n        blockScrollOnMount={false}\n        preserveScrollBarGap\n        lockFocusAcrossFrames={false}\n        isOpen={isOpen}\n        onClose={onClose}\n        size=\"xl\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Shop the products in this look</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{renderProducts()}</ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nconst EmbedRoute = (props) => {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [productIds, setProductIds] = useState([]);\n  const [isModalvis, setIsModalvis] = useState(false);\n  const [currentLookId, setCurrentLookId] = useState(\"\");\n  const getViews = useViewsStore((state) => state.getViews);\n  const viewsState = useViewsStore((state) => state.viewsState);\n\n  useEffect(() => {\n    getViews({ shop });\n    getLooks({ shop });\n  }, []);\n\n  const onLooksClick = ({ lookId, products }) => {\n    setProductIds(products);\n    setCurrentLookId(lookId);\n    setIsModalvis(true);\n    onOpen();\n  };\n\n  const onModalClose = () => {\n    setCurrentLookId(\"\");\n    setProductIds([]);\n    setIsModalvis(false);\n    onClose();\n  };\n\n  const renderList = () => {\n    if (looks.get.loading) {\n      return [1, 2, 3].map((e, i) => (\n        <Center key={i}>\n          <Skeleton width=\"330px\" height=\"330px\" />\n        </Center>\n      ));\n    } else if (looks.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {looks.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button onClick={() => getLooks({ shop })}>Try Again</Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (looks.get.success.data.length) {\n      return (\n        <>\n          {isModalvis ? (\n            <ProductsModal\n              isOpen={isOpen}\n              onClose={onModalClose}\n              lookId={currentLookId}\n              productIds={productIds}\n            />\n          ) : null}\n          {looks.get.success.data.map((look) => (\n            <Center py={8} key={look.id || look.objectId}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                bg={bgColor}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  // _after={{\n                  // \ttransition: 'all .3s ease',\n                  // \tcontent: '\"\"',\n                  // \tw: 'full',\n                  // \th: 'full',\n                  // \tpos: 'absolute',\n                  // \ttop: 5,\n                  // \tleft: 0,\n                  // \tbackgroundImage: `url(${look.get('medias')[0].url()})`,\n                  // \tfilter: 'blur(15px)',\n                  // \tzIndex: -1,\n                  // }}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  {/* <Image\n\t\t\t\t\t\t\t\t\t\t\trounded={'lg'}\n\t\t\t\t\t\t\t\t\t\t\theight={230} \n\t\t\t\t\t\t\t\t\t\t\twidth={282}\n\t\t\t\t\t\t\t\t\t\t\tobjectFit={'cover'}\n\t\t\t\t\t\t\t\t\t\t\tsrc={'https://images.unsplash.com/photo-1518051870910-a46e30d9db16?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80'}\n\t\t\t\t\t\t\t\t\t\t/> */}\n                  <Carousel medias={look.medias} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {look.products.length} products in this look\n                  </Text>\n                  <Heading\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {look.name}\n                  </Heading>\n                  <Button\n                    marginTop={\"10px\"}\n                    onClick={() =>\n                      onLooksClick({\n                        lookId: look.id || look.objectId,\n                        products: look.products,\n                      })\n                    }\n                    isFullWidth\n                  >\n                    Hedera Coupon\n                  </Button>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </>\n      );\n    }\n  };\n\n  return (\n    <Container maxW={\"7xl\"} p=\"12\">\n      <Center>\n        <Heading>Hedera Coupon</Heading>\n      </Center>\n      <br />\n      <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n        {renderList()}\n      </SimpleGrid>\n    </Container>\n  );\n};\n\nexport default EmbedRoute;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/transaction/index.js",["415","416","417","418","419"],"import {\n  Box,\n  Container,\n  Heading,\n  Table,\n  TableContainer,\n  Th,\n  Thead,\n  Tr,\n  Tbody,\n  Td,\n  VStack,\n  Text,\n  Divider,\n  useColorMode,\n  Link,\n  SkeletonCircle,\n  SkeletonText,\n} from \"@chakra-ui/react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport NavBar from \"../../components/navbar\";\nimport { ShopContext } from \"../../context\";\nimport useTransactionStore from \"../../store/transaction\";\n\nconst TransactionRoute = () => {\n  const shop = useContext(ShopContext);\n  const transactionState = useTransactionStore(\n    (state) => state.transactionState\n  );\n  const getTransactionState = useTransactionStore(\n    (state) => state.getTransactionState\n  );\n\n  useEffect(async () => {\n    getTransactionState(shop);\n  }, []);\n\n  if (transactionState.get.success.data.length === 0) {\n    return (\n     \n      <>\n      <NavBar />\n       <Container\n      maxW={\"7xl\"}\n      p={[12, 6]}\n      minH={\"100vh\"}\n      bg=\"#f6f6f7\"\n      textAlign={\"left\"}\n    >\n      <Box padding=\"6\" boxShadow=\"lg\" bg=\"white\">\n        <SkeletonCircle size=\"10\" />\n        <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n      </Box>\n      </Container>\n      </>\n    );\n  } else {\n    return (\n      <>\n      <NavBar />\n        <Container\n          maxW={\"7xl\"}\n          p={[12, 6]}\n          minH={\"100vh\"}\n          bg=\"#f6f6f7\"\n          textAlign={\"left\"}\n        >\n          <Box bg=\"white\" width={\"5xl\"} m=\"auto\" p={5} borderRadius=\"10px\">\n            <VStack spacing={2} align=\"stretch\">\n              <Box>\n                <Text size=\"xl\" fontWeight=\"bold\">\n                  HABR Transaction Details\n                </Text>\n                <Divider borderColor=\"gray.200\" />\n              </Box>\n            </VStack>\n\n            <TableContainer p=\"5\">\n              <Table variant={\"simple\"}>\n                <Thead>\n                  <Tr>\n                    <Th>Account</Th>\n                    <Th isNumeric>Amount</Th>\n                    <Th>Fee</Th>\n                    <Th>Result</Th>\n                    <Th>Transaction Ref</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {transactionState.get.success.data.transactions.map(\n                    (details) => (\n                      <Tr>\n                        <Td>\n                          {\n                             details.transfers.slice(-1).pop().account\n                          }\n                          </Td>\n                        <Td isNumeric>{details.transfers.slice(-1).pop().amount}</Td>\n                        <Td>{details.charged_tx_fee}</Td>\n                        <Td>{details.result}</Td>\n                        <Td>\n                          <Link\n                            color=\"teal\"\n                            target=\"_blank\"\n                            href={`${process.env.REACT_APP_HBAR_TRANSACTION_REFFERENCE}transaction/${details.transaction_id}`}\n                          >\n                            {details.transaction_id}\n                          </Link>\n                        </Td>\n                      </Tr>\n                    )\n                  )}\n                </Tbody>\n              </Table>\n            </TableContainer>\n          </Box>\n        </Container>\n      </>\n    );\n  }\n};\n\nexport default TransactionRoute;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/look/index.js",["420","421","422","423","424","425","426","427","428","429","430","431","432","433"],"import { useEffect, useState, useContext } from \"react\";\nimport {\n  Box,\n  Flex,\n  Stack,\n  Heading,\n  Text,\n  Container,\n  Input,\n  Button,\n  SimpleGrid,\n  useBreakpointValue,\n  FormControl,\n  FormLabel,\n  Icon,\n  StackDivider,\n  useColorModeValue,\n  Image,\n  useDisclosure,\n  chakra,\n  toast,\n  useToast,\n  Avatar,\n  AvatarGroup,\n  SkeletonText,\n  SkeletonCircle,\n  Skeleton,\n  VStack,\n  Divider,\n  AvatarBadge,\n  ButtonGroup,\n  InputGroup,\n  InputLeftAddon,\n  Grid,\n  GridItem,\n  TableContainer,\n  Table,\n  Tbody,\n  Tr,\n  Td,\n  TableCaption,\n  Thead,\n  Th,\n  Tfoot,\n  FormHelperText,\n  Alert,\n  AlertIcon,\n  InputRightAddon,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { IoClose, IoAddOutline, IoCloseCircleOutline } from \"react-icons/io5\";\nimport { ResourcePicker } from \"@shopify/app-bridge-react\";\nimport NavBar from \"../../components/navbar\";\n\nimport useFilesStore from \"../../store/files\";\nimport useScriptsStore from \"../../store/scripts\";\n\nimport Upload from \"../../components/upload\";\nimport useLooksStore from \"../../store/looks\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { ShopContext } from \"../../context\";\nimport useCurrencyExchangeStore from \"../../store/currency-exchage\";\n\nconst renderSkeleton = () => {\n  return (\n    <Flex direction=\"column\" width=\"100%\">\n      <Skeleton width=\"100%\" height=\"40px\">\n        {\" \"}\n      </Skeleton>\n      <SkeletonText mt=\"4\" noOfLines={1} spacing=\"4\" />\n      <br />\n      <br />\n      <Box>\n        <SkeletonCircle size=\"20\" />\n        <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n      </Box>\n    </Flex>\n  );\n};\n\nfunction CreateLooks(props) {\n  const shop = useContext(ShopContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: isResourcePickerOpen,\n    onOpen: onResourcePickerOpen,\n    onClose: onResourcePickerClose,\n  } = useDisclosure();\n  const looks = useLooksStore((state) => state.looks);\n  const files = useFilesStore((state) => state.files);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const postLooks = useLooksStore((state) => state.postLooks);\n  const destroyLooks = useLooksStore((state) => state.destroyLooks);\n  const patchLooks = useLooksStore((state) => state.patchLooks);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n\n  const currencyExchangeState = useCurrencyExchangeStore(\n    (state) => state.currencyExchangeState\n  );\n  const getCurrencyExchangeState = useCurrencyExchangeStore(\n    (state) => state.getCurrencyExchangeState\n  );\n\n  const { id = \"\" } = useParams();\n  const toast = useToast();\n  const navigate = useNavigate();\n  const colorMode = useColorModeValue(\"gray.100\", \"gray.700\");\n  const [looksName, setLooksName] = useState(props.looks.name);\n  const [looksPrice, setLooksPrice] = useState(props.looks.price);\n  const [lookHbarPrice, setLookHbarPrice] = useState();\n  const [uploads, setUploads] = useState(props.looks.files || []);\n  const [products, setProducts] = useState(props.looks.products || []);\n  const [exchangeRate, setExchageRate] = useState();\n\n  const [totalProductsPrice, setTotlaProductsPrice] = useState(\"\");\n  const onUploadWidgetClose = (data = []) => {\n    setUploads([...uploads, ...data]);\n    onClose();\n  };\n\n  const getExchangeRate = (data) => {\n    console.log(data);\n    setLookHbarPrice(\n      (currencyExchangeState.get.success.data * data).toFixed(2)\n    );\n  };\n\n  const onResourcePickerDone = (data = {}) => {\n    console.log(data);\n    setProducts([\n      // ...products.filter(Boolean),\n      ...data?.selection\n        ?.map((d) => {\n          return {\n            title: d.title,\n            image: (d.images[0] && d.images[0]?.originalSrc) || \"\",\n            id: d.id,\n            price: parseInt(d.variants[0]?.price) || 0,\n          };\n        })\n        .filter(Boolean),\n    ]);\n    onResourcePickerClose();\n    let productSum = 0;\n    const result = data.selection.reduce((p, n) => {\n      productSum = p + parseFloat(n.variants[0].price);\n      return productSum;\n    }, 0);\n    setTotlaProductsPrice(result);\n  };\n\n  const getLooskById = async () => {\n    if (id) {\n      const data = await getLooks({ id });\n      if (data) {\n        setLooksName(data?.name);\n        setUploads([...uploads, ...data?.medias]);\n        setLooksPrice([data?.price]);\n        // console.log(\"asdf \", data.products);\n        setProducts([\n          ...products,\n          ...data?.products.map((p) => ({\n            id: p.admin_graphql_api_id,\n            title: p.title,\n            image: p?.image?.src,\n            price: parseInt(p.variants[0]?.price) || 0,\n          })),\n        ]);\n        let productSum = 0;\n        const result = data.products.reduce((p, n) => {\n          productSum = p + parseFloat(n.variants[0].price);\n          return productSum;\n        }, 0);\n        setTotlaProductsPrice(result);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getLooskById();\n    getCurrencyExchangeState();\n  }, []);\n\n  const removeUpload = (upload, index) => {\n    uploads.splice(index, 1);\n    setUploads([...uploads.filter(Boolean)]);\n  };\n\n  const removeProduct = (index) => {\n    products.splice(index, 1);\n    setProducts([...products.filter(Boolean)]);\n    // console.log(products);\n    let productSum = 0;\n    const result = products.reduce((p, n) => {\n      productSum = p + parseFloat(n.price);\n      return productSum;\n    }, 0);\n    setTotlaProductsPrice(result);\n  };\n\n  const onDestroyLook = async (lookId) => {\n    try {\n      await destroyLooks(lookId);\n      toast({\n        title: `Look deleted!`,\n        status: \"success\",\n      });\n      window.history.back();\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n  const renderProducts = () => {\n    return (\n      <>\n        <TableContainer pb={\"10px\"}>\n          <Table variant=\"striped\" colorScheme={\"gray\"}>\n            <Thead>\n              <Tr>\n                <Th>Product Image</Th>\n                <Th>Product Name</Th>\n                <Th isNumeric>Product Price</Th>\n                <Th>Action</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {products.map((product, index) => (\n                <Tr>\n                  <Td>\n                    <Image\n                      objectFit=\"contain\"\n                      boxSize=\"50px\"\n                      src={product.image}\n                      color={\"yellow.500\"}\n                    />\n                  </Td>\n                  <Td>{product.title}</Td>\n                  <Td isNumeric>{product.price}</Td>\n                  <Td textAlign={\"center\"}>\n                    <Icon\n                      as={IoClose}\n                      color={\"red.500\"}\n                      w={5}\n                      h={5}\n                      onClick={() => removeProduct(index)}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n              <Tr>\n                <Td></Td>\n                <Td isNumeric fontWeight={\"bold\"}>\n                  Total Product Price\n                </Td>\n                <Td isNumeric>\n                  <Text size=\"14px\" fontWeight={\"bold\"}>\n                    {totalProductsPrice}\n                  </Text>\n                </Td>\n                <Td></Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        </TableContainer>\n      </>\n    );\n  };\n\n  const renderLooks = () => {\n    if (currencyExchangeState.get.loading) {\n      return renderSkeleton();\n    } else if (currencyExchangeState.get.failure.error) {\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              {currencyExchangeState.get.failure.message}\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Button onClick={() => getCurrencyExchangeState()}>\n              Try Again\n            </Button>\n          </VStack>\n        </Flex>\n      </Box>;\n    } else {\n      if (looks.get.loading) {\n        return renderSkeleton();\n      } else if (looks.get.failure.error) {\n        return (\n          <Box>\n            <Flex direction=\"column\" align=\"center\">\n              <VStack spacing=\"3\">\n                <Heading as=\"h1\" size=\"md\">\n                  {looks.get.failure.message}\n                </Heading>\n              </VStack>\n              <br />\n              <Divider />\n              <br />\n              <VStack spacing=\"3\">\n                <Button onClick={() => getLooskById()}>Try Again</Button>\n              </VStack>\n            </Flex>\n          </Box>\n        );\n      } else {\n        const { data } = looks?.get?.success;\n        return (\n          <>\n            <Stack spacing={4}>\n              <Heading\n                color={\"gray.800\"}\n                lineHeight={1.1}\n                fontSize={{ base: \"2xl\", sm: \"3xl\", md: \"4xl\" }}\n              >\n                {data && data.name ? data.name : \"Create a look\"}\n              </Heading>\n              <Text\n                color={\"gray.500\"}\n                fontSize={{ base: \"sm\", sm: \"md\" }}\n              ></Text>\n            </Stack>\n            <Box mt={10}>\n              <chakra.form\n                onSubmit={async (e) => {\n                  e.preventDefault();\n                  try {\n                    if (id) {\n                      await patchLooks({\n                        id,\n                        name: looksName,\n                        price: looksPrice,\n                        medias: uploads,\n                        products: products.map((product) => product.id),\n                      });\n                    } else {\n                      await postLooks({\n                        name: looksName,\n                        price: looksPrice,\n                        medias: uploads,\n                        products: products.map((product) => product.id),\n                      });\n                      try {\n                        const scriptsOnStore = await getScripts(shop);\n                        if (scriptsOnStore && scriptsOnStore.length) {\n                          // already has a script tag, do nothing.\n                        } else {\n                          await postScripts(shop);\n                        }\n                        window.history.back();\n                      } catch (e) {\n                        window.history.back();\n                      }\n                    }\n                    toast({\n                      title: `Looks ${\n                        id ? \"updated\" : \"created\"\n                      } successfully!`,\n                      status: \"success\",\n                    });\n                  } catch (e) {\n                    toast({\n                      title: e.message || INTERNAL_SERVER_ERROR,\n                      status: \"error\",\n                    });\n                  }\n                }}\n                {...props}\n              >\n                <Stack spacing={4}>\n                  <FormControl id=\"look-name\">\n                    <FormLabel>Look name</FormLabel>\n                    <Input\n                      placeholder=\"Winter Fashion Look\"\n                      name=\"look_name\"\n                      type=\"text\"\n                      value={looksName}\n                      onChange={(e) => setLooksName(e.target.value)}\n                      required\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel>Add medias to this look</FormLabel>\n                    <AvatarGroup>\n                      {uploads.map((upload, index) => (\n                        <Avatar\n                          key={(upload._name || upload.name) + index}\n                          name={upload._name || upload.name}\n                          src={upload._url || upload.url}\n                          size=\"lg\"\n                          // size={useBreakpointValue({ base: 'md', md: 'lg' })}\n                          position={\"relative\"}\n                          zIndex={2}\n                          _before={{\n                            content: '\"\"',\n                            width: \"full\",\n                            height: \"full\",\n                            rounded: \"full\",\n                            transform: \"scale(1.125)\",\n                            bgGradient: \"linear(to-bl, red.400,pink.400)\",\n                            position: \"absolute\",\n                            zIndex: -1,\n                            top: 0,\n                            left: 0,\n                          }}\n                        >\n                          <AvatarBadge\n                            boxSize=\"1.25em\"\n                            bg=\"red.500\"\n                            onClick={() => removeUpload(upload, index)}\n                          >\n                            <Icon\n                              as={IoCloseCircleOutline}\n                              color={\"white.500\"}\n                              w={5}\n                              h={5}\n                            />\n                          </AvatarBadge>\n                        </Avatar>\n                      ))}\n                      <Avatar\n                        onClick={onOpen}\n                        size=\"lg\"\n                        bg={\"pink.400\"}\n                        _hover={{ bg: \"pink.300\" }}\n                        cursor=\"pointer\"\n                        icon={<IoAddOutline size=\"2em\" color=\"white\" />}\n                        _before={{\n                          content: '\"\"',\n                          width: \"full\",\n                          height: \"full\",\n                          rounded: \"full\",\n                          transform: \"scale(1.2)\",\n                          bgGradient: \"linear(to-bl, red.400,pink.400)\",\n                          position: \"absolute\",\n                          zIndex: -1,\n                          top: 0,\n                          left: 0,\n                        }}\n                      ></Avatar>\n                    </AvatarGroup>\n                    <Upload isOpen={isOpen} onClose={onUploadWidgetClose} />\n                  </FormControl>\n                  <br />\n                  <br />\n                  <FormControl id=\"look-products\">\n                    <FormLabel>Add products for this look</FormLabel>\n                    {products.length === 0 ? \"\" : renderProducts()}\n                    <Button\n                      fontFamily={\"heading\"}\n                      bg={\"gray.200\"}\n                      color={\"gray.800\"}\n                      onClick={onResourcePickerOpen}\n                    >\n                      Link products +\n                    </Button>\n                    <ResourcePicker\n                      onSelection={onResourcePickerDone}\n                      onCancel={onResourcePickerClose}\n                      selectMultiple\n                      showVariants={false}\n                      resourceType=\"Product\"\n                      open={isResourcePickerOpen}\n                      initialSelectionIds={products\n                        .map((product) => ({ id: product.id }))\n                        .filter(Boolean)}\n                    />\n                  </FormControl>\n                  <FormControl id=\"look-price\">\n                    <FormLabel>\n                      Add Price in USD for the above products\n                    </FormLabel>\n                    <InputGroup>\n                      <InputLeftAddon children=\"USD\" />\n                      <Input\n                        placeholder=\"100\"\n                        name=\"look_price\"\n                        type=\"text\"\n                        value={looksPrice}\n                        onChange={(e) => {\n                          setLooksPrice(e.target.value);\n                        }}\n                        onBlur={(e) => getExchangeRate(e.target.value)}\n                        required\n                      />\n                      <InputRightAddon w={\"50%\"}>\n                        {currencyExchangeState.get.loading ? (\n                          <Spinner />\n                        ) : (\n                          `${lookHbarPrice ? lookHbarPrice : \"0\"} HBAR`\n                        )}\n                      </InputRightAddon>\n                    </InputGroup>\n                    <FormHelperText>\n                      The total number of HBAR user has to pay to shop all of\n                      the above products in this look\n                    </FormHelperText>\n                  </FormControl>\n                </Stack>\n                <ButtonGroup mt={8} width=\"full\">\n                  {data && data.objectId ? (\n                    <Button\n                      isLoading={looks.destroy.loading}\n                      onClick={() => onDestroyLook(data.objectId)}\n                      isFullWidth\n                      variant=\"ghost\"\n                      colorScheme=\"red\"\n                    >\n                      Delete Look\n                    </Button>\n                  ) : null}\n                  <Button\n                    isLoading={\n                      looks.post.loading ||\n                      looks.patch.loading ||\n                      scripts.get.loading ||\n                      scripts.post.loading\n                    }\n                    disabled={\n                      looks.post.loading ||\n                      looks.patch.loading ||\n                      scripts.get.loading ||\n                      scripts.post.loading\n                    }\n                    loadingText={`${id ? \"Updating\" : \"Saving\"} look`}\n                    type=\"submit\"\n                    fontFamily={\"heading\"}\n                    isFullWidth\n                    w={\"full\"}\n                    bgGradient=\"linear(to-r, red.400,pink.400)\"\n                    color={\"white\"}\n                    _hover={{\n                      bgGradient: \"linear(to-r, red.400,pink.400)\",\n                      boxShadow: \"xl\",\n                    }}\n                  >\n                    {`${id ? \"Update\" : \"Save\"} look`}\n                  </Button>\n                </ButtonGroup>\n              </chakra.form>\n            </Box>\n          </>\n        );\n      }\n    }\n  };\n\n  return (\n    <>\n      <NavBar />\n      <Box position={\"relative\"} bg=\"#ccc\">\n        <Container\n          as={SimpleGrid}\n          maxW={\"7xl\"}\n          columns={{ base: 1, md: 1 }}\n          spacing={{ base: 10, lg: 32 }}\n          py={{ base: 10, sm: 15, lg: 20 }}\n        >\n          <Stack\n            bg={\"gray.50\"}\n            rounded={\"xl\"}\n            p={{ base: 4, sm: 6, md: 8 }}\n            spacing={{ base: 8 }}\n            maxW=\"3xl\"\n            zIndex=\"9\"\n            margin=\"0 auto\"\n            width=\"100%\"\n          >\n            {renderLooks()}\n          </Stack>\n        </Container>\n        <Blur\n          position={\"absolute\"}\n          top={30}\n          left={-10}\n          style={{ filter: \"blur(70px)\" }}\n        />\n      </Box>\n    </>\n  );\n}\n\nexport const Blur = (props) => {\n  return (\n    <Icon\n      width={useBreakpointValue({ base: \"100%\", md: \"40vw\", lg: \"30vw\" })}\n      zIndex={useBreakpointValue({ base: -1, md: -1, lg: 0 })}\n      height=\"560px\"\n      viewBox=\"0 0 528 560\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle cx=\"71\" cy=\"61\" r=\"111\" fill=\"#F56565\" />\n      <circle cx=\"244\" cy=\"106\" r=\"139\" fill=\"#ED64A6\" />\n      <circle cy=\"291\" r=\"139\" fill=\"#ED64A6\" />\n      <circle cx=\"80.5\" cy=\"189.5\" r=\"101.5\" fill=\"#ED8936\" />\n      <circle cx=\"196.5\" cy=\"317.5\" r=\"101.5\" fill=\"#ECC94B\" />\n      <circle cx=\"70.5\" cy=\"458.5\" r=\"101.5\" fill=\"#48BB78\" />\n      <circle cx=\"426.5\" cy=\"-0.5\" r=\"101.5\" fill=\"#4299E1\" />\n    </Icon>\n  );\n};\n\nCreateLooks.defaultProps = {\n  looks: {\n    name: \"\",\n  },\n};\n\nexport default CreateLooks;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/settings/index.js",["434","435","436","437","438","439","440","441"],"import { useEffect, useContext, useState } from \"react\";\nimport {\n  Box,\n  Heading,\n  ButtonGroup,\n  Text,\n  Button,\n  Container,\n  useToast,\n  Code,\n  Divider,\n  Input,\n  FormControl,\n  InputLeftElement,\n  InputGroup,\n  FormHelperText,\n  Alert,\n  AlertIcon,\n  SimpleGrid,\n  FormErrorMessage,\n  Spinner,\n  SkeletonText,\n} from \"@chakra-ui/react\";\nimport useScriptsStore from \"../../store/scripts\";\nimport { ShopContext } from \"../../context\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport NavBar from \"../../components/navbar\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useWalletStore from \"../../store/wallet\";\n\nconst SettingsRoute = () => {\n  const shop = useContext(ShopContext);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n  const destroyScripts = useScriptsStore((state) => state.destroyScripts);\n  const toast = useToast();\n\n  const verifyWalletSate = useWalletStore((state) => state.verifyWalletSate);\n  const hBarWalletAddress = useWalletStore((state) => state.walletState);\n  const getWalletAddress = useWalletStore((state) => state.getWalletAddress);\n  const postWalletAddress = useWalletStore((state) => state.postWalletAddress);\n  const verifyWalletAddress = useWalletStore((state) => state.verifyWalletAddress);\n\n\n  const onSubmitHandler = async (data) => {\n    const walletAddress = data;\n    await verifyWalletAddress(walletAddress);\n    console.log(verifyWalletSate.get.success.ok);\n    if (verifyWalletSate.get.success.ok === true) {\n      try {\n        await postWalletAddress({ shop, walletAddress });\n        toast({\n          title: \"Wallet address added successfully!\",\n          status: \"success\",\n          duration: 3000,\n        });\n      } catch (e) {\n        toast({\n          title: e.message || \"Something went wrong.\",\n          status: \"error\",\n          duration: 3000,\n        });\n      }\n    } else {\n      toast({\n        title: \"Something went wrong.\",\n        status: \"error\",\n        duration: 3000,\n      });\n    }\n  };\n\n  const walletSchema = Yup.object().shape({\n    walletAddress: Yup.string().required(\"Wallet Address Is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: { walletAddress: \"\" },\n    validationSchema: walletSchema,\n    onSubmit: (values) => {\n      if (values) {\n        onSubmitHandler(values.walletAddress);\n      }\n    },\n  });\n\n  useEffect(() => {\n    getWalletAddress(shop);\n    getScripts(shop);\n  }, []);\n\n\n  useEffect(() => {\n      formik.setFieldValue(\"walletAddress\", hBarWalletAddress?.get?.success?.data?.walletAddress || \"\")\n  }, [hBarWalletAddress?.get?.success?.data?.walletAddress])\n\n  const enableWidget = async () => {\n    try {\n      await postScripts(shop);\n      toast({\n        title: `Widget added successfully! Please visit your online store after 30 seconds to check the widget.`,\n        status: \"success\",\n      });\n      getScripts(shop);\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n  const HbarAddressInput = () => {\n    if (hBarWalletAddress.get.loading) {\n      return (\n        <Box width={'100%'} alignItems=\"center\">\n          <SkeletonText mt='4' noOfLines={4} spacing='4' />\n        </Box>\n      );\n    } else if (hBarWalletAddress.get.success.ok) {\n      return (\n        <Box>\n          <Text size=\"xl\" fontWeight=\"bold\" pb=\"5px\">\n            HBAR wallet address where to receive HBAR from customer\n          </Text>\n          <FormControl\n            onSubmit={formik.handleSubmit}\n            isInvalid={\n              formik.touched.walletAddress && formik.errors.walletAddress\n            }\n          >\n            <Input\n              id=\"walletAddress\"\n              name=\"walletAddress\"\n              type=\"text\"\n              placeholder=\"HBAR Wallet Address\"\n              onChange={formik.handleChange}\n              value={formik.values.walletAddress}\n            />\n\n            <FormHelperText size=\"sm\" color={\"red\"}>\n              {formik.touched.walletAddress && formik.errors.walletAddress ? (\n                formik.errors.walletAddress\n              ) : (\n                <FormErrorMessage>\n                  Please check HBAR wallet address where to receive HBAR from\n                  customer\n                </FormErrorMessage>\n              )}\n            </FormHelperText>\n          </FormControl>\n\n          <Button\n            mt={4}\n            onClick={formik.handleSubmit}\n            isLoading={hBarWalletAddress.post.loading}\n            type=\"submit\"\n            size=\"sm\"\n            colorScheme={\"messenger\"}\n          >\n            Submit\n          </Button>\n        </Box>\n      );\n    }\n  };\n\n  const disableWidget = async () => {\n    try {\n      await destroyScripts(shop);\n      toast({\n        title: `Widget removed successfully!`,\n        status: \"success\",\n      });\n      getScripts(shop);\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n\n  const renderButton = () => {\n    if (scripts.get.loading) {\n      return (\n        <Button colorScheme=\"gray\" isLoading isDisabled>\n          Loading ...\n        </Button>\n      );\n    } else if (scripts.get.success.data.length) {\n      return (\n        <Button\n          isLoading={scripts.destroy.loading || scripts.get.loading}\n          fontWeight=\"bold\"\n          size=\"sm\"\n          colorScheme=\"red\"\n          onClick={disableWidget}\n        >\n          Remove Widget From Your Store\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          isLoading={scripts.post.loading || scripts.get.loading}\n          fontWeight=\"bold\"\n          size=\"sm\"\n          colorScheme=\"green\"\n          onClick={enableWidget}\n        >\n          Add Widget To Your Store\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <>\n      <NavBar />\n      <Container maxW={\"7xl\"} p={[12, 6]} bg=\"#f6f6f7\" textAlign={\"left\"}>\n        <Box as=\"section\" maxW=\"3xl\" mx=\"auto\">\n          <SimpleGrid spacing={4}>\n            <Box bg=\"white\" borderRadius={10} p={5} boxShadow=\"md\">\n              {HbarAddressInput()}\n            </Box>\n            <Box bg=\"white\" borderRadius={10} p={5} boxShadow=\"md\">\n              <Text size=\"xl\" fontWeight=\"bold\">\n                Widget Embed Settings\n              </Text>\n              <Text mt=\"4\" fontSize=\"sm\">\n                Enable or disable \"Hedera Coupon\" widget on your store. The\n                widget gets appended to the bottom of your store page above the\n                footer on the home page.\n              </Text>\n              <ButtonGroup mt=\"4\" spacing=\"6\">\n                {renderButton()}\n              </ButtonGroup>\n              <Alert mt={4} status=\"info\">\n                <AlertIcon />\n                <SimpleGrid>\n                  <Box>\n                    <Text fontSize=\"sm\">\n                      NOTE: If you want the widget only on certain pages or only\n                      in certain positions please add the following html tag to\n                      custom liquid or custom html section.\n                    </Text>\n                  </Box>\n                  <Box>\n                    <Code\n                      children={`<div id=\"frangout-shop-look-app\"> </div>`}\n                    ></Code>\n                  </Box>\n                </SimpleGrid>\n              </Alert>\n            </Box>\n          </SimpleGrid>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default SettingsRoute;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/routes/looks/index.js",["442","443","444","445"],"import { useEffect, useContext } from \"react\";\nimport {\n  Box,\n  Heading,\n  Icon,\n  Text,\n  Divider,\n  HStack,\n  Flex,\n  SimpleGrid,\n  Stack,\n  Button,\n  useColorModeValue,\n  Container,\n  VStack,\n  useToast,\n  Skeleton,\n  Alert,\n  Code,\n  ButtonGroup,\n  useDisclosure,\n  Link as ChakraLink,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogBody,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n} from \"@chakra-ui/react\";\nimport { DateTime } from \"luxon\";\nimport Carousel from \"../../components/carousel\";\nimport {\n  IoCaretForwardOutline,\n  IoHandLeftSharp,\n  IoEye,\n  IoCartSharp,\n  IoLogoUsd,\n  IoWallet\n} from \"react-icons/io5\";\n\nimport { Link } from \"react-router-dom\";\nimport useLooksStore from \"../../store/looks\";\nimport useScriptsStore from \"../../store/scripts\";\nimport useViewsStore from \"../../store/views\";\nimport useChargesStore from \"../../store/charges\";\nimport { ShopContext } from \"../../context\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { LinkIcon } from \"@chakra-ui/icons\";\n\nconst renderSkeleton = (looks) => {\n  return (\n    <Flex alignItems=\"flex-start\" flexDirection=\"row\">\n      <Skeleton>\n        <Carousel medias={[]} />\n      </Skeleton>\n      <Flex direction=\"column\" width=\"90%\" marginLeft=\"5\">\n        <Skeleton width=\"100%\" height=\"40px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst renderLookPoints = ({ look }) => {\n  return (\n    <SimpleGrid columns={2} spacing={5} marginTop=\"5\">\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoEye} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Views</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total views\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoHandLeftSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Clicks</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total clicks\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoCartSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Add to Cart</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Cart revenue\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoWallet} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Conversion</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total revenue\n          </Text>\n        </VStack>\n      </HStack>\n    </SimpleGrid>\n  );\n};\n\nconst renderCarousel = ({ orangeColorMode, look }) => {\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"1\"\n      marginRight=\"3\"\n      position=\"relative\"\n      alignItems=\"center\"\n    >\n      <Box zIndex=\"1\" width=\"100%\" position=\"absolute\" height=\"100%\">\n        <Box\n          bgGradient={orangeColorMode}\n          backgroundSize=\"20px 20px\"\n          opacity=\"0.4\"\n          height=\"100%\"\n        />\n      </Box>\n      <Box width={{ base: \"100%\" }} zIndex=\"2\">\n        <Carousel medias={look.medias} />\n      </Box>\n      \n    </Box>\n  );\n};\n\nexport const LooksCreatedDate = (props) => {\n  return (\n    <HStack display=\"flex\" alignItems=\"center\">\n      <Text fontWeight=\"light\" fontSize=\"sm\">\n        Created at:\n      </Text>\n      <Text fontSize=\"sm\">\n        {props.date.toLocaleString(DateTime.DATETIME_MED)}\n      </Text>\n    </HStack>\n  );\n};\n\nexport const renderLooks = ({ looks, orangeColorMode, getLooks }) => {\n  if (looks.get.loading) {\n    return renderSkeleton(looks);\n  } else if (looks.get.failure.error) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              {looks.get.failure.message}\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Button onClick={() => getLooks()}>Try Again</Button>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  } else if (looks.get.success.data.length) {\n    return looks.get.success.data.map((look) => (\n      <Box key={look.objectId} >\n        <Box\n          marginTop={{ base: \"1\", sm: \"5\" }}\n          marginBottom={{ base: \"1\", sm: \"5\" }}\n          display=\"flex\"\n          flexDirection={{ base: \"column\", sm: \"row\" }}\n          justifyContent=\"space-between\"\n          key={look.objectId}\n          padding=\"20px\"\n          boxShadow={'md'}\n          borderRadius={'10px'}\n          bg={'white'}\n        >\n          {renderCarousel({ orangeColorMode, look })}\n          <Box\n            display=\"flex\"\n            flex=\"1\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            marginTop={{ base: \"3\", sm: \"0\" }}\n          >\n            {/* <BlogTags tags={['Engineering', 'Product']} /> */}\n            <Skeleton isLoaded={!looks.get.loading}>\n              <Text fontSize='3xl' marginTop=\"1\" textTransform={'capitalize'}>\n                <Link\n                  textDecoration=\"none\"\n                  _hover={{ textDecoration: \"none\" }}\n                  to={`looks/${look.objectId}`}\n                >\n                  {look.name}\n                </Link>\n              </Text>\n              \n              <LooksCreatedDate date={look.createdAt} />\n            </Skeleton>\n            {renderLookPoints({ look })}\n            <Stack direction=\"row\" spacing={4} marginTop=\"5\">\n              <Link to={`looks/${look.objectId}`}>\n                <Button\n                  colorScheme=\"blue\"\n                  isFullWidth\n                  leftIcon={<IoCaretForwardOutline />}\n                  variant=\"solid\"\n                >\n                  View / Modify\n                </Button>\n              </Link>\n            </Stack>\n          </Box>\n        </Box>\n        <Divider marginTop=\"1em\" marginBottom=\"1em\" />\n      </Box>\n    ));\n  } else if (!looks.get.success.data.length) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              You have not created any looks yet\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Link to=\"/looks/create\">\n              <Button>Create Look</Button>\n            </Link>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  }\n  return null;\n};\n\nfunction Looks(props) {\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n  const destroyScripts = useScriptsStore((state) => state.destroyScripts);\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const orangeColorMode = useColorModeValue(\n    \"radial(orange.600 1px, transparent 1px)\",\n    \"radial(orange.300 1px, transparent 1px)\"\n  );\n  // const getViews = useViewsStore((state) => state.getViews);\n  // const viewsState = useViewsStore((state) => state.viewsState);\n  const getCharges = useChargesStore((state) => state.getCharges);\n  const postCharges = useChargesStore((state) => state.postCharges);\n  const chargesState = useChargesStore((state) => state.chargesState);\n  const destroyCharges = useChargesStore((state) => state.destroyCharges);\n  const postViews = useViewsStore((state) => state.postViews);\n\n  const udpateSubscribedState = async () => {\n    try {\n      const chargesData = await getCharges({ shop }); // this api  will return both charges and views\n      console.log(chargesData);\n      const activeCharge = chargesData.recurringApplicationCharges.find(\n        (charge) => charge.status === \"active\"\n      );\n      if (activeCharge) {\n        postViews({ shop, subscribed: true });\n      } else {\n        postViews({ shop, subscribed: false });\n      }\n    } catch (e) {}\n  };\n  useEffect(async () => {\n    getLooks();\n    getScripts(shop);\n    // getViews({ shop });\n    udpateSubscribedState();\n  }, []);\n\n  const renderWidgetStatusAlert = ({ looks }) => {\n    if (!looks.get.success.data.length) {\n      return null;\n    }\n\n    const enableWidget = async () => {\n      try {\n        await postScripts(shop);\n        toast({\n          title: `Widget added successfully! Please visit your online store after 30 seconds to check the widget.`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const disableWidget = async () => {\n      try {\n        await destroyScripts(shop);\n        toast({\n          title: `Widget removed successfully!`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const renderButton = () => {\n      if (scripts.get.loading) {\n        return (\n          <Button colorScheme=\"gray\" isLoading isDisabled>\n            Loading ...\n          </Button>\n        );\n      } else if (scripts.get.success.data.length) {\n        return (\n          <>\n            <ChakraLink\n              target=\"_blank\"\n              href={`http://${shop}#frangout-shop-look-app-wrapper`}\n            >\n              <Button\n                fontWeight=\"bold\"\n                size=\"md\"\n                colorScheme=\"green\"\n                variant=\"ghost\"\n                leftIcon={<LinkIcon />}\n              >\n                Preview Widget\n              </Button>\n            </ChakraLink>\n            <Button\n              isLoading={scripts.destroy.loading || scripts.get.loading}\n              fontWeight=\"bold\"\n              size=\"md\"\n              colorScheme=\"red\"\n              onClick={disableWidget}\n            >\n              Remove Widget\n            </Button>\n          </>\n        );\n      } else {\n        return (\n          <Button\n            isLoading={scripts.post.loading || scripts.get.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={enableWidget}\n          >\n            Add Widget To Your Store\n          </Button>\n        );\n      }\n    };\n\n    const renderScriptStatusText = () => {\n      if (scripts.get.loading) {\n        return null;\n      } else if (scripts.get.success.data.length) {\n        return (\n          <Flex direction=\"column\">\n            <Text>\n              \"Hedera Coupon\" widget <b>has been added</b> to your store page.\n              &nbsp;\n            </Text>\n            <Text\n              cursor=\"pointer\"\n              onClick={onOpen}\n              style={{ textDecoration: \"underline\" }}\n            >\n              For custom widget position instructions <b>click here.</b>\n            </Text>\n          </Flex>\n        );\n      } else {\n        return (\n          <Text>\n            \"Hedera Coupon\" widget is <b>not added</b> to your store page.\n          </Text>\n        );\n      }\n    };\n    return (\n      <Alert status=\"info\" boxShadow='md'>\n        <Flex\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          width=\"100%\"\n          alignItems=\"center\"\n          height=\"100%\"\n          \n        >\n          <Stack>{renderScriptStatusText()}</Stack>\n          <ButtonGroup variant=\"outline\" spacing=\"6\">\n            {renderButton()}\n          </ButtonGroup>\n        </Flex>\n      </Alert>\n    );\n  };\n\n  const renderChargesStatusAlert = () => {\n    const renderSubscribeButton = () => {\n      const activeCharge =\n        chargesState.get.success.data.recurringApplicationCharges.find(\n          (charge) => charge.status === \"active\"\n        );\n      if (activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.destroy.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"red\"\n            onClick={async () => {\n              const data = await destroyCharges({\n                chargeId: activeCharge.id,\n              });\n              getCharges({ shop });\n              udpateSubscribedState();\n            }}\n          >\n            Cancel Paid Plan\n          </Button>\n        );\n      } else if (!activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.post.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={async () => {\n              const data = await postCharges({\n                returnURL: `https://${shop}/admin/apps/${process.env.REACT_APP_SHOPIFY_APP_NAME}`,\n              });\n              if (data) {\n                if (window.self !== window.top) {\n                  // checking if it is an iframe\n                  window.parent.location.href = data.confirmation_url;\n                } else {\n                  window.location.href = data.confirmation_url;\n                }\n              }\n            }}\n          >\n            $4.99/month for unlimited views\n          </Button>\n        );\n      }\n    };\n\n    if (chargesState.get.loading) {\n      return null;\n    } else if (chargesState.get.success.ok) {\n      return (\n        <Alert status=\"info\">\n          <Flex\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            width=\"100%\"\n            alignItems=\"center\"\n            height=\"100%\"\n          >\n            <Stack>\n              <Text>\n                The Hedera Coupon widget on your store has{\" \"}\n                <b>{chargesState.get.success.data.views.count}</b> views{\" \"}\n              </Text>\n              <Text>\n                The first 1000 views are free. Please subscribe to our flat\n                $4.99/month paid plan for unlimited views.\n              </Text>\n            </Stack>\n            <ButtonGroup variant=\"outline\" spacing=\"6\">\n              {renderSubscribeButton()}\n            </ButtonGroup>\n          </Flex>\n        </Alert>\n      );\n    } else if (chargesState.get.failure.error) {\n      return null;\n    }\n  };\n\n  return (\n    <>\n    \n      {renderWidgetStatusAlert({ looks })}\n      <Divider />\n      {renderChargesStatusAlert()}\n      <Container maxW={\"3xl\"}>\n        {renderLooks({ looks, orangeColorMode, getLooks })}\n      </Container>\n      <AlertDialog onClose={onClose} isOpen={isOpen} isCentered size=\"3xl\">\n        <AlertDialogOverlay />\n\n        <AlertDialogContent>\n          <AlertDialogHeader>Custom Widget Position</AlertDialogHeader>\n          <AlertDialogCloseButton />\n          <AlertDialogBody textAlign=\"center\">\n            If you want the widget only on certain pages or only in certain\n            positions please add the following html tag to custom liquid or\n            custom html section.\n            <br />\n            <br />\n            <b>\n              <Code\n                size=\"xl\"\n                children={`<div id=\"frangout-shop-look-app\"> </div>`}\n              ></Code>\n            </b>\n            <br />\n            <br />\n            <iframe\n              width=\"720\"\n              height=\"405\"\n              src=\"https://www.youtube.com/embed/poWt-ssYDM8\"\n              title=\"YouTube video player\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowfullscreen\n            ></iframe>\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button onClick={onClose}>Ok</Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n\nLooks.defaultProps = {};\n\nexport default Looks;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/navbar/index.js",["446","447"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/upload/index.js",["448","449","450"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/wallet/index.js",["451","452"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport Parse from \"parse\";\n\nconst VERIFY_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n}\n\nconst INITIAL_WALLET_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useWalletStore = create((set, address) => ({\n  verifyWalletSate: VERIFY_WALLET_STATE,\n  walletState: INITIAL_WALLET_STATE,\n  verifyWalletAddress: async (data) => {\n    set(\n      produce((state) => ({\n        ...state,\n        verifyWalletSate: {\n          ...state.verifyWalletSate,\n          get: {\n            ...VERIFY_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try{\n      // console.log(data);\n    const fetchAccount = await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts?account.id=${data}`);\n    const response = await fetchAccount.json();\n    console.log(response.accounts[0].account);\n\n    if(data === response.accounts[0].account){\n      set(\n        produce((state) => ({\n          ...state,\n          verifyWalletSate: {\n            ...state.verifyWalletSate,\n            get: {\n              ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: true\n              }\n            },\n          },\n        }))\n      );\n    }\n    \n    }catch(e){\n      set(\n        produce((state) => ({\n          ...state,\n          verifyWalletSate: {\n            ...state.verifyWalletSate,\n            get: {\n              ...VERIFY_WALLET_STATE.get,\n              loading: false,\n              success: {\n                ok: false\n              }\n            },\n          },\n        }))\n      );\n    }\n  },\n  getWalletAddress: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          get: {\n            ...INITIAL_WALLET_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      // console.log(data);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            get: {\n              ...INITIAL_WALLET_STATE.get,\n              success: {\n                data: data,\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  },\n  postWalletAddress: async ({ shop, walletAddress }) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.walletState,\n          post: {\n            ...INITIAL_WALLET_STATE.post,\n            loading: true,\n          },\n        },\n      }))\n    );\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/put_shop`,\n        {\n          shop,\n          walletAddress,\n        }\n      );\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: true,\n              },\n            },\n          },\n        }))\n      );\n      return data;\n    } catch (error) {\n      console.log(error);\n      set(\n        produce((state) => ({\n          ...state,\n          walletState: {\n            ...state.walletState,\n            post: {\n              ...INITIAL_WALLET_STATE.post,\n              loading: false,\n              success: {\n                ok: false,\n              },\n              failure: {\n                error: false,\n                message: \"Please Verify the Wallet Address\",\n              },\n            },\n          },\n        }))\n      );\n      throw error;\n    }\n  },\n}));\n\nexport default useWalletStore;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/scripts/index.js",["453"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/currency-exchage/index.js",["454"],"import create from 'zustand';\nimport produce from 'immer';\nimport axios from 'axios';\nimport { INTERNAL_SERVER_ERROR } from '../../constants/strings';\n\nconst INITIAL_CURRENCY_EXCHANGE_SATAE = {\n    get:{\n        loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n    }\n}\n\nconst useCurrencyExchangeStore = create((set) => ({\n    currencyExchangeState: INITIAL_CURRENCY_EXCHANGE_SATAE,\n    getCurrencyExchangeState: async () => {\n        set(\n            produce((state) => ({\n                ...state,\n                currencyExchangeState: {\n                    ...state.currencyExchangeState,\n                    get: {\n                        ...INITIAL_CURRENCY_EXCHANGE_SATAE.get,\n                        loading: true,\n                    }\n                }\n            }))\n        )\n\n        try{ \n            const response = await axios.get('https://api.coinconvert.net/convert/usd/hbar?amount=1');\n            console.log(response);\n            set(\n                produce((state) => ({\n                    ...state,\n                    currencyExchangeState: {\n                        ...state.currencyExchangeState,\n                        get: {\n                            ...INITIAL_CURRENCY_EXCHANGE_SATAE.get,\n                            success: {\n                                ok: true,\n                                data: response.data.HBAR,\n                            }\n                        }\n                    }\n                }))\n            )\n            return response;\n        } catch (e){\n            console.log(e);\n        }\n    }\n}))\n\nexport default useCurrencyExchangeStore","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/files/index.js",["455"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/constants/strings/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/looks/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/charges/index.js",["456"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/views/index.js",["457"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/components/carousel/index.js",["458","459"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/utils/media/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/transaction/index.js",["460","461"],"import create from \"zustand\";\nimport axios from \"axios\";\nimport produce from \"immer\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\n\nconst INITIAL_TRANSACTION_STATE = {\n  get: {\n    loading: false,\n    success: {\n      ok: false,\n      data: [],\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n  post: {\n    loading: false,\n    success: {\n      ok: false,\n      data: null,\n    },\n    failure: {\n      error: false,\n      message: \"\",\n    },\n  },\n};\n\nconst useTransactionStore = create((set) => ({\n  transactionState: INITIAL_TRANSACTION_STATE,\n  getTransactionState: async (shop) => {\n    set(\n      produce((state) => ({\n        ...state,\n        walletState: {\n          ...state.transactionState,\n          get: {\n            ...INITIAL_TRANSACTION_STATE.get,\n            loading: true,\n          },\n        },\n      }))\n    );\n\n    try {\n      // const {data} = await axios.get(`${process.env.REACT_APP_API_SHOPLOOKS_SERVER_URL}/api/get_shop?shop=${shop}`);\n      // const walletAddress = data.walletAddress;\n  //  console.log(walletAddress);\n  console.log(shop)\n      const url = 'https://testnet.mirrornode.hedera.com/api/v1/transactions?account.id=0.0.47870654'\n      const result = await fetch(url)\n      const response = await result.json();\n      // console.log(response);\n\n      set(\n        produce((state) => ({\n          ...state,\n          transactionState: {\n            ...state.transactionState,\n            get: {\n              ...INITIAL_TRANSACTION_STATE.get,\n              success: {\n                ok: true,\n                data: response,\n              },\n            },\n          },\n        }))\n      );\n      return response;\n    } catch (e) {\n      throw e;\n    }\n  },\n}));\n\nexport default useTransactionStore;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shopify-coupon-client/src/store/products/index.js",["462"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/index.js",[],["463","464"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/index.js",["465","466","467","468","469","470"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/context/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/utils/url/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/App.js",["471","472"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/shopify/Authorize.js",["473"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/embed/index.js",["474","475","476","477"],"import { useEffect, useState, useContext } from \"react\";\nimport {\n  Container,\n  Box,\n  Center,\n  useColorModeValue,\n  Heading,\n  Text,\n  Stack,\n  Link,\n  Button,\n  Flex,\n  SimpleGrid,\n  VStack,\n  Divider,\n  Skeleton,\n  useDisclosure,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalOverlay,\n  ModalHeader,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport Carousel from \"../../components/carousel\";\nimport useLooksStore from \"../../store/looks\";\nimport useProductsStore from \"../../store/products\";\nimport useViewsStore from \"../../store/views\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { ShopContext } from \"../../context\";\nimport \"../../embed.css\";\n\nconst ProductsModal = (props) => {\n  const { isOpen, onClose, productIds = [], lookId } = props;\n  const products = useProductsStore((state) => state.products);\n  const getProducts = useProductsStore((state) => state.getProducts);\n  const shop = useContext(ShopContext);\n\n  useEffect(() => {\n    getProducts({ products: productIds, shop });\n  }, []);\n\n  const renderProducts = () => {\n    if (products.get.loading) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {[1, 2, 3].map((e, i) => (\n            <Center p={4} key={i}>\n              <Skeleton width=\"330px\" height=\"330px\" />\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else if (products.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {products.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button\n                onClick={() => getProducts({ products: productIds, shop })}\n              >\n                Try Again\n              </Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (products.get.success.data.length) {\n      return (\n        <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n          {products.get.success.data.map((product) => (\n            <Center py={8} key={product.admin_graphql_api_id || product.id}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  <Carousel medias={product.images} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {product.variants && product.variants.length\n                      ? `${product.variants.length} variants available`\n                      : null}\n                  </Text>\n                  <Heading\n                    textAlign=\"center\"\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {product.title}\n                  </Heading>\n                  <Link\n                    marginTop={\"10px\"}\n                    href={`http://${shop}/products/${product.handle}?app=shoplook&lookid=${lookId}`}\n                    target=\"_blank\"\n                    width=\"full\"\n                  >\n                    <Button isFullWidth rightIcon={<ExternalLinkIcon />}>\n                      View Product\n                    </Button>\n                  </Link>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </SimpleGrid>\n      );\n    } else {\n      return null;\n    }\n  };\n  return (\n    <>\n      <Modal\n        isCentered\n        scrollBehavior={\"inside\"}\n        closeOnOverlayClick\n        blockScrollOnMount={false}\n        preserveScrollBarGap\n        lockFocusAcrossFrames={false}\n        isOpen={isOpen}\n        onClose={onClose}\n        size=\"xl\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Shop the products in this look</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{renderProducts()}</ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nconst EmbedRoute = (props) => {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [productIds, setProductIds] = useState([]);\n  const [isModalvis, setIsModalvis] = useState(false);\n  const [currentLookId, setCurrentLookId] = useState(\"\");\n  const getViews = useViewsStore((state) => state.getViews);\n  const viewsState = useViewsStore((state) => state.viewsState);\n\n  useEffect(() => {\n    getViews({ shop });\n    getLooks({ shop });\n  }, []);\n\n  const onLooksClick = ({ lookId, products }) => {\n    setProductIds(products);\n    setCurrentLookId(lookId);\n    setIsModalvis(true);\n    onOpen();\n  };\n\n  const onModalClose = () => {\n    setCurrentLookId(\"\");\n    setProductIds([]);\n    setIsModalvis(false);\n    onClose();\n  };\n\n  const renderList = () => {\n    if (looks.get.loading) {\n      return [1, 2, 3].map((e, i) => (\n        <Center key={i}>\n          <Skeleton width=\"330px\" height=\"330px\" />\n        </Center>\n      ));\n    } else if (looks.get.failure.error) {\n      return (\n        <Box>\n          <Flex direction=\"column\" align=\"center\">\n            <VStack spacing=\"3\">\n              <Heading as=\"h1\" size=\"md\">\n                {looks.get.failure.message}\n              </Heading>\n            </VStack>\n            <br />\n            <Divider />\n            <br />\n            <VStack spacing=\"3\">\n              <Button onClick={() => getLooks({ shop })}>Try Again</Button>\n            </VStack>\n          </Flex>\n        </Box>\n      );\n    } else if (looks.get.success.data.length) {\n      return (\n        <>\n          {isModalvis ? (\n            <ProductsModal\n              isOpen={isOpen}\n              onClose={onModalClose}\n              lookId={currentLookId}\n              productIds={productIds}\n            />\n          ) : null}\n          {looks.get.success.data.map((look) => (\n            <Center py={8} key={look.id || look.objectId}>\n              <Box\n                role={\"group\"}\n                p={4}\n                maxW={\"330px\"}\n                w={\"full\"}\n                bg={bgColor}\n                boxShadow={\"2xl\"}\n                rounded={\"lg\"}\n                pos={\"relative\"}\n                zIndex={1}\n              >\n                <Box\n                  rounded={\"lg\"}\n                  mt={-12}\n                  pos={\"relative\"}\n                  height={\"260px\"}\n                  // _after={{\n                  // \ttransition: 'all .3s ease',\n                  // \tcontent: '\"\"',\n                  // \tw: 'full',\n                  // \th: 'full',\n                  // \tpos: 'absolute',\n                  // \ttop: 5,\n                  // \tleft: 0,\n                  // \tbackgroundImage: `url(${look.get('medias')[0].url()})`,\n                  // \tfilter: 'blur(15px)',\n                  // \tzIndex: -1,\n                  // }}\n                  _groupHover={{\n                    _after: {\n                      filter: \"blur(20px)\",\n                    },\n                  }}\n                >\n                  {/* <Image\n\t\t\t\t\t\t\t\t\t\t\trounded={'lg'}\n\t\t\t\t\t\t\t\t\t\t\theight={230} \n\t\t\t\t\t\t\t\t\t\t\twidth={282}\n\t\t\t\t\t\t\t\t\t\t\tobjectFit={'cover'}\n\t\t\t\t\t\t\t\t\t\t\tsrc={'https://images.unsplash.com/photo-1518051870910-a46e30d9db16?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80'}\n\t\t\t\t\t\t\t\t\t\t/> */}\n                  <Carousel medias={look.medias} height={260} width={282} />\n                </Box>\n                <Stack pt={3} align={\"center\"}>\n                  <Text\n                    color={\"gray.500\"}\n                    fontSize={\"sm\"}\n                    textTransform={\"uppercase\"}\n                  >\n                    {look.products.length} products in this look\n                  </Text>\n                  <Heading\n                    fontSize={\"2xl\"}\n                    fontFamily={\"body\"}\n                    fontWeight={500}\n                  >\n                    {look.name}\n                  </Heading>\n                  <Button\n                    marginTop={\"10px\"}\n                    onClick={() =>\n                      onLooksClick({\n                        lookId: look.id || look.objectId,\n                        products: look.products,\n                      })\n                    }\n                    isFullWidth\n                  >\n                    HBAR Coupon\n                  </Button>\n                </Stack>\n              </Box>\n            </Center>\n          ))}\n        </>\n      );\n    }\n  };\n\n  return (\n    <Container maxW={\"7xl\"} p=\"12\">\n      <Center>\n        <Heading>HBAR Coupon</Heading>\n      </Center>\n      <br />\n      <SimpleGrid minChildWidth=\"330px\" spacing=\"10px\">\n        {renderList()}\n      </SimpleGrid>\n    </Container>\n  );\n};\n\nexport default EmbedRoute;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/look/index.js",["478","479","480","481","482","483","484","485","486","487","488","489","490","491"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/settings/index.js",["492","493","494","495","496","497","498","499"],"import { useEffect, useContext, useState } from \"react\";\nimport {\n  Box,\n  Heading,\n  ButtonGroup,\n  Text,\n  Button,\n  Container,\n  useToast,\n  Code,\n  Divider,\n  Input,\n  FormControl,\n  InputLeftElement,\n  InputGroup,\n  FormHelperText,\n  Alert,\n  AlertIcon,\n  SimpleGrid,\n  FormErrorMessage,\n  Spinner,\n  SkeletonText,\n} from \"@chakra-ui/react\";\nimport useScriptsStore from \"../../store/scripts\";\nimport { ShopContext } from \"../../context\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport NavBar from \"../../components/navbar\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useWalletStore from \"../../store/wallet\";\n\nconst SettingsRoute = () => {\n  const shop = useContext(ShopContext);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n  const destroyScripts = useScriptsStore((state) => state.destroyScripts);\n  const toast = useToast();\n\n  const verifyWalletSate = useWalletStore((state) => state.verifyWalletSate);\n  const hBarWalletAddress = useWalletStore((state) => state.walletState);\n  const getWalletAddress = useWalletStore((state) => state.getWalletAddress);\n  const postWalletAddress = useWalletStore((state) => state.postWalletAddress);\n  const verifyWalletAddress = useWalletStore(\n    (state) => state.verifyWalletAddress\n  );\n \n  const onSubmitHandler = async (data) => {\n    const walletAddress = data;\n    await verifyWalletAddress(walletAddress);\n    console.log(verifyWalletSate.get.success.ok);\n    if (verifyWalletSate.get.success.ok === true) {\n      try {\n        await postWalletAddress({ shop, walletAddress });\n        toast({\n          title: \"Wallet address added successfully!\",\n          status: \"success\",\n          duration: 3000,\n        });\n      } catch (e) {\n        toast({\n          title: e.message || \"Something went wrong.\",\n          status: \"error\",\n          duration: 3000,\n        });\n      }\n    } else {\n      toast({\n        title: \"Something went wrong.\",\n        status: \"error\",\n        duration: 3000,\n      });\n    }\n  };\n\n\n  const walletSchema = Yup.object().shape({\n    walletAddress: Yup.string().required(\"Wallet Address Is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: { walletAddress: \"\" },\n    validationSchema: walletSchema,\n    onSubmit: (values) => {\n      if (values) {\n        onSubmitHandler(values.walletAddress);\n      }\n    },\n  });\n\n  useEffect(() => {\n    getWalletAddress(shop);\n    getScripts(shop); \n  }, []);\n\n  useEffect(() => {\n    formik.setFieldValue(\n      \"walletAddress\",\n      hBarWalletAddress?.get?.success?.data?.walletAddress || \"\"\n    );\n  }, [hBarWalletAddress?.get?.success?.data?.walletAddress]);\n\n  const enableWidget = async () => {\n    try {\n      await postScripts(shop);\n      toast({\n        title: `Widget added successfully! Please visit your online store after 30 seconds to check the widget.`,\n        status: \"success\",\n      });\n      getScripts(shop);\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n  const HbarAddressInput = () => {\n    if (hBarWalletAddress.get.loading) {\n      return (\n        <Box width={\"100%\"} alignItems=\"center\">\n          <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n        </Box>\n      );\n    } else if (hBarWalletAddress.get.success.ok) {\n      return (\n        <Box>\n          <Text size=\"xl\" fontWeight=\"bold\" pb=\"5px\">\n            HBAR wallet address where to receive HBAR from customer\n          </Text>\n          <FormControl\n            onSubmit={formik.handleSubmit}\n            isInvalid={\n              formik.touched.walletAddress && formik.errors.walletAddress\n            }\n          >\n            <Input\n              id=\"walletAddress\"\n              name=\"walletAddress\"\n              type=\"text\"\n              placeholder=\"HBAR Wallet Address\"\n              onChange={formik.handleChange}\n              value={formik.values.walletAddress}\n            />\n\n            <FormHelperText size=\"sm\" color={\"red\"}>\n              {formik.touched.walletAddress && formik.errors.walletAddress ? (\n                formik.errors.walletAddress\n              ) : (\n                <FormErrorMessage>\n                  Please check HBAR wallet address where to receive HBAR from\n                  customer\n                </FormErrorMessage>\n              )}\n            </FormHelperText>\n          </FormControl>\n          <Button\n            mt={4}\n            onClick={formik.handleSubmit}\n            isLoading={hBarWalletAddress.post.loading}\n            type=\"submit\"\n            size=\"sm\"\n            colorScheme={\"messenger\"}\n          >\n            Submit\n          </Button>\n        </Box>\n      );\n    }\n  };\n\n  const disableWidget = async () => {\n    try {\n      await destroyScripts(shop);\n      toast({\n        title: `Widget removed successfully!`,\n        status: \"success\",\n      });\n      getScripts(shop);\n    } catch (e) {\n      toast({\n        title: e.message || INTERNAL_SERVER_ERROR,\n        status: \"error\",\n      });\n    }\n  };\n\n  const renderButton = () => {\n    if (scripts.get.loading) {\n      return (\n        <Button colorScheme=\"gray\" isLoading isDisabled>\n          Loading ...\n        </Button>\n      );\n    } else if (scripts.get.success.data.length) {\n      return (\n        <Button\n          isLoading={scripts.destroy.loading || scripts.get.loading}\n          fontWeight=\"bold\"\n          size=\"sm\"\n          colorScheme=\"red\"\n          onClick={disableWidget}\n        >\n          Remove Widget From Your Store\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          isLoading={scripts.post.loading || scripts.get.loading}\n          fontWeight=\"bold\"\n          size=\"sm\"\n          colorScheme=\"green\"\n          onClick={enableWidget}\n        >\n          Add Widget To Your Store\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <>\n      <NavBar />\n      <Container maxW={\"7xl\"} p={[12, 6]} bg=\"#f6f6f7\" textAlign={\"left\"}>\n        <Box as=\"section\" maxW=\"3xl\" mx=\"auto\">\n          <SimpleGrid spacing={4}>\n            <Box bg=\"white\" borderRadius={10} p={5} boxShadow=\"md\">\n              {HbarAddressInput()}\n            </Box>\n            <Box bg=\"white\" borderRadius={10} p={5} boxShadow=\"md\">\n              <Text size=\"xl\" fontWeight=\"bold\">\n                Widget Embed Settings\n              </Text>\n              <Text mt=\"4\" fontSize=\"sm\">\n                Enable or disable \"HBAR Coupon\" widget on your store. The widget\n                gets appended to the bottom of your store page above the footer\n                on the home page.\n              </Text>\n              <ButtonGroup mt=\"4\" spacing=\"6\">\n                {renderButton()}\n              </ButtonGroup>\n              <Alert mt={4} status=\"info\">\n                <AlertIcon />\n                <SimpleGrid>\n                  <Box>\n                    <Text fontSize=\"sm\">\n                      NOTE: If you want the widget only on certain pages or only\n                      in certain positions please add the following html tag to\n                      custom liquid or custom html section.\n                    </Text>\n                  </Box>\n                  <Box>\n                    <Code\n                      children={`<div id=\"frangout-shop-look-app\"> </div>`}\n                    ></Code>\n                  </Box>\n                </SimpleGrid>\n              </Alert>\n            </Box>\n          </SimpleGrid>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default SettingsRoute;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/transaction/index.js",["500","501","502","503","504"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/routes/looks/index.js",["505","506","507","508"],"import { useEffect, useContext } from \"react\";\nimport {\n  Box,\n  Heading,\n  Icon,\n  Text,\n  Divider,\n  HStack,\n  Flex,\n  SimpleGrid,\n  Stack,\n  Button,\n  useColorModeValue,\n  Container,\n  VStack,\n  useToast,\n  Skeleton,\n  Alert,\n  Code,\n  ButtonGroup,\n  useDisclosure,\n  Link as ChakraLink,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogBody,\n  AlertDialogHeader,\n  AlertDialogCloseButton,\n  AlertDialogFooter,\n} from \"@chakra-ui/react\";\nimport { DateTime } from \"luxon\";\nimport Carousel from \"../../components/carousel\";\nimport {\n  IoCaretForwardOutline,\n  IoHandLeftSharp,\n  IoEye,\n  IoCartSharp,\n  IoLogoUsd,\n  IoWallet\n} from \"react-icons/io5\";\n\nimport { Link } from \"react-router-dom\";\nimport useLooksStore from \"../../store/looks\";\nimport useScriptsStore from \"../../store/scripts\";\nimport useViewsStore from \"../../store/views\";\nimport useChargesStore from \"../../store/charges\";\nimport { ShopContext } from \"../../context\";\nimport { INTERNAL_SERVER_ERROR } from \"../../constants/strings\";\nimport { LinkIcon } from \"@chakra-ui/icons\";\n\nconst renderSkeleton = (looks) => {\n  return (\n    <Flex alignItems=\"flex-start\" flexDirection=\"row\">\n      <Skeleton>\n        <Carousel medias={[]} />\n      </Skeleton>\n      <Flex direction=\"column\" width=\"90%\" marginLeft=\"5\">\n        <Skeleton width=\"100%\" height=\"40px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n        <br />\n        <Skeleton width=\"100%\" height=\"20px\"></Skeleton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst renderLookPoints = ({ look }) => {\n  return (\n    <SimpleGrid columns={2} spacing={5} marginTop=\"5\">\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoEye} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Views</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total views\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoHandLeftSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Clicks</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total clicks\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoCartSharp} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Add to Cart</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Cart revenue\n          </Text>\n        </VStack>\n      </HStack>\n      <HStack align={\"top\"}>\n        <Box color={\"green.400\"} px={2}>\n          <Icon as={IoWallet} />\n        </Box>\n        <VStack align={\"start\"}>\n          <Text fontWeight={600}>Conversion</Text>\n          <Text color={\"gray.600\"} marginTop=\"0\" style={{ marginTop: 0 }}>\n            Total revenue\n          </Text>\n        </VStack>\n      </HStack>\n    </SimpleGrid>\n  );\n};\n\nconst renderCarousel = ({ orangeColorMode, look }) => {\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"1\"\n      marginRight=\"3\"\n      position=\"relative\"\n      alignItems=\"center\"\n    >\n      <Box zIndex=\"1\" width=\"100%\" position=\"absolute\" height=\"100%\">\n        <Box\n          bgGradient={orangeColorMode}\n          backgroundSize=\"20px 20px\"\n          opacity=\"0.4\"\n          height=\"100%\"\n        />\n      </Box>\n      <Box width={{ base: \"100%\" }} zIndex=\"2\">\n        <Carousel medias={look.medias} />\n      </Box>\n      \n    </Box>\n  );\n};\n\nexport const LooksCreatedDate = (props) => {\n  return (\n    <HStack display=\"flex\" alignItems=\"center\">\n      <Text fontWeight=\"light\" fontSize=\"sm\">\n        Created at:\n      </Text>\n      <Text fontSize=\"sm\">\n        {props.date.toLocaleString(DateTime.DATETIME_MED)}\n      </Text>\n    </HStack>\n  );\n};\n\nexport const renderLooks = ({ looks, orangeColorMode, getLooks }) => {\n  if (looks.get.loading) {\n    return renderSkeleton(looks);\n  } else if (looks.get.failure.error) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              {looks.get.failure.message}\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Button onClick={() => getLooks()}>Try Again</Button>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  } else if (looks.get.success.data.length) {\n    return looks.get.success.data.map((look) => (\n      <Box key={look.objectId} >\n        <Box\n          marginTop={{ base: \"1\", sm: \"5\" }}\n          marginBottom={{ base: \"1\", sm: \"5\" }}\n          display=\"flex\"\n          flexDirection={{ base: \"column\", sm: \"row\" }}\n          justifyContent=\"space-between\"\n          key={look.objectId}\n          padding=\"20px\"\n          boxShadow={'md'}\n          borderRadius={'10px'}\n          bg={'white'}\n        >\n          {renderCarousel({ orangeColorMode, look })}\n          <Box\n            display=\"flex\"\n            flex=\"1\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            marginTop={{ base: \"3\", sm: \"0\" }}\n          >\n            {/* <BlogTags tags={['Engineering', 'Product']} /> */}\n            <Skeleton isLoaded={!looks.get.loading}>\n              <Text fontSize='3xl' marginTop=\"1\" textTransform={'capitalize'}>\n                <Link\n                  textDecoration=\"none\"\n                  _hover={{ textDecoration: \"none\" }}\n                  to={`looks/${look.objectId}`}\n                >\n                  {look.name}\n                </Link>\n              </Text>\n              \n              <LooksCreatedDate date={look.createdAt} />\n            </Skeleton>\n            {renderLookPoints({ look })}\n            <Stack direction=\"row\" spacing={4} marginTop=\"5\">\n              <Link to={`looks/${look.objectId}`}>\n                <Button\n                  colorScheme=\"blue\"\n                  isFullWidth\n                  leftIcon={<IoCaretForwardOutline />}\n                  variant=\"solid\"\n                >\n                  View / Modify\n                </Button>\n              </Link>\n            </Stack>\n          </Box>\n        </Box>\n        <Divider marginTop=\"1em\" marginBottom=\"1em\" />\n      </Box>\n    ));\n  } else if (!looks.get.success.data.length) {\n    return (\n      <Box>\n        <Flex direction=\"column\" align=\"center\">\n          <VStack spacing=\"3\">\n            <Heading as=\"h1\" size=\"md\">\n              You have not created any looks yet\n            </Heading>\n          </VStack>\n          <br />\n          <Divider />\n          <br />\n          <VStack spacing=\"3\">\n            <Link to=\"/looks/create\">\n              <Button>Create Look</Button>\n            </Link>\n          </VStack>\n        </Flex>\n      </Box>\n    );\n  }\n  return null;\n};\n\nfunction Looks(props) {\n  const looks = useLooksStore((state) => state.looks);\n  const getLooks = useLooksStore((state) => state.getLooks);\n  const shop = useContext(ShopContext);\n  const scripts = useScriptsStore((state) => state.scripts);\n  const postScripts = useScriptsStore((state) => state.postScripts);\n  const getScripts = useScriptsStore((state) => state.getScripts);\n  const destroyScripts = useScriptsStore((state) => state.destroyScripts);\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const orangeColorMode = useColorModeValue(\n    \"radial(orange.600 1px, transparent 1px)\",\n    \"radial(orange.300 1px, transparent 1px)\"\n  );\n  // const getViews = useViewsStore((state) => state.getViews);\n  // const viewsState = useViewsStore((state) => state.viewsState);\n  const getCharges = useChargesStore((state) => state.getCharges);\n  const postCharges = useChargesStore((state) => state.postCharges);\n  const chargesState = useChargesStore((state) => state.chargesState);\n  const destroyCharges = useChargesStore((state) => state.destroyCharges);\n  const postViews = useViewsStore((state) => state.postViews);\n\n  const udpateSubscribedState = async () => {\n    try {\n      const chargesData = await getCharges({ shop }); // this api  will return both charges and views\n      console.log(chargesData);\n      const activeCharge = chargesData.recurringApplicationCharges.find(\n        (charge) => charge.status === \"active\"\n      );\n      if (activeCharge) {\n        postViews({ shop, subscribed: true });\n      } else {\n        postViews({ shop, subscribed: false });\n      }\n    } catch (e) {}\n  };\n  useEffect(async () => {\n    getLooks();\n    getScripts(shop);\n    // getViews({ shop });\n    udpateSubscribedState();\n  }, []);\n\n  const renderWidgetStatusAlert = ({ looks }) => {\n    if (!looks.get.success.data.length) {\n      return null;\n    }\n\n    const enableWidget = async () => {\n      try {\n        await postScripts(shop);\n        toast({\n          title: `Widget added successfully! Please visit your online store after 30 seconds to check the widget.`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const disableWidget = async () => {\n      try {\n        await destroyScripts(shop);\n        toast({\n          title: `Widget removed successfully!`,\n          status: \"success\",\n        });\n        getScripts(shop);\n      } catch (e) {\n        toast({\n          title: e.message || INTERNAL_SERVER_ERROR,\n          status: \"error\",\n        });\n      }\n    };\n\n    const renderButton = () => {\n      if (scripts.get.loading) {\n        return (\n          <Button colorScheme=\"gray\" isLoading isDisabled>\n            Loading ...\n          </Button>\n        );\n      } else if (scripts.get.success.data.length) {\n        return (\n          <>\n            <ChakraLink\n              target=\"_blank\"\n              href={`http://${shop}#frangout-shop-look-app-wrapper`}\n            >\n              <Button\n                fontWeight=\"bold\"\n                size=\"md\"\n                colorScheme=\"green\"\n                variant=\"ghost\"\n                leftIcon={<LinkIcon />}\n              >\n                Preview Widget\n              </Button>\n            </ChakraLink>\n            <Button\n              isLoading={scripts.destroy.loading || scripts.get.loading}\n              fontWeight=\"bold\"\n              size=\"md\"\n              colorScheme=\"red\"\n              onClick={disableWidget}\n            >\n              Remove Widget\n            </Button>\n          </>\n        );\n      } else {\n        return (\n          <Button\n            isLoading={scripts.post.loading || scripts.get.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={enableWidget}\n          >\n            Add Widget To Your Store\n          </Button>\n        );\n      }\n    };\n\n    const renderScriptStatusText = () => {\n      if (scripts.get.loading) {\n        return null;\n      } else if (scripts.get.success.data.length) {\n        return (\n          <Flex direction=\"column\">\n            <Text>\n              \"HBAR Coupon\" widget <b>has been added</b> to your store page.\n              &nbsp;\n            </Text>\n            <Text\n              cursor=\"pointer\"\n              onClick={onOpen}\n              style={{ textDecoration: \"underline\" }}\n            >\n              For custom widget position instructions <b>click here.</b>\n            </Text>\n          </Flex>\n        );\n      } else {\n        return (\n          <Text>\n            \"HBAR Coupon\" widget is <b>not added</b> to your store page.\n          </Text>\n        );\n      }\n    };\n    return (\n      <Alert status=\"info\" boxShadow='md'>\n        <Flex\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          width=\"100%\"\n          alignItems=\"center\"\n          height=\"100%\"\n          \n        >\n          <Stack>{renderScriptStatusText()}</Stack>\n          <ButtonGroup variant=\"outline\" spacing=\"6\">\n            {renderButton()}\n          </ButtonGroup>\n        </Flex>\n      </Alert>\n    );\n  };\n\n  const renderChargesStatusAlert = () => {\n    const renderSubscribeButton = () => {\n      const activeCharge =\n        chargesState.get.success.data.recurringApplicationCharges.find(\n          (charge) => charge.status === \"active\"\n        );\n      if (activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.destroy.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"red\"\n            onClick={async () => {\n              const data = await destroyCharges({\n                chargeId: activeCharge.id,\n              });\n              getCharges({ shop });\n              udpateSubscribedState();\n            }}\n          >\n            Cancel Paid Plan\n          </Button>\n        );\n      } else if (!activeCharge) {\n        return (\n          <Button\n            isLoading={chargesState.post.loading}\n            fontWeight=\"bold\"\n            size=\"md\"\n            colorScheme=\"blue\"\n            onClick={async () => {\n              const data = await postCharges({\n                returnURL: `https://${shop}/admin/apps/${process.env.REACT_APP_SHOPIFY_APP_NAME}`,\n              });\n              if (data) {\n                if (window.self !== window.top) {\n                  // checking if it is an iframe\n                  window.parent.location.href = data.confirmation_url;\n                } else {\n                  window.location.href = data.confirmation_url;\n                }\n              }\n            }}\n          >\n            $4.99/month for unlimited views\n          </Button>\n        );\n      }\n    };\n\n    if (chargesState.get.loading) {\n      return null;\n    } else if (chargesState.get.success.ok) {\n      return (\n        <Alert status=\"info\">\n          <Flex\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            width=\"100%\"\n            alignItems=\"center\"\n            height=\"100%\"\n          >\n            <Stack>\n              <Text>\n                The HBAR Coupon widget on your store has{\" \"}\n                <b>{chargesState.get.success.data.views.count}</b> views{\" \"}\n              </Text>\n              <Text>\n                The first 1000 views are free. Please subscribe to our flat\n                $4.99/month paid plan for unlimited views.\n              </Text>\n            </Stack>\n            <ButtonGroup variant=\"outline\" spacing=\"6\">\n              {renderSubscribeButton()}\n            </ButtonGroup>\n          </Flex>\n        </Alert>\n      );\n    } else if (chargesState.get.failure.error) {\n      return null;\n    }\n  };\n\n  return (\n    <>\n    \n      {renderWidgetStatusAlert({ looks })}\n      <Divider />\n      {renderChargesStatusAlert()}\n      <Container maxW={\"3xl\"}>\n        {renderLooks({ looks, orangeColorMode, getLooks })}\n      </Container>\n      <AlertDialog onClose={onClose} isOpen={isOpen} isCentered size=\"3xl\">\n        <AlertDialogOverlay />\n\n        <AlertDialogContent>\n          <AlertDialogHeader>Custom Widget Position</AlertDialogHeader>\n          <AlertDialogCloseButton />\n          <AlertDialogBody textAlign=\"center\">\n            If you want the widget only on certain pages or only in certain\n            positions please add the following html tag to custom liquid or\n            custom html section.\n            <br />\n            <br />\n            <b>\n              <Code\n                size=\"xl\"\n                children={`<div id=\"frangout-shop-look-app\"> </div>`}\n              ></Code>\n            </b>\n            <br />\n            <br />\n            <iframe\n              width=\"720\"\n              height=\"405\"\n              src=\"https://www.youtube.com/embed/poWt-ssYDM8\"\n              title=\"YouTube video player\"\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowfullscreen\n            ></iframe>\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button onClick={onClose}>Ok</Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n\nLooks.defaultProps = {};\n\nexport default Looks;\n","/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/navbar/index.js",["509","510"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/upload/index.js",["511","512","513"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/scripts/index.js",["514"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/transaction/index.js",["515"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/wallet/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/looks/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/currency-exchage/index.js",["516"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/constants/strings/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/views/index.js",["517"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/charges/index.js",["518"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/components/carousel/index.js",["519","520"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/files/index.js",["521"],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/utils/media/index.js",[],"/Users/jithendra/Desktop/Work/hbar-shop/hbar-shop-dashboard/src/store/products/index.js",["522"],{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","severity":1,"message":"528","line":1,"column":17,"nodeType":"529","messageId":"530","endLine":1,"endColumn":26},{"ruleId":"527","severity":1,"message":"531","line":5,"column":3,"nodeType":"529","messageId":"530","endLine":5,"endColumn":11},{"ruleId":"527","severity":1,"message":"532","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":22},{"ruleId":"527","severity":1,"message":"533","line":13,"column":24,"nodeType":"529","messageId":"530","endLine":13,"endColumn":40},{"ruleId":"527","severity":1,"message":"534","line":13,"column":42,"nodeType":"529","messageId":"530","endLine":13,"endColumn":61},{"ruleId":"527","severity":1,"message":"535","line":13,"column":63,"nodeType":"529","messageId":"530","endLine":13,"endColumn":78},{"ruleId":"527","severity":1,"message":"536","line":2,"column":42,"nodeType":"529","messageId":"530","endLine":2,"endColumn":46},{"ruleId":"527","severity":1,"message":"537","line":8,"column":8,"nodeType":"529","messageId":"530","endLine":8,"endColumn":13},{"ruleId":"527","severity":1,"message":"538","line":13,"column":3,"nodeType":"529","messageId":"530","endLine":13,"endColumn":8},{"ruleId":"527","severity":1,"message":"539","line":16,"column":3,"nodeType":"529","messageId":"530","endLine":16,"endColumn":15},{"ruleId":"527","severity":1,"message":"540","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":8},{"ruleId":"527","severity":1,"message":"541","line":34,"column":3,"nodeType":"529","messageId":"530","endLine":34,"endColumn":7},{"ruleId":"527","severity":1,"message":"542","line":35,"column":3,"nodeType":"529","messageId":"530","endLine":35,"endColumn":11},{"ruleId":"527","severity":1,"message":"543","line":41,"column":3,"nodeType":"529","messageId":"530","endLine":41,"endColumn":15},{"ruleId":"527","severity":1,"message":"544","line":44,"column":3,"nodeType":"529","messageId":"530","endLine":44,"endColumn":8},{"ruleId":"527","severity":1,"message":"545","line":46,"column":3,"nodeType":"529","messageId":"530","endLine":46,"endColumn":8},{"ruleId":"527","severity":1,"message":"546","line":47,"column":3,"nodeType":"529","messageId":"530","endLine":47,"endColumn":12},{"ruleId":"527","severity":1,"message":"547","line":91,"column":9,"nodeType":"529","messageId":"530","endLine":91,"endColumn":14},{"ruleId":"527","severity":1,"message":"548","line":109,"column":9,"nodeType":"529","messageId":"530","endLine":109,"endColumn":17},{"ruleId":"527","severity":1,"message":"549","line":110,"column":9,"nodeType":"529","messageId":"530","endLine":110,"endColumn":18},{"ruleId":"527","severity":1,"message":"550","line":116,"column":24,"nodeType":"529","messageId":"530","endLine":116,"endColumn":38},{"ruleId":"551","severity":1,"message":"552","line":186,"column":6,"nodeType":"553","endLine":186,"endColumn":8,"suggestions":"554"},{"ruleId":"527","severity":1,"message":"555","line":1,"column":33,"nodeType":"529","messageId":"530","endLine":1,"endColumn":41},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"557","line":11,"column":3,"nodeType":"529","messageId":"530","endLine":11,"endColumn":10},{"ruleId":"527","severity":1,"message":"558","line":14,"column":3,"nodeType":"529","messageId":"530","endLine":14,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":10},{"ruleId":"527","severity":1,"message":"561","line":28,"column":10,"nodeType":"529","messageId":"530","endLine":28,"endColumn":22},{"ruleId":"527","severity":1,"message":"562","line":28,"column":24,"nodeType":"529","messageId":"530","endLine":28,"endColumn":28},{"ruleId":"527","severity":1,"message":"563","line":32,"column":8,"nodeType":"529","messageId":"530","endLine":32,"endColumn":13},{"ruleId":"551","severity":1,"message":"564","line":90,"column":6,"nodeType":"553","endLine":90,"endColumn":8,"suggestions":"565"},{"ruleId":"551","severity":1,"message":"566","line":93,"column":6,"nodeType":"553","endLine":93,"endColumn":59,"suggestions":"567"},{"ruleId":"527","severity":1,"message":"568","line":25,"column":3,"nodeType":"529","messageId":"530","endLine":25,"endColumn":21},{"ruleId":"551","severity":1,"message":"569","line":43,"column":6,"nodeType":"553","endLine":43,"endColumn":8,"suggestions":"570"},{"ruleId":"527","severity":1,"message":"571","line":184,"column":9,"nodeType":"529","messageId":"530","endLine":184,"endColumn":19},{"ruleId":"551","severity":1,"message":"572","line":189,"column":6,"nodeType":"553","endLine":189,"endColumn":8,"suggestions":"573"},{"ruleId":"527","severity":1,"message":"574","line":38,"column":3,"nodeType":"529","messageId":"530","endLine":38,"endColumn":12},{"ruleId":"551","severity":1,"message":"575","line":295,"column":13,"nodeType":"576","endLine":300,"endColumn":4},{"ruleId":"551","severity":1,"message":"577","line":300,"column":6,"nodeType":"553","endLine":300,"endColumn":8,"suggestions":"578"},{"ruleId":"527","severity":1,"message":"579","line":449,"column":21,"nodeType":"529","messageId":"530","endLine":449,"endColumn":25},{"ruleId":"527","severity":1,"message":"580","line":6,"column":5,"nodeType":"529","messageId":"530","endLine":6,"endColumn":11},{"ruleId":"527","severity":1,"message":"568","line":14,"column":5,"nodeType":"529","messageId":"530","endLine":14,"endColumn":23},{"ruleId":"527","severity":1,"message":"556","line":7,"column":3,"nodeType":"529","messageId":"530","endLine":7,"endColumn":10},{"ruleId":"527","severity":1,"message":"536","line":8,"column":3,"nodeType":"529","messageId":"530","endLine":8,"endColumn":7},{"ruleId":"527","severity":1,"message":"581","line":9,"column":3,"nodeType":"529","messageId":"530","endLine":9,"endColumn":19},{"ruleId":"527","severity":1,"message":"582","line":24,"column":36,"nodeType":"529","messageId":"530","endLine":24,"endColumn":38},{"ruleId":"551","severity":1,"message":"583","line":30,"column":18,"nodeType":"529","endLine":30,"endColumn":29},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":3,"column":8,"nodeType":"529","messageId":"530","endLine":3,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"579","line":61,"column":15,"nodeType":"529","messageId":"530","endLine":61,"endColumn":19},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":5,"column":8,"nodeType":"529","messageId":"530","endLine":5,"endColumn":13},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"585","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":15},{"ruleId":"527","severity":1,"message":"555","line":18,"column":33,"nodeType":"529","messageId":"530","endLine":18,"endColumn":41},{"ruleId":"527","severity":1,"message":"586","line":19,"column":8,"nodeType":"529","messageId":"530","endLine":19,"endColumn":14},{"ruleId":"551","severity":1,"message":"575","line":32,"column":13,"nodeType":"576","endLine":34,"endColumn":4},{"ruleId":"551","severity":1,"message":"587","line":34,"column":6,"nodeType":"553","endLine":34,"endColumn":8,"suggestions":"588"},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"523","replacedBy":"589"},{"ruleId":"525","replacedBy":"590"},{"ruleId":"527","severity":1,"message":"528","line":1,"column":17,"nodeType":"529","messageId":"530","endLine":1,"endColumn":26},{"ruleId":"527","severity":1,"message":"531","line":5,"column":3,"nodeType":"529","messageId":"530","endLine":5,"endColumn":11},{"ruleId":"527","severity":1,"message":"532","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":22},{"ruleId":"527","severity":1,"message":"533","line":13,"column":24,"nodeType":"529","messageId":"530","endLine":13,"endColumn":40},{"ruleId":"527","severity":1,"message":"534","line":13,"column":42,"nodeType":"529","messageId":"530","endLine":13,"endColumn":61},{"ruleId":"527","severity":1,"message":"535","line":13,"column":63,"nodeType":"529","messageId":"530","endLine":13,"endColumn":78},{"ruleId":"527","severity":1,"message":"536","line":2,"column":42,"nodeType":"529","messageId":"530","endLine":2,"endColumn":46},{"ruleId":"527","severity":1,"message":"537","line":8,"column":8,"nodeType":"529","messageId":"530","endLine":8,"endColumn":13},{"ruleId":"527","severity":1,"message":"538","line":13,"column":3,"nodeType":"529","messageId":"530","endLine":13,"endColumn":8},{"ruleId":"527","severity":1,"message":"568","line":25,"column":3,"nodeType":"529","messageId":"530","endLine":25,"endColumn":21},{"ruleId":"551","severity":1,"message":"569","line":43,"column":6,"nodeType":"553","endLine":43,"endColumn":8,"suggestions":"591"},{"ruleId":"527","severity":1,"message":"571","line":184,"column":9,"nodeType":"529","messageId":"530","endLine":184,"endColumn":19},{"ruleId":"551","severity":1,"message":"572","line":189,"column":6,"nodeType":"553","endLine":189,"endColumn":8,"suggestions":"592"},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"585","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":15},{"ruleId":"527","severity":1,"message":"555","line":20,"column":33,"nodeType":"529","messageId":"530","endLine":20,"endColumn":41},{"ruleId":"551","severity":1,"message":"575","line":34,"column":13,"nodeType":"576","endLine":36,"endColumn":4},{"ruleId":"551","severity":1,"message":"587","line":36,"column":6,"nodeType":"553","endLine":36,"endColumn":8,"suggestions":"593"},{"ruleId":"527","severity":1,"message":"539","line":16,"column":3,"nodeType":"529","messageId":"530","endLine":16,"endColumn":15},{"ruleId":"527","severity":1,"message":"540","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":8},{"ruleId":"527","severity":1,"message":"541","line":34,"column":3,"nodeType":"529","messageId":"530","endLine":34,"endColumn":7},{"ruleId":"527","severity":1,"message":"542","line":35,"column":3,"nodeType":"529","messageId":"530","endLine":35,"endColumn":11},{"ruleId":"527","severity":1,"message":"543","line":41,"column":3,"nodeType":"529","messageId":"530","endLine":41,"endColumn":15},{"ruleId":"527","severity":1,"message":"544","line":44,"column":3,"nodeType":"529","messageId":"530","endLine":44,"endColumn":8},{"ruleId":"527","severity":1,"message":"545","line":46,"column":3,"nodeType":"529","messageId":"530","endLine":46,"endColumn":8},{"ruleId":"527","severity":1,"message":"546","line":47,"column":3,"nodeType":"529","messageId":"530","endLine":47,"endColumn":12},{"ruleId":"527","severity":1,"message":"547","line":91,"column":9,"nodeType":"529","messageId":"530","endLine":91,"endColumn":14},{"ruleId":"527","severity":1,"message":"548","line":109,"column":9,"nodeType":"529","messageId":"530","endLine":109,"endColumn":17},{"ruleId":"527","severity":1,"message":"549","line":110,"column":9,"nodeType":"529","messageId":"530","endLine":110,"endColumn":18},{"ruleId":"527","severity":1,"message":"594","line":116,"column":10,"nodeType":"529","messageId":"530","endLine":116,"endColumn":22},{"ruleId":"527","severity":1,"message":"550","line":116,"column":24,"nodeType":"529","messageId":"530","endLine":116,"endColumn":38},{"ruleId":"551","severity":1,"message":"552","line":185,"column":6,"nodeType":"553","endLine":185,"endColumn":8,"suggestions":"595"},{"ruleId":"527","severity":1,"message":"555","line":1,"column":33,"nodeType":"529","messageId":"530","endLine":1,"endColumn":41},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"557","line":11,"column":3,"nodeType":"529","messageId":"530","endLine":11,"endColumn":10},{"ruleId":"527","severity":1,"message":"558","line":14,"column":3,"nodeType":"529","messageId":"530","endLine":14,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":10},{"ruleId":"551","severity":1,"message":"564","line":92,"column":6,"nodeType":"553","endLine":92,"endColumn":8,"suggestions":"596"},{"ruleId":"551","severity":1,"message":"566","line":97,"column":6,"nodeType":"553","endLine":97,"endColumn":60,"suggestions":"597"},{"ruleId":"527","severity":1,"message":"574","line":38,"column":3,"nodeType":"529","messageId":"530","endLine":38,"endColumn":12},{"ruleId":"551","severity":1,"message":"575","line":295,"column":13,"nodeType":"576","endLine":300,"endColumn":4},{"ruleId":"551","severity":1,"message":"577","line":300,"column":6,"nodeType":"553","endLine":300,"endColumn":8,"suggestions":"598"},{"ruleId":"527","severity":1,"message":"579","line":449,"column":21,"nodeType":"529","messageId":"530","endLine":449,"endColumn":25},{"ruleId":"527","severity":1,"message":"580","line":6,"column":5,"nodeType":"529","messageId":"530","endLine":6,"endColumn":11},{"ruleId":"527","severity":1,"message":"568","line":14,"column":5,"nodeType":"529","messageId":"530","endLine":14,"endColumn":23},{"ruleId":"527","severity":1,"message":"581","line":9,"column":3,"nodeType":"529","messageId":"530","endLine":9,"endColumn":19},{"ruleId":"527","severity":1,"message":"582","line":24,"column":36,"nodeType":"529","messageId":"530","endLine":24,"endColumn":38},{"ruleId":"551","severity":1,"message":"583","line":30,"column":18,"nodeType":"529","endLine":30,"endColumn":29},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":5,"column":8,"nodeType":"529","messageId":"530","endLine":5,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"579","line":61,"column":15,"nodeType":"529","messageId":"530","endLine":61,"endColumn":19},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"556","line":7,"column":3,"nodeType":"529","messageId":"530","endLine":7,"endColumn":10},{"ruleId":"527","severity":1,"message":"536","line":8,"column":3,"nodeType":"529","messageId":"530","endLine":8,"endColumn":7},{"ruleId":"527","severity":1,"message":"563","line":2,"column":8,"nodeType":"529","messageId":"530","endLine":2,"endColumn":13},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":3,"column":8,"nodeType":"529","messageId":"530","endLine":3,"endColumn":13},{"ruleId":"523","replacedBy":"599"},{"ruleId":"525","replacedBy":"600"},{"ruleId":"527","severity":1,"message":"528","line":1,"column":17,"nodeType":"529","messageId":"530","endLine":1,"endColumn":26},{"ruleId":"527","severity":1,"message":"531","line":5,"column":3,"nodeType":"529","messageId":"530","endLine":5,"endColumn":11},{"ruleId":"527","severity":1,"message":"532","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":22},{"ruleId":"527","severity":1,"message":"533","line":13,"column":24,"nodeType":"529","messageId":"530","endLine":13,"endColumn":40},{"ruleId":"527","severity":1,"message":"534","line":13,"column":42,"nodeType":"529","messageId":"530","endLine":13,"endColumn":61},{"ruleId":"527","severity":1,"message":"535","line":13,"column":63,"nodeType":"529","messageId":"530","endLine":13,"endColumn":78},{"ruleId":"527","severity":1,"message":"536","line":2,"column":42,"nodeType":"529","messageId":"530","endLine":2,"endColumn":46},{"ruleId":"527","severity":1,"message":"537","line":8,"column":8,"nodeType":"529","messageId":"530","endLine":8,"endColumn":13},{"ruleId":"527","severity":1,"message":"538","line":13,"column":3,"nodeType":"529","messageId":"530","endLine":13,"endColumn":8},{"ruleId":"527","severity":1,"message":"568","line":25,"column":3,"nodeType":"529","messageId":"530","endLine":25,"endColumn":21},{"ruleId":"551","severity":1,"message":"569","line":43,"column":6,"nodeType":"553","endLine":43,"endColumn":8,"suggestions":"601"},{"ruleId":"527","severity":1,"message":"571","line":184,"column":9,"nodeType":"529","messageId":"530","endLine":184,"endColumn":19},{"ruleId":"551","severity":1,"message":"572","line":189,"column":6,"nodeType":"553","endLine":189,"endColumn":8,"suggestions":"602"},{"ruleId":"527","severity":1,"message":"539","line":16,"column":3,"nodeType":"529","messageId":"530","endLine":16,"endColumn":15},{"ruleId":"527","severity":1,"message":"540","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":8},{"ruleId":"527","severity":1,"message":"541","line":34,"column":3,"nodeType":"529","messageId":"530","endLine":34,"endColumn":7},{"ruleId":"527","severity":1,"message":"542","line":35,"column":3,"nodeType":"529","messageId":"530","endLine":35,"endColumn":11},{"ruleId":"527","severity":1,"message":"543","line":41,"column":3,"nodeType":"529","messageId":"530","endLine":41,"endColumn":15},{"ruleId":"527","severity":1,"message":"544","line":44,"column":3,"nodeType":"529","messageId":"530","endLine":44,"endColumn":8},{"ruleId":"527","severity":1,"message":"545","line":46,"column":3,"nodeType":"529","messageId":"530","endLine":46,"endColumn":8},{"ruleId":"527","severity":1,"message":"546","line":47,"column":3,"nodeType":"529","messageId":"530","endLine":47,"endColumn":12},{"ruleId":"527","severity":1,"message":"547","line":91,"column":9,"nodeType":"529","messageId":"530","endLine":91,"endColumn":14},{"ruleId":"527","severity":1,"message":"548","line":109,"column":9,"nodeType":"529","messageId":"530","endLine":109,"endColumn":17},{"ruleId":"527","severity":1,"message":"549","line":110,"column":9,"nodeType":"529","messageId":"530","endLine":110,"endColumn":18},{"ruleId":"527","severity":1,"message":"594","line":116,"column":10,"nodeType":"529","messageId":"530","endLine":116,"endColumn":22},{"ruleId":"527","severity":1,"message":"550","line":116,"column":24,"nodeType":"529","messageId":"530","endLine":116,"endColumn":38},{"ruleId":"551","severity":1,"message":"552","line":185,"column":6,"nodeType":"553","endLine":185,"endColumn":8,"suggestions":"603"},{"ruleId":"527","severity":1,"message":"555","line":1,"column":33,"nodeType":"529","messageId":"530","endLine":1,"endColumn":41},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"557","line":11,"column":3,"nodeType":"529","messageId":"530","endLine":11,"endColumn":10},{"ruleId":"527","severity":1,"message":"558","line":14,"column":3,"nodeType":"529","messageId":"530","endLine":14,"endColumn":19},{"ruleId":"527","severity":1,"message":"559","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":13},{"ruleId":"527","severity":1,"message":"560","line":21,"column":3,"nodeType":"529","messageId":"530","endLine":21,"endColumn":10},{"ruleId":"551","severity":1,"message":"564","line":94,"column":6,"nodeType":"553","endLine":94,"endColumn":8,"suggestions":"604"},{"ruleId":"551","severity":1,"message":"566","line":101,"column":6,"nodeType":"553","endLine":101,"endColumn":60,"suggestions":"605"},{"ruleId":"527","severity":1,"message":"556","line":4,"column":3,"nodeType":"529","messageId":"530","endLine":4,"endColumn":10},{"ruleId":"527","severity":1,"message":"585","line":15,"column":3,"nodeType":"529","messageId":"530","endLine":15,"endColumn":15},{"ruleId":"527","severity":1,"message":"555","line":20,"column":33,"nodeType":"529","messageId":"530","endLine":20,"endColumn":41},{"ruleId":"551","severity":1,"message":"575","line":34,"column":13,"nodeType":"576","endLine":36,"endColumn":4},{"ruleId":"551","severity":1,"message":"587","line":36,"column":6,"nodeType":"553","endLine":36,"endColumn":8,"suggestions":"606"},{"ruleId":"527","severity":1,"message":"574","line":38,"column":3,"nodeType":"529","messageId":"530","endLine":38,"endColumn":12},{"ruleId":"551","severity":1,"message":"575","line":295,"column":13,"nodeType":"576","endLine":300,"endColumn":4},{"ruleId":"551","severity":1,"message":"577","line":300,"column":6,"nodeType":"553","endLine":300,"endColumn":8,"suggestions":"607"},{"ruleId":"527","severity":1,"message":"579","line":449,"column":21,"nodeType":"529","messageId":"530","endLine":449,"endColumn":25},{"ruleId":"527","severity":1,"message":"580","line":6,"column":5,"nodeType":"529","messageId":"530","endLine":6,"endColumn":11},{"ruleId":"527","severity":1,"message":"568","line":14,"column":5,"nodeType":"529","messageId":"530","endLine":14,"endColumn":23},{"ruleId":"527","severity":1,"message":"581","line":9,"column":3,"nodeType":"529","messageId":"530","endLine":9,"endColumn":19},{"ruleId":"527","severity":1,"message":"582","line":24,"column":36,"nodeType":"529","messageId":"530","endLine":24,"endColumn":38},{"ruleId":"551","severity":1,"message":"583","line":30,"column":18,"nodeType":"529","endLine":30,"endColumn":29},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"584","line":4,"column":10,"nodeType":"529","messageId":"530","endLine":4,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"537","line":4,"column":8,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"556","line":7,"column":3,"nodeType":"529","messageId":"530","endLine":7,"endColumn":10},{"ruleId":"527","severity":1,"message":"536","line":8,"column":3,"nodeType":"529","messageId":"530","endLine":8,"endColumn":7},{"ruleId":"527","severity":1,"message":"579","line":61,"column":15,"nodeType":"529","messageId":"530","endLine":61,"endColumn":19},{"ruleId":"527","severity":1,"message":"537","line":3,"column":8,"nodeType":"529","messageId":"530","endLine":3,"endColumn":13},"no-native-reassign",["608"],"no-negated-in-lhs",["609"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'ClientRouter' is defined but never used.","'useClientRouting' is defined but never used.","'useRoutePropagation' is defined but never used.","'RoutePropagator' is defined but never used.","'Text' is defined but never used.","'Parse' is defined but never used.","'Image' is defined but never used.","'StackDivider' is defined but never used.","'toast' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'TableCaption' is defined but never used.","'Tfoot' is defined but never used.","'Alert' is defined but never used.","'AlertIcon' is defined but never used.","'files' is assigned a value but never used.","'navigate' is assigned a value but never used.","'colorMode' is assigned a value but never used.","'setExchageRate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCurrencyExchangeState' and 'getLooskById'. Either include them or remove the dependency array.","ArrayExpression",["610"],"'useState' is defined but never used.","'Heading' is defined but never used.","'Divider' is defined but never used.","'InputLeftElement' is defined but never used.","'InputGroup' is defined but never used.","'Spinner' is defined but never used.","'ErrorMessage' is defined but never used.","'Form' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'getScripts', 'getWalletAddress', and 'shop'. Either include them or remove the dependency array.",["611"],"React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.",["612"],"'useBreakpointValue' is defined but never used.","React Hook useEffect has missing dependencies: 'getProducts', 'productIds', and 'shop'. Either include them or remove the dependency array.",["613"],"'viewsState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLooks', 'getViews', and 'shop'. Either include them or remove the dependency array.",["614"],"'IoLogoUsd' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getLooks', 'getScripts', 'shop', and 'udpateSubscribedState'. Either include them or remove the dependency array.",["615"],"'data' is assigned a value but never used.","'Button' is defined but never used.","'ModalCloseButton' is defined but never used.","'on' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'INTERNAL_SERVER_ERROR' is defined but never used.","'useColorMode' is defined but never used.","'NavBar' is defined but never used.","React Hook useEffect has missing dependencies: 'getTransactionState' and 'shop'. Either include them or remove the dependency array.",["616"],["608"],["609"],["617"],["618"],["619"],"'exchangeRate' is assigned a value but never used.",["620"],["621"],["622"],["623"],["608"],["609"],["624"],["625"],["626"],["627"],["628"],["629"],["630"],"no-global-assign","no-unsafe-negation",{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"desc":"637","fix":"645"},{"desc":"639","fix":"646"},{"desc":"643","fix":"647"},{"desc":"631","fix":"648"},{"desc":"633","fix":"649"},{"desc":"650","fix":"651"},{"desc":"641","fix":"652"},{"desc":"637","fix":"653"},{"desc":"639","fix":"654"},{"desc":"631","fix":"655"},{"desc":"633","fix":"656"},{"desc":"650","fix":"657"},{"desc":"643","fix":"658"},{"desc":"641","fix":"659"},"Update the dependencies array to be: [getCurrencyExchangeState, getLooskById]",{"range":"660","text":"661"},"Update the dependencies array to be: [getScripts, getWalletAddress, shop]",{"range":"662","text":"663"},"Update the dependencies array to be: [formik, xrpWalletAddress?.get?.success?.data?.walletAddress]",{"range":"664","text":"665"},"Update the dependencies array to be: [getProducts, productIds, shop]",{"range":"666","text":"667"},"Update the dependencies array to be: [getLooks, getViews, shop]",{"range":"668","text":"669"},"Update the dependencies array to be: [getLooks, getScripts, shop, udpateSubscribedState]",{"range":"670","text":"671"},"Update the dependencies array to be: [getTransactionState, shop]",{"range":"672","text":"673"},{"range":"674","text":"667"},{"range":"675","text":"669"},{"range":"676","text":"673"},{"range":"677","text":"661"},{"range":"678","text":"663"},"Update the dependencies array to be: [formik, hBarWalletAddress?.get?.success?.data?.walletAddress]",{"range":"679","text":"680"},{"range":"681","text":"671"},{"range":"682","text":"667"},{"range":"683","text":"669"},{"range":"684","text":"661"},{"range":"685","text":"663"},{"range":"686","text":"680"},{"range":"687","text":"673"},{"range":"688","text":"671"},[5219,5221],"[getCurrencyExchangeState, getLooskById]",[2507,2509],"[getScripts, getWalletAddress, shop]",[2640,2693],"[formik, xrpWalletAddress?.get?.success?.data?.walletAddress]",[1056,1058],"[getProducts, productIds, shop]",[5578,5580],"[getLooks, getViews, shop]",[8814,8816],"[getLooks, getScripts, shop, udpateSubscribedState]",[715,717],"[getTransactionState, shop]",[1056,1058],[5578,5580],[749,751],[5134,5136],[2591,2593],[2727,2781],"[formik, hBarWalletAddress?.get?.success?.data?.walletAddress]",[8814,8816],[1056,1058],[5578,5580],[5134,5136],[2601,2603],[2753,2807],[749,751],[8814,8816]]